/*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public License
* as published by the Free Software Foundation; either version 2.1
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this program; if not, write to the Free
* Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
* 02111-1307, USA.
*/
/*
based on Francesco Caruso GLSLParametricCurves
https://github.com/fcaruso/GLSLParametricCurve
*/

#version 420

layout (isolines, equal_spacing, ccw) in;

uniform mat4 vp_modelMatrix, vp_viewMatrix, vp_projMatrix;

out VertexData {
    vec2 texCoord;
} VertexOut;

///////////////////////////////////////////////////
// function to evaluate  the Bezier curve
vec3 bezier(float u, vec3 p0, vec3 p1, vec3 p2, vec3 p3)
{
	float B0 = (1.-u)*(1.-u)*(1.-u);
	float B1 = 3.*u*(1.-u)*(1.-u);
	float B2 = 3.*u*u*(1.-u);
	float B3 = u*u*u;

	vec3 p = B0*p0 + B1*p1 + B2*p2 + B3*p3;
	return p;
} 

void main()
{
	// gl_TessCoord.x represents the distance along one of the lines
    float u = gl_TessCoord.x;
    // gl_TessCoord.y specifies which line the vertex is for
    float v = gl_TessCoord.y;

    // the patch is made of four
    // control points that can be accessed
    // through gl_in[0-3]

	vec3 p0 = vec3( gl_in[0].gl_Position );
	vec3 p1 = vec3( gl_in[1].gl_Position );
	vec3 p2 = vec3( gl_in[2].gl_Position );
	vec3 p3 = vec3( gl_in[3].gl_Position );
	vec4 pos = vec4( bezier( u, p0, p1, p2, p3), 1.0);
					// in case of several diverging isolines + 8 * u * vec3(0,v,0), 1. );
	gl_Position = vp_projMatrix * vp_viewMatrix *  vp_modelMatrix * pos;
	VertexOut.texCoord = vec2(u,0);
}
