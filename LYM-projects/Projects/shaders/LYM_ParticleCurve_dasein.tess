/*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public License
* as published by the Free Software Foundation; either version 2.1
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this program; if not, write to the Free
* Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
* 02111-1307, USA.
*/
/*
based on Francesco Caruso GLSLParametricCurves
https://github.com/fcaruso/GLSLParametricCurve
*/

#version 460

// defines how many vertices this patch will output

layout (vertices = 4) out;

/////////////////////////////////////
// INPUT VARYINGS
in VertexData {
    float radius;
    vec3 color;
    vec2 speed;
    vec2 replayTrackLocation;
} VertexIn[];

// OUTPUT VARYINGS
out VertexData {
    float radius;
    vec3 color;
    vec2 speed;
    vec2 replayTrackLocation;
} VertexOut[];

void main()
{
	// the Outer tessellation level defines how much the 
	// primitive is subdivided 
	// it can be changed e.g. according to the length 
	// of the curve

    gl_TessLevelOuter[0] = 1;
    gl_TessLevelOuter[1] = 8;
	
	// gl_InvocationID is an index in the
	// gl_in array between 0 and 3

	// gl_PatchVerticesIn is the number of vertices 
	// in each patch and the dimension of gl_in[ ]

	// here the control points could be modified dynamically
	// in order to change the curve shape

	gl_out[gl_InvocationID].gl_Position 
	= gl_in[gl_InvocationID].gl_Position;

	// passing input variables to evaluation shader
	VertexOut[gl_InvocationID].color = VertexIn[gl_InvocationID].color;
	VertexOut[gl_InvocationID].radius = VertexIn[gl_InvocationID].radius;
	VertexOut[gl_InvocationID].speed = VertexIn[gl_InvocationID].speed;
	VertexOut[gl_InvocationID].replayTrackLocation = VertexIn[gl_InvocationID].replayTrackLocation;
}
