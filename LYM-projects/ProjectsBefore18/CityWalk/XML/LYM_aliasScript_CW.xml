<!-- ***********************************************************************
File: LYM_aliasScript_CW.xml

LYM CityWalk & Painting Machine (c) Yukao Nagemi & Lola Ajima

************************************************************************* -->

  <!-- ================================================================= -->
  <!-- Alias SCRIPT ============================================= -->
  <!-- contains udp message triggers  -->
  <!-- ================================================================= -->
  <aliasScript>
    <!-- ====================================== -->
    <!-- test UDP connection                    -->
    <!-- ====================================== -->
    <command pattern="/testUDP">
      <action>
        <write_message value="test UDP"/>
      </action>
    </command>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ LAUNCH BACKTRACK ++++++++++++++++++++++ -->
    <!-- +++++++++++++++++   keystroke (t)  ++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <command pattern="/launch">
      <action>
	<send_message_udp pattern="f" value="/launch (now)" />
	<target type="single_host" value="udp_sound_client" />
      </action>
      <action>
	<write_console value="************************************" />
	<write_console value="******** SCHEDULE START ************" />
	<write_console value="************************************" />
	<write_message value="start" />
      </action>
      
      <action>
        <set_node_scalar_value id="backtrack_begin_time" 
			       value="(now)" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      
      <!-- timer reset -->
      <action>
        <set_node_scalar_value id="timer" value="0" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_3fv_timer_mouse_xy
			 ="(({$root:timer}),
			   ({$root:mouse_position_prev[3]}),({$root:mouse_position_prev[4]}))" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>

    </command>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ DRAWING MODE ++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- ====================================== -->
    <!-- 0: void/no output (v)      -->
    <!-- 1: line drawing on (l)     -->
    <!-- 2: Bezier drawing on (b)   -->
    <!-- ====================================== -->
    <command pattern="/drawing_mode i">
      <action>
        <set_node_scalar_value id="drawingMode" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <!-- needs to store previous mouse position when
	   drawing restart because there is no storage
	   in the void mode -->
      <action>
	<set_node_table_value id="mouse_position_prev" 
			      value="(({$root:mouse_position_prev[3]}),
				     ({$root:mouse_position_prev[4]}),
				     ({$config:mouse_x}),
				     ({$config:mouse_y}))" 
			      operator="="/>
	<target type="single_node" value="#root"/>
      </action>
      <!-- action>
	<set_node_table_value id="mouse_position_prev" 
			      value="(-1,-1,-1,-1)" 
			      operator="="/>
        <target type="single_node" value="#root"/>
      </action -->
      <action>
        <set_material_attribute_value operator="=">
          <shader_source 
	     cg_fs_3fv_drawingMode_brushID_rampMode
	     ="(({$root:drawingMode}),({$root:brushID}),({$root:rampMode}))" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
    </command>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ TRANSFORMATIONS +++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ EULER ROTATIONS +++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ PRE/POS TRANSLATIONS ++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <!-- EULER ROTATION GENERIC (not used currently) -->
    <command pattern="/Euler_rotation f f f">
      <action>
        <set_node_scalar_value id="angle_X" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_node_scalar_value id="angle_Y" value="({$2})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_node_scalar_value id="angle_Z" value="({$3})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <write_message value="Euler rotation: ({$root:angle_X}) ({$root:angle_Y}) ({$root:angle_Z})" index="0"/>
      </action>
      <action>
        <set_node_table_value id="sceneTransformationParameters" 
			      value="({$root:scene_post_Z},{$root:scene_post_Y},{$root:scene_post_X},{$root:angle_Z},{$root:angle_Y},{$root:angle_X},{$root:scene_pre_Z},{$root:scene_pre_Y},{$root:scene_pre_X})"
			      operator="="/>
        <target type="single_node" value="#root" />
      </action>
    </command>


    <!-- EULER ROTATION AROUND X AXIS (continuous) -->
    <command pattern="/angle_X f">
      <action>
        <set_node_scalar_value id="angle_X" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <write_message value="Euler rotation x: ({$root:angle_X}) ({$root:angle_Y}) ({$root:angle_Z})" index="0"/>
      </action>
      <action>
        <set_node_table_value id="sceneTransformationParameters" 
			      value="({$root:scene_post_Z},{$root:scene_post_Y},{$root:scene_post_X},{$root:angle_Z},{$root:angle_Y},{$root:angle_X},{$root:scene_pre_Z},{$root:scene_pre_Y},{$root:scene_pre_X})"
			      operator="="/>
        <target type="single_node" value="#root" />
      </action>
    </command>

    <!-- EULER ROTATION AROUND X AXIS (90Â°) -->
    <command pattern="/Euler_rotX_90">
      <ifAction value1="({$root:angle_X})" value2="45" 
		  bool_operator="<">
	<action>
          <set_node_scalar_value id="angle_X" value="90" operator="=" />
          <target type="single_node" value="#root" />
	</action>
	<elseAction/>
	<action>
          <set_node_scalar_value id="angle_X" value="0" operator="=" />
          <target type="single_node" value="#root" />
	</action>
      </ifAction>
      <action>
        <write_message value="Euler rotation x: ({$root:angle_X}) ({$root:angle_Y}) ({$root:angle_Z})" index="0"/>
      </action>
      <action>
        <set_node_table_value id="sceneTransformationParameters" 
			      value="({$root:scene_post_Z},{$root:scene_post_Y},{$root:scene_post_X},{$root:angle_Z},{$root:angle_Y},{$root:angle_X},{$root:scene_pre_Z},{$root:scene_pre_Y},{$root:scene_pre_X})"
			      operator="="/>
        <target type="single_node" value="#root" />
      </action>
    </command>

    <!-- PRE TRANSLATIONS -->
    <command pattern="/pre_translation f f f">
      <action>
        <write_message value="Pre translation: ({$1}) ({$2}) ({$3})" index="0"/>
      </action>
      <action>
        <set_node_scalar_value id="scene_pre_X" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_node_scalar_value id="scene_pre_Y" value="({$2})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_node_scalar_value id="scene_pre_Z" value="({$3})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_node_table_value id="sceneTransformationParameters" 
			      value="({$root:scene_post_Z},{$root:scene_post_Y},{$root:scene_post_X},{$root:angle_Z},{$root:angle_Y},{$root:angle_X},{$root:scene_pre_Z},{$root:scene_pre_Y},{$root:scene_pre_X})"
			      operator="="/>
        <target type="single_node" value="#root" />
      </action>
    </command>

    <!-- PRE TRANSLATION X -->
    <command pattern="/pre_translation_x f">
      <action>
        <set_node_scalar_value id="scene_pre_X" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <write_message value="Pre translation x: ({$root:scene_pre_X}) ({$root:scene_pre_Y}) ({$root:scene_pre_Z}) " index="0"/>
      </action>
      <action>
        <set_node_table_value id="sceneTransformationParameters" 
			      value="({$root:scene_post_Z},{$root:scene_post_Y},{$root:scene_post_X},{$root:angle_Z},{$root:angle_Y},{$root:angle_X},{$root:scene_pre_Z},{$root:scene_pre_Y},{$root:scene_pre_X})"
			      operator="="/>
        <target type="single_node" value="#root" />
      </action>
    </command>

    <!-- POST TRANSLATIONS -->
    <command pattern="/post_translation f f f">
      <action>
        <write_message value="Post translation: ({$1}) ({$2}) ({$3})" index="0"/>
      </action>
      <action>
        <set_node_scalar_value id="scene_post_X" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_node_scalar_value id="scene_post_Y" value="({$2})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_node_scalar_value id="scene_post_Z" value="({$3})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_node_table_value id="sceneTransformationParameters" 
			      value="({$root:scene_post_Z},{$root:scene_post_Y},{$root:scene_post_X},{$root:angle_Z},{$root:angle_Y},{$root:angle_X},{$root:scene_pre_Z},{$root:scene_pre_Y},{$root:scene_pre_X})"
			      operator="="/>
        <target type="single_node" value="#root" />
      </action>
    </command>

    <!-- ====================================== -->
    <!-- keystroke c: clear-up                  -->
    <!-- keystroke C: clear-up                  -->
    <!-- ====================================== -->
    <command pattern="/clear_CLEAR">
      <ifAction value1="({$config:current_frame}-{$root:clearFrame})" value2="100" 
		  bool_operator="<">
	<action>
          <send_message value = "clear"/>
          <target type = "single_node" value = "#root"/>
	</action>
        <elseAction/>
	<action>
	  <set_node_scalar_value id="clearFrame" value="({$config:current_frame})" operator="=" />
	  <target type="single_node" value="#root" />
	</action>
      </ifAction>
    </command>

    <!-- ====================================== -->
    <!-- keystroke s: Snapshot                  -->
    <!-- ====================================== -->
    <command pattern="/snapshot">
      <action>
        <screenshot value="frame_LYM" type="jpg"/>
      </action>
      <action>
	<write_log_file value="-----------------------------" />
	<write_log_file value="drawingMode ({$root:drawingMode})" />
	<write_log_file value="lineLength ({$root:lineLength})" />
	<write_log_file value="brushID ({$root:brushID})" />
	<write_log_file value="granularID ({$root:granularID})" />
	<write_log_file value="decay ({$root:decay})" />
	<write_log_file value="local_radius ({$root:local_radius})" />
	<write_log_file value="decay ({$root:decay})" />
	<write_log_file value="local_color ({@root:local_color})" />
	<write_log_file value="blend_alpha ({$root:blend_alpha})" />
	<write_log_file value="xyz_spectrum_coef ({@root:xyz_spectrum_coef})" />
	<write_log_file value="color_spectrum_coef ({$root:color_spectrum_coef})" />
	<write_log_file value="local_radius_vol_coef ({$root:local_radius_vol_coef})" />
	<write_log_file value="global_radius_vol_coef ({$root:global_radius_vol_coef})" />
	<write_log_file value="=============================" />
      </action>
    </command>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ DRAWING MODE ++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- ====================================== -->
    <!-- 0: void/no output (v)      -->
    <!-- 1: line drawing on (l)     -->
    <!-- 2: Bezier drawing on (b)   -->
    <!-- ====================================== -->
    <command pattern="/void_line f">
      <ifAction value1="({$1})" value2="0" 
		  bool_operator="==">
	<action>
	  <set_node_scalar_value id="drawingMode" value="{#void_drawing}" operator="=" />
	  <target type="single_node" value="#root" />
	</action>
      <elseAction/>
	<action>
	  <set_node_scalar_value id="drawingMode" value="{#line_drawing}" operator="=" />
	  <target type="single_node" value="#root" />
	</action>
      </ifAction>
      <action>
        <set_node_scalar_value id="drawing_start_frame" 
			       value="({$config:current_frame})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source 
	     cg_fs_3fv_drawingMode_brushID_rampMode
	     ="(({$root:drawingMode}),({$root:brushID}),({$root:rampMode}))" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
      <!-- action>
	<set_node_table_value id="mouse_position_prev" 
			      value="(-1,-1,-1,-1)" 
			      operator="="/>
        <target type="single_node" value="#root"/>
      </action -->
    </command>

    <command pattern="/mode_plus">
      <ifAction value1="({$root:drawingMode})" value2="{#line_drawing}" 
		  bool_operator="==">
	<action>
	  <set_node_scalar_value id="drawingMode" value="0" operator="=" />
	  <target type="single_node" value="#root" />
	</action>
      <elseAction/>
	<action>
	  <set_node_scalar_value id="drawingMode" value="{#line_drawing}" operator="=" />
	  <target type="single_node" value="#root" />
	</action>
      </ifAction>

      <action>
        <set_node_scalar_value id="drawing_start_frame" 
			       value="({$config:current_frame})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <!-- action>
	<set_node_table_value id="mouse_position_prev" 
			      value="(-1,-1,-1,-1)" 
			      operator="="/>
        <target type="single_node" value="#root"/>
      </action -->
      <action>
        <set_material_attribute_value operator="=">
          <shader_source 
	     cg_fs_3fv_drawingMode_brushID_rampMode
	     ="(({$root:drawingMode}),({$root:brushID}),({$root:rampMode}))" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
    </command>



    <command pattern="/mode_minus">
      <ifAction value1="({$root:drawingMode})" value2="{#line_drawing}" 
		  bool_operator="==">
	<action>
	  <set_node_scalar_value id="drawingMode" value="{#void_drawing}" operator="=" />
	  <target type="single_node" value="#root" />
	</action>
      <elseAction/>
	<action>
	  <set_node_scalar_value id="drawingMode" value="{#line_drawing}" operator="=" />
	  <target type="single_node" value="#root" />
	</action>
      </ifAction>

      <action>
        <set_node_scalar_value id="drawing_start_frame" 
			       value="({$config:current_frame})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <!-- action>
	<set_node_table_value id="mouse_position_prev" 
			      value="(-1,-1,-1,-1)" 
			      operator="="/>
        <target type="single_node" value="#root"/>
      </action -->
      <action>
        <set_material_attribute_value operator="=">
          <shader_source 
	     cg_fs_3fv_drawingMode_brushID_rampMode
	     ="(({$root:drawingMode}),({$root:brushID}),({$root:rampMode}))" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
    </command>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ GRANULAR SYNTH ++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- ====================================== -->
    <!-- 0: noeffect                            -->
    <!-- 1: left y symm                         -->
    <!-- 2: right y symm                        -->
    <!-- 3: bottom x symmm                      -->
    <!-- 4: top x symm                          -->
    <!-- 5: bottom left symm                    -->
    <!-- 6: top left symm                       -->
    <!-- 7: bottom right symm                   -->
    <!-- 8: top right symm                      -->
    <!-- Next effect (K)                        -->
    <!-- Previous effect (k)                    -->
    <!-- ====================================== -->
    <command pattern="/granular f">
      <action>
        <set_node_scalar_value id="granularID" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
	<write_message value="granular ({$root:granularID})" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_blend_alpha_granularID_center_width
			 ="(({$root:blend_alpha}),
			   ({$root:granularID}),
			   ({$root:granular_center}),
			   ({$root:granular_width}))" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
    </command>
    
    <command pattern="/granular_plus">
      <action>
        <send_message value = "granular_plus"/>
        <target type = "single_node" value = "#root"/>
      </action>
     </command>
    
    <command pattern="/granular_minus">
      <action>
        <send_message value = "granular_minus"/>
        <target type = "single_node" value = "#root"/>
      </action>
    </command>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ BRUSH +++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- ====================================== -->
    <!-- 0: disk (0)       -->
    <!-- 1: square (1)     -->
    <!-- 2: ellispse (2)   -->
    <!-- 3: ring (3)       -->
    <!-- 4: star (4)       -->
    <!-- 5: sun (5)        -->
    <!-- 6: dots (6)       -->
    <!-- 7: concentric (7) -->
    <!-- ====================================== -->
    <command pattern="/brushID i">
      <action>
        <set_node_scalar_value id="brushID" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source 
	     cg_fs_4fv_radius_brushID_drawingMode_depth
	     ="(({$root:local_radius}),
	       ({$root:brushID}),({$root:drawingMode}),{#canonical_depth})" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source 
	     cg_fs_3fv_drawingMode_brushID_rampMode
	     ="(({$root:drawingMode}),({$root:brushID}),({$root:rampMode}))" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
    </command>

    <command pattern="/brush_plus">
      <!-- increments brush ID -->
      <ifAction value1="({$root:brushID})" value2="4" 
		  bool_operator="<">
	<action>
          <set_node_scalar_value id="brushID" value="1" operator="+=" />
          <target type="single_node" value="#root" />
	</action>
      </ifAction>

      <action>
        <set_material_attribute_value operator="=">
          <shader_source 
	     cg_fs_4fv_radius_brushID_drawingMode_depth
	     ="(({$root:local_radius}),
	       ({$root:brushID}),({$root:drawingMode}),{#canonical_depth})" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source 
	     cg_fs_3fv_drawingMode_brushID_rampMode
	     ="(({$root:drawingMode}),({$root:brushID}),({$root:rampMode}))" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
    </command>

    <command pattern="/brush_minus">
      <!-- previous brush ID -->
      <ifAction value1="({$root:brushID})" value2="0" 
		  bool_operator=">">
	<action>
          <set_node_scalar_value id="brushID" value="1" operator="-=" />
          <target type="single_node" value="#root" />
	</action>
      </ifAction>

      <action>
        <set_material_attribute_value operator="=">
          <shader_source 
	     cg_fs_4fv_radius_brushID_drawingMode_depth
	     ="(({$root:local_radius}),
	       ({$root:brushID}),({$root:drawingMode}),{#canonical_depth})" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source 
	     cg_fs_3fv_drawingMode_brushID_rampMode
	     ="(({$root:drawingMode}),({$root:brushID}),({$root:rampMode}))" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
    </command>

    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ DECAY +++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- ====================================== -->
    <!-- Increase decay (D)                     -->
    <!-- Decrease decay (d)                     -->
    <!-- ====================================== -->
    <command pattern="/decay f">
      <action>
        <set_node_scalar_value id="decay" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
	<write_message value="({$root:decay})"  index="2" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
	  <shader_source cg_fs_decay="({$root:decay})"  />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
      </action>
    </command>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ ECHO +++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- ====================================== -->
    <!-- Increase echo (E)                      -->
    <!-- Decrease echo (e)                      -->
    <!-- ====================================== -->
    <command pattern="/echo f">
      <action>
        <set_node_scalar_value id="echo" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
	<write_message value="({$root:echo})"  index="2" />
      </action>
      <action>
        <set_environment_attribute_value operator="=">
          <display echo="({$1})" /> 
        </set_environment_attribute_value> 
        <target type="single_node" value="#config" />
      </action>
    </command>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ NOISE +++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- ====================================== -->
    <!-- Increase noise ()                      -->
    <!-- Decrease noise ()                      -->
    <!-- ====================================== -->
    <command pattern="/noise f">
      <action>
        <set_node_scalar_value id="noise_vol_coef" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
	<write_message value="({$root:noise_vol_coef})"  index="2" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source  
	     cg_vp_3fv_noise_global_radius_frameno="(
(({$root:noise_vol})*({$root:noise_vol_coef})),
(({$root:global_radius_vol})*({$root:global_radius_vol_coef})),
({$config:current_frame}))" />
         </set_material_attribute_value>
        <target type="multiple_nodes" value="#FinalQuad_*" />
      </action>
    </command>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ BRUSH RADIUS ++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- ====================================== -->
    <!-- Increase local radius (R)              -->
    <!-- Decrease local radius (r)              -->
    <!-- Increase global radius (U)             -->
    <!-- Decrease global radius (u)             -->
    <!-- ====================================== -->
    <command pattern="/local_radius f">
      <action>
        <set_node_scalar_value id="local_radius" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
	<write_message value="({$root:local_radius})"  index="2" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source 
	     cg_fs_4fv_radius_brushID_drawingMode_depth
	     ="(({$root:local_radius}),
	       ({$root:brushID}),({$root:drawingMode}),{#canonical_depth})" />
	</set_material_attribute_value>
        <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
      </action>
    </command>
    
    <command pattern="/global_radius f">
      <action>
        <set_node_scalar_value id="global_radius_vol_coef" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
	<write_message value="({$root:global_radius_vol_coef})"  index="2" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source  
	     cg_vp_3fv_noise_global_radius_frameno="(
(({$root:xy_noise_vol})*({$root:xy_noise_vol_coef})),
(({$root:global_radius_vol})*({$root:global_radius_vol_coef})),
({$config:current_frame}))" />
         </set_material_attribute_value>
        <target type="multiple_nodes" value="#FinalQuad_*" />
      </action>
    </command>
    
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ BLEND COLOR +++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <command pattern="/blend_alpha f">
      <!-- action>
        <write_console value="/blend_alpha ({$1})"/>
      </action -->
      <action>
	<set_node_scalar_value id="blend_alpha" 
			      value="({$1})" operator="="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
	<write_message value="({$root:blend_alpha})"  index="2" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_blend_alpha_granularID_center_width
			 ="(({$root:blend_alpha}),
			   ({$root:granularID}),
			   ({$root:granular_center}),
			   ({$root:granular_width}))" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
    </command>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ SPECIAL FXs +++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <command pattern="/post_effects f f f f">
      <action>
	<set_node_table_value id="post_effects" 
			      value="(({$1}),({$2}),({$3}),({$4}))" operator="="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_post_effects="({@root:post_effects})"  />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
    </command>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ LOCAL COLOR +++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <command pattern="/local_color f f f f">
      <action>
	<set_node_table_value id="local_color" 
			      value="(({$1}),({$2}),({$3}),({$4}))" 
			      operator="="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
	<set_node_table_value id="local_color_memory" 
			      value="({@root:local_color})" 
			      operator="="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_local_color="({@root:local_color})"  />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_local_color="({@root:local_color})"  />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
    </command>

    <command pattern="/local_gray f">
      <action>
	<set_node_table_value id="local_color" 
			      value="(({$1}),({$1}),({$1}),({$root:local_color[4]}))" 
			      operator="="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
	<set_node_table_value id="local_color_memory" 
			      value="({@root:local_color})" 
			      operator="="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_local_color="({@root:local_color})"  />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_local_color="({@root:local_color})"  />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
    </command>

    <command pattern="/black_white f">
      <!-- action>
        <write_console value="/black_white ({$1}) ({$root:local_color_count}%3)"/>
      </action -->
      <ifAction value1="({$root:local_color_count}%3)" value2="0" 
		  bool_operator="==">
	<action>
	  <set_node_table_value id="local_color" 
				value="(({$1}),({$1}),({$1}),1)" 
				operator="="/>
          <target type="single_node" value="#root"/>
	</action>
      </ifAction>
      <ifAction value1="({$root:local_color_count}%3)" value2="1" 
		  bool_operator="==">
	<action>
	  <set_node_table_value id="local_color" 
				value="(({$1}),({$1}),({$1}),1)" 
				operator="="/>
          <target type="single_node" value="#root"/>
	</action>
      </ifAction>
      <ifAction value1="({$root:local_color_count}%3)" value2="2" 
		  bool_operator="==">
	<action>
	  <set_node_table_value id="local_color" 
				value="({@root:local_color_memory})" 
				operator="="/>
          <target type="single_node" value="#root"/>
	</action>
      </ifAction>

      <action>
	<set_node_scalar_value id="local_color_count" 
			      value="1" operator="+="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_local_color="({@root:local_color})"  />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_local_color="({@root:local_color})"  />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
    </command>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ SPEED +++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <command pattern="/linear_speed f">
      <!-- action>
        <write_console value="/linear_speed ({$1})"/>
      </action -->
      <action>
	<write_message value="({$root:linear_speed})"  index="3" />
      </action>
      <action>
        <set_node_scalar_value id="linear_speed" value="({$1})" 
			       operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_schedule_attribute_value variable="ramp_linear_speed" 
				      index="1" operator="=">
	  <schedule begin="9999999999999999" dur="10"/>
        </set_schedule_attribute_value>
        <target type="single_node" value="#root"/>
      </action>
    </command>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ SPECTRUM ++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <command pattern="/xyz_spectrum f f f">
      <!-- action>
        <write_console value="/xy ({$1}) ({$2}) ({$3})"/>
      </action -->
      <action>
        <set_node_table_value id="xyz_spectrum" value="(({$1}),({$2}),({$3}))" 
			      operator="=" />
        <target type="single_node" value="#root" />
      </action>
    </command>

    <command pattern="/color_spectrum f f f">
      <!-- action>
        <write_console value="/local_color ({$1}) ({$2}) ({$3})"/>
      </action -->
      <action>
        <set_node_table_value id="color_spectrum" 
			      value="(({$3}),({$1}),({$2}),1)" 
			      operator="=" />
        <target type="single_node" value="#root" />
      </action>
    </command>
    
    <command pattern="/global_radius_vol f">
      <!-- action>
        <write_console value="local displacement V/H/depth ({$1}) ({$1}) ({$1})"/>
      </action -->
      <action>
	<set_node_scalar_value id="global_radius_vol" 
			      value="({$1})" operator="="/>
        <target type="single_node" value="#root"/>
      </action>
    </command>
    
    <command pattern="/local_radius_vol f">
      <!-- action>
        <write_console value="/local_radius_vol ({$1})"/>
      </action -->
      <action>
	<set_node_scalar_value id="local_radius_vol" 
			      value="({$1})" operator="="/>
        <target type="single_node" value="#root"/>
      </action>
    </command>

    <command pattern="/noise_vol f">
      <!-- action>
        <write_console value="/noise_vol ({$1})"/>
      </action -->
      <action>
	<set_node_scalar_value id="noise_vol" 
			       value="({$1})" operator="="/>
        <target type="single_node" value="#root"/>
      </action>
    </command>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ ON-OFFs +++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <command pattern="/on_off_linear_speed">
      <ifAction value1="({$root:on_off_linear_speed})" value2="1" 
		  bool_operator="==">
	  <action>
            <set_node_scalar_value id="on_off_linear_speed" 
				   value="0" operator="=" />
            <target type="single_node" value="#root" />
	  </action>
	<elseAction/>
	  <action>
            <set_node_scalar_value id="on_off_linear_speed" 
				   value="1" operator="=" />
            <target type="single_node" value="#root" />
	  </action>
      </ifAction>
    </command>

    <command pattern="/init_linear_speed">
      <action>
	<set_node_scalar_value id="linear_speed" 
			      value="0.05" operator="="/>
        <target type="single_node" value="#root"/>
      </action>
    </command>


    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ RAMPS +++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <command pattern="/ramp_scene_post_Z">
      <action>
	<set_node_scalar_value id="ramp_scene_post_Z1" 
			      value="({$root:scene_post_Z})" operator="="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
	<set_node_scalar_value id="rampMode" 
			      value="2" operator="="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
	<set_node_scalar_value id="ramp_scene_post_Z2" 
			      value="(({$root:scene_post_Z}) + 1000)" operator="="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
        <set_schedule_attribute_value variable="ramp_scene_post_Z" 
				      index="1" operator="=">
          <schedule begin="now" dur="10"/>
        </set_schedule_attribute_value>
        <target type="single_node" value="#root"/>
      </action>
    </command>

    <command pattern="/ramp_linear_speed">
      <action>
	<set_node_scalar_value id="ramp_linear_speed1" 
			      value="({$root:linear_speed})" operator="="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
	<set_node_scalar_value id="rampMode" 
			      value="1" operator="="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
	<set_node_scalar_value id="ramp_linear_speed2" 
			       value="((({$root:linear_speed}) + 1.0)* 20.0)" operator="="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
	<write_console value="ramp_linear_speed1/2 ({$root:ramp_linear_speed1}) ({$root:ramp_linear_speed2})"/>
      </action>
      <action>
        <set_schedule_attribute_value variable="ramp_linear_speed" 
				      index="1" operator="=">
          <schedule begin="now" dur="4"/>
        </set_schedule_attribute_value>
        <target type="single_node" value="#root"/>
      </action>
    </command>

    <command pattern="/ramp_angle_X">
      <ifAction value1="({$root:angle_X})" value2="45" 
		  bool_operator="<">
	  <action>
            <set_node_scalar_value id="ramp_angle_X1" value="0" operator="=" />
            <target type="single_node" value="#root" />
	  </action>
	  <action>
            <set_node_scalar_value id="ramp_angle_X2" value="90" operator="=" />
            <target type="single_node" value="#root" />
	  </action>
	<elseAction/>
	  <action>
            <set_node_scalar_value id="ramp_angle_X1" value="90" operator="=" />
            <target type="single_node" value="#root" />
	  </action>
	  <action>
            <set_node_scalar_value id="ramp_angle_X2" value="0" operator="=" />
            <target type="single_node" value="#root" />
	  </action>
      </ifAction>
      <action>
	<set_node_scalar_value id="rampMode" 
			      value="3" operator="="/>
        <target type="single_node" value="#root"/>
      </action>
      <action>
        <set_schedule_attribute_value variable="ramp_angle_X" 
				      index="1" operator="=">
          <schedule begin="now" dur="50"/>
        </set_schedule_attribute_value>
        <target type="single_node" value="#root"/>
      </action>
    </command>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ ATTACK ++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <command pattern="/x_loc f">
      <!-- action>
        <write_console value="/x_loc ({$1})"/>
      </action -->
      <action>
        <set_node_scalar_value id="x_loc" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
    </command>

    <command pattern="/y_loc f">
      <!-- action>
        <write_console value="/y_loc ({$1})"/>
      </action -->
      <action>
        <set_node_scalar_value id="y_loc" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
    </command>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ TABLET EVENTS +++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- ====================================== -->
    <!-- X Y Pressure                           -->
    <!-- ====================================== -->
    <!-- command pattern="/tablet f">
      <action>
        <write_message value="({$1}*30.0)" index="2" />
      </action>
      <action>
        <set_node_scalar_value id="local_radius" value="({$1}*30.0)" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source
	     cg_fs_4fv_radius_brushID_drawingMode_depth
	     ="(({$root:local_radius}),
	       ({$root:brushID}),({$root:drawingMode}),{#canonical_depth})" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
      </action>
    </command -->
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ MUSIC CONTROL +++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- ====================================== -->
    <!-- Increase xyz_spectrum_coef (.)         -->
    <!-- Decrease xyz_spectrum_coef (;)         -->
    <!-- Increase color_spectrum_coef (/)       -->
    <!-- Decrease color_spectrum_coef (:)       -->
    <!-- Increase local_radius_vol ({)          -->
    <!-- Decrease local_radius_vol (})          -->
    <!-- Increase global_radius_vol (%)        -->
    <!-- Decrease global_radius_vol (,)        -->
    <!-- ====================================== -->
    <command pattern="/music_control f f f f f f">
      <action>
        <set_node_table_value id="xyz_spectrum_coef" value="(({$1}),({$2}),({$3}))" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <!-- action>
	<write_console value="xyz_spectrum_coef ({@root:xyz_spectrum_coef})" />
      </action -->

      <action>
        <set_node_scalar_value id="color_spectrum_coef" value="({$4})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <!-- action>
	<write_console value="color_spectrum_coef ({$root:color_spectrum_coef})" />
      </action -->

      <action>
        <set_node_scalar_value id="local_radius_vol_coef" value="({$5})" operator="=" />
        <target type="single_node" value="#root" />
      </action>

      <action>
        <set_node_scalar_value id="global_radius_vol_coef" value="({$6})" operator="=" />
        <target type="single_node" value="#root" />
      </action>

    </command>

    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- +++++++++++++++++ TIMER (FROM PD) +++++++++++++++++++++++ -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- ====================================== -->
    <command pattern="/timer f">
      <action>
        <set_node_scalar_value id="timer" value="({$1})" operator="=" />
        <target type="single_node" value="#root" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_3fv_timer_mouse_xy
			 ="(({$root:timer}),
			   ({$root:mouse_position_prev[3]}),({$root:mouse_position_prev[4]}))" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
    </command>

    <command pattern="/countdown i i">
      <action>
	<write_message value="({$1}):({$2})" index="0"/>
      </action>
    </command>
  </aliasScript>
