<!-- ***********************************************************************
File: CityWalk/XML/LYM_scene_CW.xml

LYM CityWalk & Painting Machine (c) Yukao Nagemi & Lola Ajima

************************************************************************* -->

<node id="root">
  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- ++++++++++++++++++++++ PARAMETERS +++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <!-- drawing modes -->
  <set id="void_drawing" value="0"/>
  <set id="line_drawing" value="2"/>
  <set id="bezier_drawing" value="3"/>
  <set id="dot_drawing" value="1"/>
  <set id="radial_drawing" value="4"/>
  <set id="transition_drawing" value="5"/>

  <!-- the depth of the canothe viewport -->
  <set id="canonical_depth" float_value="1000.0"/>

  <!-- local displacement parameters -->
  <set id="local_displact_depth" float_value="0.0" />
  <set id="local_displact_H" float_value="0.0" />
  <set id="local_displact_V" float_value="0.0" />

  <!-- local displacement & decay storage -->
  <table id="local_displact_decay" type="float" size="4" 
	 value="({#local_displact_depth},{#local_displact_H},
		{#local_displact_V},0)"/>

  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++- VARIABLES ++++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <scalar type="texture" id="PositionColorTexture_Even" 
	  texture_min_filter="nearest_filter" 
	  texture_max_filter="nearest_filter" 
	  texture_format="float_tex_format" mipmapped="false"
	  rectangle="true" nb_attachments="1" />
  <scalar type="texture" id="PositionColorTexture_Odd" 
	  texture_min_filter="nearest_filter" 
	  texture_format="float_tex_format"  mipmapped="false"
	  rectangle="true" nb_attachments="1" />

  <scalar type="texture" id="FrameTexture_Even" 
	  texture_min_filter="nearest_filter" 
	  texture_max_filter="nearest_filter" 
	  texture_format="float_tex_format" mipmapped="false"
	  rectangle="true" nb_attachments="1" />
  <scalar type="texture" id="FrameTexture_Odd" 
	  texture_min_filter="nearest_filter" 
	  texture_format="float_tex_format"  mipmapped="false"
	  rectangle="true" nb_attachments="1" />

  <!-- rendering parameters -->
  <scalar type="int" id="drawingMode" value="{#void_drawing}" />
  <scalar type="int" id="next_drawingMode" value="{#void_drawing}" />
  <scalar type="float" id="kaleidoscopeID" value="0" />
  <scalar type="float" id="decay" value="0" />
  <scalar type="float" id="echo" value="0" />
  <scalar type="float" id="lineLength" value="{#lineLength}" />

  <!-- Brush ID and size -->
  <scalar type="float" id="local_radius" value="1.0" />
  <scalar type="float" id="global_radius" value="1.0" />
  <scalar type="int" id="brushID" value="0" />

  <!-- control parameters -->
  <scalar type="float" id="timer" value="0" />
  <scalar type="float" id="linear_speed" value="0" />
  <scalar type="float" id="on_off_linear_speed" value="1" />
  <scalar type="int" id="rampMode" value="0" />

  <!-- sound parameters -->
  <table type="float" size="3" id="xyz_spectrum" value="(0,0,0)" />
  <table type="float" size="4" id="color_spectrum" value="(0,0,0,1)" />
  <scalar type="float" id="global_radius_vol" value="1" />
  <scalar type="float" id="local_radius_vol" value="1" />
  <scalar type="float" id="noise_vol" value="0" />

  <table type="float" size="3" id="xyz_spectrum_coef" value="(0,0,0)" />
  <scalar type="float" id="color_spectrum_coef" value="0" />
  <scalar type="float" id="global_radius_vol_coef" value="0" />
  <scalar type="float" id="local_radius_vol_coef" value="0" />
  <scalar type="float" id="noise_vol_coef" value="0" />

  <!-- working variables -->
  <table  type="float" size="4" id="mouse_position_prev" value="(0,0,0,0)" />
  <scalar type="int" id="drawingFrame" value="0" />

  <scalar type="int" id="clearFrame" value="0" />
  <scalar type="int" id="backtrack_begin_time" value="0" />
  <table  type="float" size="4" id="local_color" value="(1,1,1,1)" />
  <table  type="float" size="4" id="local_color_memory" value="(1,1,1,1)" />
  <scalar type="float" id="local_color_count" value="0" />

  <!-- post-processing effects -->
  <table  type="float" size="4" id="blend_color" value="(1,1,1,1)" />
  <table  type="float" size="4" id="post_effects" value="(0,0,0,0)" />

  <!-- scene transformation -->
  <scalar type="float" id="scene_pre_Z" value="(1.1*{#canonical_depth})" />
  <scalar type="float" id="scene_pre_Y" value="0" />
  <scalar type="float" id="scene_pre_X" value="0" />
  <scalar type="float" id="scene_post_Z" value="0" />
  <scalar type="float" id="scene_post_Y" value="0" />
  <scalar type="float" id="scene_post_X" value="0" />
  <scalar type="float" id="angle_X" value="0" />
  <scalar type="float" id="angle_Y" value="0" />
  <scalar type="float" id="angle_Z" value="0" />
  <scalar type="float" id="angle_step" value="0.01" />

  <table id="sceneTransformationMatrix" type="float" size="16" 
	 value="(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)"/>
  <!-- 3 post-translation parameters: Z Y X
       3 Euler angles
       3 pre-translation parameters: Z Y X -->
  <!-- 4: {$root:angle_Z} is roll -->
  <!-- 5: {$root:angle_Y} is yaw -->
  <!-- 6: {$root:angle_X} is pitch -->
  <!-- http://en.wikipedia.org/wiki/Euler_angles -->
  <!-- XZY matrix for roll * pitch * yaw -->
  <!-- cos2*cos3,sin1*sin3+cos1*cos3*sin2,cos3*sin1*sin2-cos1*sin3,0,
       0.0-sin2,cos1*cos2,cos2*sin1,0,
       cos2*sin3,cos1*sin2*sin3-cos3*sin1,cos1*cos3+sin1*sin2*sin3,0, -->
  <table id="sceneTransformationParameters" type="float" size="9" 
	 value="(0,0,0,0,0,0,0,0,0)"/>

  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++- RAMPS ++++++++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <scalar id="ramp_scene_post_Z" type="float">
    <interpolator id="ramp_scene_post_Z" type="scalar" size="2">
      <schedule 
	 begin="300000000000" dur="0.4" repeatCount="1" 
	 mode="sinus" fill="freeze">
        <updateScript>
          <command>
	    <action>
              <set_node_scalar_value id="scene_post_Z" 
				     value="({$root:ramp_scene_post_Z})" 
				     operator="=" />
              <target type="single_node" value="#root" />
	    </action>
	    <!-- action>
            <write_console value="ramp_scene_post_Z ({$root:scene_post_Z})"/>
	    </action -->
	    <action>
              <set_node_table_value id="sceneTransformationParameters" 
				    value="({$root:scene_post_Z},{$root:scene_post_Y},{$root:scene_post_X},{$root:angle_Z},{$root:angle_Y},{$root:angle_X},{$root:scene_pre_Z},{$root:scene_pre_Y},{$root:scene_pre_X})"
				    operator="="/>
              <target type="single_node" value="#root" />
	    </action>
	    <action>
	      <send_message_udp pattern="f f f" value="/post_translation ({$1}) ({$2}) ({$3})" />
	      <target type="single_host" value="udp_sound_client" />
	    </action>
          </command>
        </updateScript>
	<completionScript>
          <command>
	    <action>
	      <set_node_scalar_value id="rampMode" 
				     value="0" operator="="/>
              <target type="single_node" value="#root"/>
	    </action>
          </command>
	</completionScript>
      </schedule>
      <scalar id="ramp_scene_post_Z1" type="float" value="0"/>
      <scalar id="ramp_scene_post_Z2" type="float" value="0"/>
    </interpolator>
  </scalar>

  <scalar id="ramp_linear_speed" type="float">
    <interpolator id="ramp_linear_speed" type="scalar" size="2">
      <schedule 
	 begin="300000000000" dur="0.4" repeatCount="1" 
	 mode="linear" fill="freeze">
        <updateScript>
          <command>
	    <action>
              <set_node_scalar_value id="linear_speed" 
				     value="({$root:ramp_linear_speed})" 
				     operator="=" />
              <target type="single_node" value="#root" />
	    </action>
	    <!-- action>
              <write_console value="linear_speed ({$root:linear_speed})"/>
	    </action -->
          </command>
        </updateScript>
	<completionScript>
          <command>
	    <action>
	      <set_node_scalar_value id="ramp_linear_speed1" 
				     value="({$root:linear_speed})" operator="="/>
              <target type="single_node" value="#root"/>
	    </action>
	    <action>
	      <set_node_scalar_value id="ramp_linear_speed2" 
				     value="((({$root:linear_speed}) + 1.0)* 2.0)" operator="="/>
              <target type="single_node" value="#root"/>
	    </action>
	    <action>
	      <write_console value="ramp_linear_speed1/2 ({$root:ramp_linear_speed1}) ({$root:ramp_linear_speed2})"/>
	    </action>
	    <action>
              <set_schedule_attribute_value variable="ramp_linear_speed" 
					    index="1" operator="=">
		<schedule begin="now" dur="10"/>
              </set_schedule_attribute_value>
              <target type="single_node" value="#root"/>
	    </action>
	    <action>
	      <set_node_scalar_value id="rampMode" 
				     value="1" operator="="/>
              <target type="single_node" value="#root"/>
	    </action>
          </command>
	</completionScript>	  
      </schedule>
      <scalar id="ramp_linear_speed1" type="float" value="0"/>
      <scalar id="ramp_linear_speed2" type="float" value="0"/>
    </interpolator>
  </scalar>

  <scalar id="ramp_angle_X" type="float">
    <interpolator id="ramp_angle_X" type="scalar" size="2">
      <schedule 
	 begin="300000000000" dur="0.4" repeatCount="1" 
	 mode="sinus" fill="freeze">
        <updateScript>
          <command>
	    <action>
              <set_node_scalar_value id="angle_X" 
				     value="({$root:ramp_angle_X})" 
				     operator="=" />
              <target type="single_node" value="#root" />
	    </action>
	    <action>
              <set_node_table_value id="sceneTransformationParameters" 
				    value="({$root:scene_post_Z},{$root:scene_post_Y},{$root:scene_post_X},{$root:angle_Z},{$root:angle_Y},{$root:angle_X},{$root:scene_pre_Z},{$root:scene_pre_Y},{$root:scene_pre_X})"
				    operator="="/>
              <target type="single_node" value="#root" />
	    </action>
	    <action>
	      <send_message_udp pattern="f f f" value="/Euler_rotation ({$root:angle_X}) ({$root:angle_Y}) ({$root:angle_Z})" />
	      <target type="single_host" value="udp_sound_client" />
	    </action>
	    <!-- action>
              <write_console value="angle_X ({$root:angle_X})"/>
	    </action -->
          </command>
        </updateScript>
	<completionScript>
          <command>
	    <action>
	      <set_node_scalar_value id="rampMode" 
				     value="0" operator="="/>
              <target type="single_node" value="#root"/>
	    </action>
          </command>
	</completionScript>
      </schedule>
      <scalar id="ramp_angle_X1" type="float" value="0"/>
      <scalar id="ramp_angle_X2" type="float" value="0"/>
    </interpolator>
  </scalar>

  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++- PREDEFINED COMMANDS ++++++++++++++ -->
  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

  <!-- ============================================= -->
  <!-- INTIAL SCRIPT ======================== -->
  <!-- launch when the program begins -->
  <!-- ============================================= -->
  <initializationScript id="beginning script">
    <command>
      <action>
	<write_console value="decay ({$root:decay}) echo ({$root:echo}) local_radius ({$root:local_radius}) brushID ({$root:brushID})" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source 
	     cg_fs_4fv_radius_brushID_drawingMode_depth
	     ="(
({$root:local_radius}+({$root:local_radius_vol_coef}*{$root:local_radius_vol})),
({$root:brushID}),({$root:drawingMode}),
{#canonical_depth})" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
	  <shader_source cg_fs_4fv_local_displact_decay="({@root:local_displact_decay})"  />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source 
	     cg_fs_3fv_drawingMode_brushID_rampMode
	     ="(({$root:drawingMode}),({$root:brushID}),({$root:rampMode}))" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
      <action>
        <set_environment_attribute_value operator="=">
          <display echo="({$1})" /> 
        </set_environment_attribute_value> 
        <target type="single_node" value="#config" />
      </action>
 

      <action>
        <write_console value="local displacement V/H/depth & decay ({@root:local_displact_decay})"/>
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_local_displact_decay="({@root:local_displact_decay})"  />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
      </action>

      <action>
        <write_console value="local color ({@root:local_color})"/>
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_local_color="({@root:local_color})"  />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_local_color="({@root:local_color})"  />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>
 
      <action>
        <write_console value="blend color ({@root:blend_color})"/>
      </action>
      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_blend_color="({@root:blend_color})"  />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>

      <!--initial mouse position -->
      <action>
	<set_node_table_value id="mouse_position_prev" 
			      value="(({$config:mouse_x}), ({$config:mouse_y}),
				     ({$config:mouse_x}), ({$config:mouse_y}))" 
			      operator="="/>
        <target type="single_node" value="#root"/>
      </action>

      <action>
        <set_material_attribute_value operator="=">
          <shader_source cg_fs_4fv_kaleidoscopeID_timer_mouse_xy
			 ="(({$root:kaleidoscopeID}),({$root:timer}),
			   ({$root:mouse_position_prev[3]}),({$root:mouse_position_prev[4]}))" />
        </set_material_attribute_value>
        <target type="multiple_nodes" value="#SimpleDisplay_*" />
      </action>

      <action>
        <set_node_table_value id="sceneTransformationParameters" 
			      value="({$root:scene_post_Z},{$root:scene_post_Y},{$root:scene_post_X},{$root:angle_Z},{$root:angle_Y},{$root:angle_X},{$root:scene_pre_Z},{$root:scene_pre_Y},{$root:scene_pre_X})"
			      operator="="/>
        <target type="single_node" value="#root" />
      </action>
      <action>
        <write_console value="Transformation parameters ({@root:sceneTransformationParameters})"/>
      </action>

     </command>
  </initializationScript>

  <include xlink:href="CityWalk/XML/LYM_script_CW.xml" />
  <include xlink:href="CityWalk/XML/LYM_aliasScript_CW.xml" />

  <!--USER, LIGHTS, AND VIEWPOINTS-->
  <!--============================-->
  <node id="user_0">
    <user id="user_0">
      <viewpoints default_viewpoint="1" shots="0" />
      <navigation navigation_mode="quad" start_y="0.0" 
		  navigation_maximal_y="100" 
		  navigation_minimal_y="-100" 
		  navigation_step="0" start_x="0" start_z="0" 
		  start_pitch="0" start_yaw="0" 
		  rotation_amplitude_yaw="0" rotation_amplitude_pitch="0" />
      <view_volume type="ortho" x_min="0" x_max="{#width}" 
		   y_min="0" y_max="{#height}" 
		   near="-100" far="100" />
    </user>
  </node>



  <node id="camera_ortho">
    <viewpoint id="camera_ortho"/>
  </node>


  <!--========================================================-->
  <!--========================================================-->
  <!--================ AT EACH FRAME =========================-->
  <!-- SHADER VALUE ASSIGNMENT ACCORDING TO CHANGING VARIABLES-->
  <!--========================================================-->
  <!--========================================================-->
  <node id="SetPositionColorAndFBOPingPong">
    <renderingScript id="SetPositionColorAndFBOPingPong">
      <command>	

	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- ++++ SPECTRUM: MOUSE POSITION DISPLACT ++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<action>
          <set_node_scalar_value 
	     id="mouse_x" 
	     value="({$root:xyz_spectrum_coef[1]}*{$root:xyz_spectrum[1]})" 
	     operator="+=" />
          <set_node_scalar_value 
	     id="mouse_y" 
	     value="({$root:xyz_spectrum_coef[2]}*{$root:xyz_spectrum[2]})" 
	     operator="+=" />
          <target type="single_node" value="#config" />
	</action>
	<!-- attack is not used currently -->
	<!-- action>
          <set_node_scalar_value 
	     id="mouse_x" 
	     value="({$root:x_loc_coef}*{$root:x_loc})" 
	     operator="+=" />
          <set_node_scalar_value 
	     id="mouse_y" 
	     value="({$root:y_loc_coef}*{$root:y_loc})" 
	     operator="+=" />
          <target type="single_node" value="#config" />
	</action -->

	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- ++++ FRAME COUNTING AND MOUSE POSITION STORAGE ++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- ++++ drawing frame is only increased in drawing mode ++++ -->
	<!-- ++++ and if mouse pos. has changed from prec. frame  ++++ -->
	<!-- ++++++++++++++++ or in transition mode ++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<ifAction value1="({$root:drawingMode})" value2="{#void_drawing}" 
		  bool_operator="!=">
	  <ifAction value1="({$config:mouse_x})" 
		    value2="({$root:mouse_position_prev[3]})" 
		    bool_operator="!=">
	    <action>
              <set_node_scalar_value 
		 id="drawingFrame" value="1" operator="+=" />
              <target type="single_node" value="#root" />
	    </action>
	    <!-- previous mouse position memory -->
	    <action>
	      <set_node_table_value id="mouse_position_prev" 
				    value="(({$root:mouse_position_prev[3]}),
					   ({$root:mouse_position_prev[4]}),
					   ({$config:mouse_x}),
					   ({$config:mouse_y}))" 
				    operator="="/>
              <target type="single_node" value="#root"/>
	    </action>
	    <elseAction/>
	    <ifAction value1="({$config:mouse_y})" 
		      value2="({$root:mouse_position_prev[4]})" 
		      bool_operator="!=">
	      <action>
		<set_node_scalar_value 
		   id="drawingFrame" value="1" operator="+=" />
		<target type="single_node" value="#root" />
	      </action>
	      <!-- previous mouse position memory -->
	      <action>
		<set_node_table_value id="mouse_position_prev" 
				      value="(({$root:mouse_position_prev[3]}),
					     ({$root:mouse_position_prev[4]}),
					     ({$config:mouse_x}),
					     ({$config:mouse_y}))" 
				      operator="="/>
		<target type="single_node" value="#root"/>
	      </action>

	    </ifAction>
	  </ifAction>
	</ifAction>
	<ifAction value1="({$root:drawingMode})" value2="{#transition_drawing}" 
		  bool_operator="==">
	  <action>
	    <set_node_scalar_value id="drawingMode" value="({$root:next_drawingMode})" operator="=" />
	    <target type="single_node" value="#root" />
	  </action>
	  <action>
            <set_material_attribute_value operator="=">
              <shader_source 
		 cg_fs_3fv_drawingMode_brushID_rampMode
		 ="(({$root:drawingMode}),({$root:brushID}),({$root:rampMode}))" />
            </set_material_attribute_value>
            <target type="multiple_nodes" value="#SimpleDisplay_*" />
	  </action>
	</ifAction>

	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++ SCENE GRAPH TRANSFORMATION ++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<action>
	  <set_node_attribute_value operator="=">
	    <transformation matrix="({@root:sceneTransformationMatrix})"/>
	  </set_node_attribute_value>
          <target type="multiple_nodes" value="#FinalQuad_transl_*" />
	</action>

	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++ CURRENT FRAME STORAGE ON THE THREE QUADS ++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- current frame storage on the two quads -->
	<action>
          <set_material_attribute_value operator="=">
            <shader_source 
	       cg_fs_4fv_H_W_drawingFrame_lineLength
	       ="({#height},{#width},
		 ({$root:drawingFrame}),
		 ({$root:lineLength}))" 
	       cg_fs_4x4fv_invTransformation
               ="(inv({@root:sceneTransformationMatrix}))" 
	       cg_fs_3fv_mouse_xy_noise_z
	       ="(({$root:mouse_position_prev[3]}),({$root:mouse_position_prev[4]}),({$root:xyz_spectrum_coef[3]}*{$root:xyz_spectrum[3]}))" />
          </set_material_attribute_value>
          <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
	</action>
	<action>
          <set_material_attribute_value operator="=">
            <shader_source 
	       cg_vp_4fv_H_W_drawingFrame_lineLength
	       ="({#height},{#width},
		 ({$root:drawingFrame}),
		 ({$root:lineLength}))" />
          </set_material_attribute_value>
          <target type="multiple_nodes" value="#FinalQuad_*" />
	</action>
	<action>
          <set_material_attribute_value operator="=">
            <shader_source 
	       cg_fs_4fv_width_height_frameNo_trace
	       ="({#width},{#height},
		 ({$config:current_frame}),0)"
	       cg_fs_4fv_kaleidoscopeID_timer_mouse_xy
	       ="(({$root:kaleidoscopeID}),({$root:timer}),
		 ({$config:mouse_x}),({$config:mouse_y}))" />
          </set_material_attribute_value>
          <target type="multiple_nodes" value="#SimpleDisplay_*" />
	</action>
	<!-- action>
	  <write_console value="Frame ({$root:drawingFrame})" />
	</action -->


	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- ++++++++++ FBO ping pong choice and rendering +++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!--========================================================-->
	<!-- ping pong choice between PositionColorTexture_Odd 
	     and PositionColorTexture_Even -->
	<!--========================================================-->
	<ifAction value1="({$config:current_frame}%2)" value2="1" 
		  bool_operator="==">
	  <action>
            <set_node_attribute_value displayed="true" operator="=" />
            <target type="single_node" value="#evenInput_oddOutput"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="true" operator="=" />
            <target type="single_node" value="#FBStartStorePositionColor_Odd"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="true" operator="=" />
            <target type="single_node" value="#QuadStorePositionColor_Odd"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="true" operator="=" />
            <target type="single_node" value="#FBFinishStorePositionColor_Odd"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="true" operator="=" />
            <target type="single_node" value="#FinalQuad_Odd"/>
	  </action>
	  
	  <action>
            <set_node_attribute_value displayed="false" operator="=" />
            <target type="single_node" value="#oddInput_evenOutput"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="false" operator="=" />
            <target type="single_node" value="#FBStartStorePositionColor_Even"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="false" operator="=" />
            <target type="single_node" value="#QuadStorePositionColor_Even"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="false" operator="=" />
            <target type="single_node" value="#FBFinishStorePositionColor_Even"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="false" operator="=" />
            <target type="single_node" value="#FinalQuad_Even"/>
	  </action>
	  
	<elseAction/>
	  
	  <action>
            <set_node_attribute_value displayed="false" operator="=" />
            <target type="single_node" value="#evenInput_oddOutput"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="false" operator="=" />
            <target type="single_node" value="#FBStartStorePositionColor_Odd"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="false" operator="=" />
            <target type="single_node" value="#QuadStorePositionColor_Odd"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="false" operator="=" />
            <target type="single_node" value="#FBFinishStorePositionColor_Odd"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="false" operator="=" />
            <target type="single_node" value="#FinalQuad_Odd"/>
	  </action>
	  
	  <action>
            <set_node_attribute_value displayed="true" operator="=" />
            <target type="single_node" value="#oddInput_evenOutput"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="true" operator="=" />
            <target type="single_node" value="#FBStartStorePositionColor_Even"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="true" operator="=" />
            <target type="single_node" value="#QuadStorePositionColor_Even"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="true" operator="=" />
            <target type="single_node" value="#FBFinishStorePositionColor_Even"/>
	  </action>
	  <action>
            <set_node_attribute_value displayed="true" operator="=" />
            <target type="single_node" value="#FinalQuad_Even"/>
	  </action>
	</ifAction>

	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++ SPECTRUM ++++++++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<action>
          <set_material_attribute_value operator="=">
            <shader_source cg_fs_4fv_local_color="(
({$root:local_color[1]}+(({$root:color_spectrum_coef}*{$root:color_spectrum[1]}))),
({$root:local_color[2]}+(({$root:color_spectrum_coef}*{$root:color_spectrum[2]}))),
({$root:local_color[3]}+(({$root:color_spectrum_coef}*{$root:color_spectrum[3]})))
({$root:local_color[4]}))" 
	       cg_fs_4fv_local_displact_decay="(
({$root:local_displact_decay[1]}+({$root:local_displact_vol_coef}*{$root:local_displact_vol})),
({$root:local_displact_decay[2]}+({$root:local_displact_vol_coef}*{$root:local_displact_vol})),
({$root:local_displact_decay[3]}+({$root:local_displact_vol_coef}*{$root:local_displact_vol})),
({$root:decay}))" 
	     cg_fs_4fv_radius_brushID_drawingMode_depth
	     ="(
({$root:local_radius}+({$root:local_radius_vol_coef}*{$root:local_radius_vol})),
({$root:brushID}),({$root:drawingMode}),
{#canonical_depth})" />
          </set_material_attribute_value>
          <target type="multiple_nodes" value="#QuadStorePositionColor_*" />
	</action>
	<action>
          <set_material_attribute_value operator="=">
            <shader_source  
	       cg_vp_3fv_noise_global_radius_frameno="(
(({$root:noise_vol})*({$root:noise_vol_coef})),
(({$root:global_radius_vol})*({$root:global_radius_vol_coef})),
({$config:current_frame}))" />
          </set_material_attribute_value>
          <target type="multiple_nodes" value="#FinalQuad_*" />
	</action>
	<!-- action>
	  <write_console value="local displacement ({@QuadStorePositionColor_Even:cg_fs_4fv_local_displact_decay})" />
	</action -->
      
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- ++++++++++++++++ SCENE ANIMATION ++++++++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!--action>
	  <write_console value="scene_pre_Z INI ({$root:scene_pre_Z})" />
	</action -->
	<!-- action>
	  <write_console value="delta angle_Y ((1*({$root:linear_speed}))/(({$root:scene_pre_Z})-{#canonical_depth}))" />
	</action -->
	<action>
          <set_node_scalar_value id="angle_Y" value="(({$root:on_off_linear_speed})*(20*({$root:linear_speed}))/(({$root:scene_pre_Z})-{#canonical_depth}))" operator="-=" />
          <target type="single_node" value="#root" />
	</action>
	<!-- action>
	  <write_console value="angle_Y ((1*({$root:linear_speed}))/(({$root:scene_pre_Z})-{#canonical_depth}))" />
	</action -->
	<!-- action>
	  <write_console value="angle_Y scene_pre_Z ({$root:angle_Y}) ({$root:scene_pre_Z})" />
	</action -->
	<action>
          <set_node_table_value id="sceneTransformationParameters" 
				value="({$root:angle_Y})"
				index="5"
				operator="="/>
          <target type="single_node" value="#root" />
	</action>
	<action>
          <set_node_scalar_value id="scene_pre_Z" value="((1.01*{#canonical_depth})-({$root:angle_Y}))" operator="=" />
          <target type="single_node" value="#root" />
	</action>
	<!-- action>
	  <write_console value="scene_pre_Z ({$root:scene_pre_Z})" />
	</action -->
	<action>
          <set_node_table_value id="sceneTransformationParameters" 
				value="({$root:scene_pre_Z})"
				index="7"
				operator="="/>
          <target type="single_node" value="#root" />
	</action>


	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- ++++++++++++++++ SCENE TRANSFORMATION +++++++++++++++++++ -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<action>
	  <set_node_table_value id="sceneTransformationMatrix" 
				value="(fromEuler({@root:sceneTransformationParameters}))" 
				operator="="/>
          <target type="single_node" value="#root" />
	</action>

      </command>
    </renderingScript>
    <quad id="NullQuad" x1="0" y1="0" z1="0" x2="0" y2="0" z2="0" x3="0" y3="0" z3="0" x4="0" y4="0" z4="0"></quad>
  </node>


  <!--========================================================-->
  <!-- DRAWING                                             -->
  <!--========================================================-->
  <!-- FOREGROUND + COMPOSITION -->
  <node id="foreground_transl" displayed="true">
    <transformation id="foreground_transl" geometry="translation" 
		    x="0" y="0" z="0"/>
    <node id="foreground rotate" displayed="true">
      <transformation id="foreground rotate" geometry="rotation" 
			x="0.0" y="0.0" z="1.0" angle="0.0"/>
      <use xlink:href="CityWalk/XML/LYM_CW.xml:#drawing_node" />
    </node>
  </node>
 
  <!-- node id="pixel_readerR">
    <pixel_reader id="pixel_reader" x="100" y="100" />
  </node -->
	
</node>
