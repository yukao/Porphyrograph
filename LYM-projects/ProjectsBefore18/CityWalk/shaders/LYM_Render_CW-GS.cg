/***********************************************************************
File: CityWalk/shaders/LYM_Render_CW-GS.cg

LYM Drawing Machine (c) Yukao Nagemi & Lola Ajima
*************************************************************************/

//------------------------------------------------------------------------------

// drawing modes
#define VOID_DRAWING   0
#define LINE_DRAWING   1
#define BEZIER_DRAWING 2
#define DOT_DRAWING 3
#define RADIAL_DRAWING 4

float Bezier( float x1 , float y1 , float x2 , float y2 , 
	      float mouse_x , float mouse_y , float interp_mouse_x ) {
  return mouse_y + (y1 - mouse_y)/(x1 - mouse_x) * (interp_mouse_x - mouse_x);
}


float Line( float x1 , float y1 , 
	    float mouse_x , float mouse_y , float interp_mouse_x ) {
  return mouse_y + (y1 - mouse_y)/(x1 - mouse_x) * (interp_mouse_x - mouse_x);
}

LINE void main(
	       uniform float window_number,         // No de fenetres
	       
	       // uniform float       cg_gs_subdivision_level,
	       
	       // OPENGL MATRIX ---
	       uniform float4x4 modelViewProj : state.matrix.mvp,
	       
	       // E/S
	       AttribArray<float4> color                            : COLOR0,
	       AttribArray<float4> pos                              : POSITION,
	       AttribArray<float2> dc                               : TEXCOORD0,   
	       AttribArray<float3> tangent                          : TEXCOORD1,
	       AttribArray<float3> normal                           : TEXCOORD2,
	       AttribArray<float4> radius_Brush_drawingMode_depth   : TEXCOORD3
	       )
{
  // emission face originale
  float4 p1 = pos[0].xyzw ;
  float4 p2 = pos[1].xyzw ;

  if( p1.w < 0 && p2.w < 0 ) {
    // EndPrimitive();
  }
  else {
    float4 binormal1 
      = normalize(float4( cross( tangent[0] , normal[0] ), 0));
    float4 binormal2 
      = normalize(float4( cross( tangent[1] , normal[1] ), 0));
    /* binormal1 = normalize( */
    /* 	float4( cross( (tangent[0].xyz),float3(0,0,1)), 0)); */
    /* binormal2 = normalize( */
    /* 	float4( cross( (tangent[1].xyz),float3(0,0,1)), 0)); */
    /* binormal1 = float4(0,5,5,0); */
    /* binormal2 = float4(0,5,5,0); */

    /* float4 c1 = color[0] ; */
    /* float4 c2 = color[1] ; */

    /* float2 dc1 = dc[0] ; */
    /* float2 dc2 = dc[1] ; */

    float drawingMode1 = radius_Brush_drawingMode_depth[0].z;
    float drawingMode2 = radius_Brush_drawingMode_depth[1].z;

    if( drawingMode1 == VOID_DRAWING ) {
      binormal1 *= 0;
    }
    else {
      binormal1 *= radius_Brush_drawingMode_depth[0].x;
    }
    if( drawingMode2 == VOID_DRAWING ) {
      binormal2 *= 0;
    }
    else {
      binormal2 *= radius_Brush_drawingMode_depth[1].x;
    }
    /* float halfwidth = 3;  */
    /* binormal1 *= halfwidth; */
    /* binormal2 *= halfwidth; */

    // calcul de la cur_position en coordonnees homogenes
    // (dans le cube canonique: l'espace de clipping) pour le rasteriseur
    float4 HPosition1 = mul(modelViewProj, p1 - binormal1) ;
    float4 HPosition2 = mul(modelViewProj, p1 + binormal1) ;
    float4 HPosition3 = mul(modelViewProj, p2 - binormal2) ;
    float4 HPosition4 = mul(modelViewProj, p2 + binormal2) ;
    /* HPosition1.z *= -1; */
    /* HPosition2.z *= -1; */
    /* HPosition3.z *= -1; */
    /* HPosition4.z *= -1; */

    if( drawingMode1 == VOID_DRAWING ) {
      EndPrimitive();
    }
    else {
      emitVertex( HPosition1 : POSITION, color[0] : COLOR, 
		  float2(0.0,0.0) : TEXCOORD0 , 
		  radius_Brush_drawingMode_depth[0].yw : TEXCOORD1 );
      emitVertex( HPosition2 : POSITION, color[0] : COLOR, 
		  float2(0.0,1.0) : TEXCOORD0 , 
		  radius_Brush_drawingMode_depth[0].yw : TEXCOORD1 );
    }
    if( drawingMode1 == DOT_DRAWING ) {
      float4 HPosition5 = mul(modelViewProj, 0.75*p1+0.25*p2 - binormal1 ) ;
      float4 HPosition6 = mul(modelViewProj, 0.75*p1+0.25*p2 + binormal1 ) ;
      float4 HPosition7 = mul(modelViewProj, 0.25*p1+0.75*p2 - binormal2 ) ;
      float4 HPosition8 = mul(modelViewProj, 0.25*p1+0.75*p2 + binormal2 ) ;
      emitVertex( HPosition5 : POSITION, color[0] : COLOR, 
		  float2(0.0,0.0) : TEXCOORD0 , 
		  radius_Brush_drawingMode_depth[0].yw : TEXCOORD1 );
      emitVertex( HPosition6 : POSITION, color[0] : COLOR, 
		  float2(0.0,0.0) : TEXCOORD0 , 
		  radius_Brush_drawingMode_depth[0].yw : TEXCOORD1 );
      EndPrimitive();
      emitVertex( HPosition7 : POSITION, color[0] : COLOR, 
		  float2(0.0,1.0) : TEXCOORD0 , 
		  radius_Brush_drawingMode_depth[0].yw : TEXCOORD1 );
      emitVertex( HPosition8 : POSITION, color[0] : COLOR, 
		  float2(0.0,1.0) : TEXCOORD0 , 
		  radius_Brush_drawingMode_depth[0].yw : TEXCOORD1 );
    }
    else if( drawingMode1 == RADIAL_DRAWING ) {
      float4 HPosition5 = mul(modelViewProj, float4(0,0,0,1) );
      emitVertex( HPosition5 : POSITION, color[0] : COLOR, 
		  float2(0.0,0.0) : TEXCOORD0 , 
		  radius_Brush_drawingMode_depth[0].yw : TEXCOORD1 );
      emitVertex( HPosition5 : POSITION, color[0] : COLOR, 
		  float2(0.0,0.0) : TEXCOORD0 , 
		  radius_Brush_drawingMode_depth[0].yw : TEXCOORD1 );
    }
    if( drawingMode2 == VOID_DRAWING ) {
      EndPrimitive();
    }
    else {
      emitVertex( HPosition3 : POSITION, color[1] : COLOR, 
		  float2(1.0,0.0) : TEXCOORD0 , 
		  radius_Brush_drawingMode_depth[1].yw : TEXCOORD1 );
      emitVertex( HPosition4 : POSITION, color[1] : COLOR, 
		  float2(1.0,1.0) : TEXCOORD0 , 
		  radius_Brush_drawingMode_depth[1].yw : TEXCOORD1 );
    }
  }
}
