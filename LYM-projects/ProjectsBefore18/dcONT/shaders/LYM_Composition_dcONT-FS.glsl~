/***********************************************************************
File: dcONT/shaders/LYM_Composition_dcONT-FS.cg

LYM dcONT & Drawing Machine (c) Yukao Nagemi & Lola Ajima

*************************************************************************/

#version 420

#define graylevel(col) ((col.r+col.g+col.b)/3.0)
#define maxCol(col) (max(col.r,max(col.g,col.b)))
#define minCol(col) (min(col.r,min(col.g,col.b)))
#define nbTools 11
#define toolHeight (nbTools * 20)

// Main shader.

// obtained from Vertex Program
in vec2 decalCoords;  // coord text

/////////////////////////////////////
// COLOR OUTPUT
out vec4 outColor0;

uniform vec3 glsl_fs_3fv_width_height_trace;
uniform vec4 glsl_fs_4fv_xy_frameno_cursorSize;
uniform vec3 glsl_fs_3fv_dcONTWeight_drawingWeight_timer;
uniform vec4 glsl_fs_4fv_blendTransp_decaySigns_particleTexture_drawContmode;
uniform vec4 glsl_fs_4fv_drawing_brush_dcONT_particle;
uniform vec4 glsl_fs_4fv_local_color;
uniform vec4 glsl_fs_4fv_RGBspectrum_setup_scale_pixellization;

/////////////////////////////////////
// COLOR INPUT
// the RED canal contains 1 if it is written
// the GREEN canal of OutGrayLevel contains the current gray level
// the BLUE canal contains a boolean that is set to 2 when a 
//     a region is filled
uniform samplerRect  fs_decal; // ping-pong mouse localColor/gray GOL
// pos FBO

/////////////////////////////////////
//  TOOLS 
uniform samplerRect  fs_lookupTable1;     // tools

/////////////////////////////////////
// FONT
uniform samplerRect fs_lookupTable_font;
uniform samplerRect fs_lookupTable_message;
uniform float glsl_fs_message_transparency;

void main() {
  float width = glsl_fs_3fv_width_height_trace.x;
  float height = glsl_fs_3fv_width_height_trace.y;
  float trace = glsl_fs_3fv_width_height_trace.z;

  // FX scaling
  vec2 center = vec2(width, height) / 2.0;
  vec2 scaled_decalCoords 
    = (decalCoords - center) * glsl_fs_4fv_RGBspectrum_setup_scale_pixellization.z + center;
	     scaled_decalCoords;
  scaled_decalCoords = floor( scaled_decalCoords );

  // FX pixellization
  float pixellization = glsl_fs_4fv_RGBspectrum_setup_scale_pixellization.w;
  if( pixellization > 0.2 ) {
    int nbPixels = int(pixellization); 
    scaled_decalCoords = float(nbPixels) * vec2(ivec2(scaled_decalCoords) / nbPixels);
  }

  vec4 localColor_graydcONT
    = texture(fs_decal, scaled_decalCoords);
  float graydcONT = localColor_graydcONT.a;
  if( graydcONT < 0 ) {
    graydcONT = 0;
  }

  ////////////////////////////////////////////////////////////////////
  // drawing / dcONT interpolated combination: should be parameterized
  // drawing and dcONT combination
  // should be reworked
  vec3 combined_color 
    = clamp( glsl_fs_3fv_dcONTWeight_drawingWeight_timer.y 
	     * localColor_graydcONT.rgb 
	     +  glsl_fs_3fv_dcONTWeight_drawingWeight_timer.x 
	     * vec3(graydcONT,graydcONT,graydcONT) , 0.0 , 1.0 );
  
  // blinking cursor 1 pixel wide under the mouse
  float mouse_x = glsl_fs_4fv_xy_frameno_cursorSize.x;
  float mouse_y = glsl_fs_4fv_xy_frameno_cursorSize.y;
  float frameno = glsl_fs_4fv_xy_frameno_cursorSize.z;
  float cursorSize = (glsl_fs_4fv_xy_frameno_cursorSize.w + 0.5) * 2;
  if( abs(decalCoords.x - mouse_x) < cursorSize 
      && abs(height - decalCoords.y - mouse_y) < cursorSize ) {
    outColor0 = vec4(abs(sin(frameno/10.0)),abs(sin(frameno/10.0)),abs(sin(frameno/10.0)),1);
    return;
  }

  // blend with a saved background in case of clearing up
  vec4 returnC; // return color
  returnC = vec4( combined_color * glsl_fs_4fv_blendTransp_decaySigns_particleTexture_drawContmode.r , 1 );

  ////////////////////////////////////
  // VERTICAL TOOL BAR
  float barYmin = 4.0 * (height - toolHeight);
  if( decalCoords.x < 20.0 && decalCoords.y > (height - toolHeight) ) {
    // dcONT
    if( decalCoords.y > (height - 20.0) ) {
      returnC = 
	texture(fs_lookupTable1, 
       vec2(decalCoords.x*4.0+(80.0*glsl_fs_4fv_drawing_brush_dcONT_particle.z),
	      (decalCoords.y*4.0-barYmin)));
    }
    // particles
    else if( decalCoords.y > (height - 40.0) ) {
      returnC =
        texture(fs_lookupTable1,
       vec2(decalCoords.x*4.0+(80.0*glsl_fs_4fv_drawing_brush_dcONT_particle.w),
	      (decalCoords.y*4.0-barYmin)));
    }
    // drawCont mode
    else if( decalCoords.y > (height - 60.0) ) {
      returnC = 
	texture(fs_lookupTable1, 
       vec2(decalCoords.x*4.0+(80.0*glsl_fs_4fv_blendTransp_decaySigns_particleTexture_drawContmode.w),
	      (decalCoords.y*4.0-barYmin)));
    }
    // Set-up ID
    else if( decalCoords.y > (height - 80.0) ) {
      returnC = 
	texture(fs_lookupTable1, 
		vec2(decalCoords.x*4.0+(80.0*(glsl_fs_4fv_RGBspectrum_setup_scale_pixellization.y)),
	      (decalCoords.y*4.0-barYmin)));
    }
    // drawing mode
    else if( decalCoords.y > (height - 100.0) ) {
      returnC = 
	texture(fs_lookupTable1, 
       vec2(decalCoords.x*4.0+(80.0*glsl_fs_4fv_drawing_brush_dcONT_particle.x),
	      (decalCoords.y*4.0-barYmin)));
    }
    // brush
    else if( decalCoords.y > (height - 120.0) ) {
      returnC = 
	texture(fs_lookupTable1, 
       vec2(decalCoords.x*4.0+(80.0*glsl_fs_4fv_drawing_brush_dcONT_particle.y),
	      (decalCoords.y*4.0-barYmin)));
    }
    // decay signs
    else if( decalCoords.y > (height - 140.0) ) {
      returnC = 
	texture(fs_lookupTable1, 
       vec2(decalCoords.x*4.0+(80.0*glsl_fs_4fv_blendTransp_decaySigns_particleTexture_drawContmode.y),
	      (decalCoords.y*4.0-barYmin)));
    }
    // particle textures
    else if( decalCoords.y > (height - 160.0) ) {
      returnC = 
	texture(fs_lookupTable1, 
       vec2(decalCoords.x*4.0+(80.0*glsl_fs_4fv_blendTransp_decaySigns_particleTexture_drawContmode.z),
	      (decalCoords.y*4.0-barYmin)));
    }
    // color spectrum mapping
    else if( decalCoords.y > (height - 180.0) ) {
      returnC = 
	texture(fs_lookupTable1, 
       vec2(decalCoords.x*4.0+(80.0*glsl_fs_4fv_RGBspectrum_setup_scale_pixellization.x),
	      (decalCoords.y*4.0-barYmin)));
    }
    // reports the local color
    else if( decalCoords.y > (height - 200.0) ) {
      returnC = 
       	texture(fs_lookupTable1,
       vec2(decalCoords.x*4.0,(decalCoords.y*4.0-barYmin))).a
       	* glsl_fs_4fv_local_color;
    }
    // timer
    else {
      returnC = 
	texture(fs_lookupTable1, 
       vec2(decalCoords.x*4.0+(80.0*glsl_fs_3fv_dcONTWeight_drawingWeight_timer.z),
	      (decalCoords.y*4.0-barYmin)));
    }
    returnC.rgb *= returnC.a;
    returnC.a = 1;
    // returnC = lerp(returnC, returnC, 1.0 - returnC.a);
  }
  else if( decalCoords.x < 128.0 && (decalCoords.y > (height - toolHeight - 14 ) )
	   && (decalCoords.y < (height - toolHeight) ) ) {
    vec2 locDecalCoord = vec2(decalCoords.x ,  height - toolHeight - decalCoords.y);
    vec4 offset = texture(fs_lookupTable_message, vec2(locDecalCoord.x,0) ) * 255.0;
    vec3 fontC = vec3(0,0,0);
    if( locDecalCoord.y > offset.w && locDecalCoord.y < offset.w + offset.z ) {
      fontC = texture(fs_lookupTable_font, vec2(offset.x, locDecalCoord.y - offset.w + offset.y)).rgb;
      // returnC.rgb *= returnC.a;
    }
    //    returnC.rgb = mix( returnC.rgb , fontC , fontC.r );
    if( offset.w > 0 ) { // non nul height
      returnC.rgb = mix( returnC.rgb , fontC , glsl_fs_message_transparency );
    }
    else {
      // keep returnC previously computed
    }
    // returnC = lerp(returnC, returnC, 1.0 - returnC.a);
  }
  /* if( glsl_fs_4fv_blendTransp_screenDisplay_param2_param3.y > 0  */
  /*     && decalCoords.x <= 106 && decalCoords.y <= (height - 123.5)  */
  /*     && decalCoords.y >= (height - 226.5) ) { */
  /*   /\* returnC = *\/ */
  /*   /\*   texture(fs_lookupTable1, *\/ */
  /*   /\* 	      vec2(decalCoords.x*4.0, *\/ */
  /*   /\* 		     (decalCoords.y*4.0-barYmin))).a *\/ */
  /*   /\*   *vec4(1,1,1,1); *\/ */
  /*   if( decalCoords.x >= 5 && decalCoords.x < 105  */
  /* 	&& decalCoords.y < (height - 125)  */
  /* 	&& decalCoords.y >= (height - 225) ) { */
  /*     if( glsl_fs_4fv_blendTransp_screenDisplay_param2_param3.y > 1 ) { */
  /* 	returnC = */
  /* 	  texture(fs_decal,  */
  /* 		  vec2( (decalCoords.x - 5)*width/100.0 , */
  /* 			  (decalCoords.y - height + 225)*height/100.0 ) ); */
  /* 	returnC.a = 1.0; */
  /*     }	     */
  /*     else { */
  /* 	float gray = */
  /* 	  texture(fs_decal,  */
  /* 		  vec2( (decalCoords.x - 5)*width/100.0 , */
  /* 			  (decalCoords.y - height + 225)*height/100.0 ) ).a; */
  /* 	returnC = vec4( gray , gray , gray , 1.0 ); */
  /*     } */
  /*   } */
  /* } */
  // returnC.a *= glsl_fs_4fv_blendTransp_screenDisplay_param2_param3.r;
  outColor0 = returnC;
}
