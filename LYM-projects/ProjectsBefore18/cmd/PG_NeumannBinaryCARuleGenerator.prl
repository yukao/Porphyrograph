#!/usr/bin/perl

# ods to conf

# PG_generalBinaryRuleGenerator.prl
# Sept 2014
# (c) Lola and Yukao Meet

# input: rule encoding format from psoup.math.wisc.edu/mcell/rullex_gebi.html
# output: format c++ output state table Porphyrograph

use strict;
use warnings;
use 5.010;

# Fredkin2 rule has the following definition: 2,01101001100101101001011001101001
# The first digit, '2', tells the rule has 2 states (it's a 1 bit rule).
# The second digit, '0', tells a cell in a configuration ME=0,N=0,E=0,S=0,W=0 will get the state 0.
# The third digit, '1', tells a cell in a configuration ME=0,N=0,E=0,S=0,W=1 will get the state 1.
# The fourth digit, '1', tells a cell in a configuration ME=0,N=0,E=0,S=1,W=0 will get the state 1.
# The fifth digit, '0', tells a cell in a configuration ME=0,N=0,E=0,S=1,W=1 will get the state 0.
# . . .


# const vec2 neighborOffsets[8] = {{1,0},{-1,0},{0,1},{0,-1},      # E W N S
#                                  {1,1},{-1,-1},{1,-1},{-1,1},};  # NE SW SE NW
my @format = (
	"Crystal2,2,01101101101101101111101011001000",
	"Fredkin2,2,01101001100101101001011001101001",
	"Aggregation,3,002000202000000000202000202000000000000000000000000000202000202000000000202000202001001111001001111111111111001001111001001111111111111111111111111111111111111111212021222020201010222221222012012010122011211000111111202122212121111111202111211",
	"Birds,3,010112020112112222020222020112112222112102220222220202020222020222220202020202020112102222102000200222200202102000200000012020200020000222200202200020000202000200020220000220222020000020000220222020222222222020222020000020000020222020000020000",
	"Colony,3,010102020102011210020210000102011210011102120210120000020210000210120000000000000112111212111110100212100200111110100110102021100021012212100200100021012200012020020222020222222222020222020222222222222222222222222222020222020222222222020222020",
	"Crystal3a,3,012101220100010100210200002102010000010121010100011002210000002200010012002002221111101111101000100111100100101000100000020000100000001111100100100000001100001011222222220222200200222200000222200200200022020200020000220200200200020000000000000",
	"Crystal3b,3,012100200100011002200012020100020021021221021012020122200021010002212102020112021111111111111100100111100100111100100100010001100001011111100100100001011100011011222222222222200200222200200222200200200022022200020020222200200200022000200020000",
	"Galaxy,3,010112020112112220020220000112112220112110200220200000020220000220200000000000000002002222002000200222200200002000200000000002200002020222200200200002020200020002020220000220220000000000000220220000220220000000000000000000000000000000000000000",
	"Greenberg,3,010110000110110000000000000110110000110110000000000000000000000000000000000000000222222222222222222222222222222222222222222222222222222222222222222222222222222222000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	"Honeycomb,3,010102020102002222020222020102002222002002220222220202020222020222220202020202020110112020112100202020202020112100202100002020202020200020202020202020200020200000020222020222222222020222020222222222222220202222202222020222020222202222020222020",
	"Knitting,3,010112020112110202020202020112110202110110002202002221020202020202002221020221010102010202010102021202021211010102021102000200021200102202021211021200102211102120020222020222222222020222020222222222222222222222222222020222020222222222020222020",
	"Lake,3,010112020112100202020202020112100202100010002202002220020202020202002220020220000012110202110100000202000200110100000100002022000022020202000200000022020200020000020222020222222222020222020222222222222222222222222222020222020222222222020222020",
	"Plankton,3,010112020112112222020222020112112222112102220222220202020222020222220202020202020100002020002010202020202020002010202010102020202020200020202020202020200020200000020220000220222020000020000220222020222222222020222020000020000020222020000020000",
	"Pond,3,010112020112112222020222020112112222112102220222220202020222020222220202020202020110102020102010202020202020102010202010112020202020200020202020202020200020200000020220000220222020000020000220222020222222222020222020000020000020222020000020000",
	"Strata,3,000000200120200000000000000000000200020100000000000000000000100000000000000000000110000000110000010000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000",
	"Tanks,3,010112020112112222020222020112112222112102220222220202020222020222220202020202020110102020102010202020202020102010202010102020202020202020202020202020202020202020020222020222220200020200000222220200220222020200020000020200000200020000000000000",
	"Typhoon,3,010112020112112220020220000112112220112110200220200000020220000220200000000000000002002222002000200222200200002000200000000002200002020222200200200002020200020002020222020222222222020222020222222222222222222222222222020222020222222222020222020",
	"Wave,3,010112020112110202020202020112110202110102020202020202020202020202020202020202020112102222102000200222200202102000200000002020200020000222200202200020000202000200020220000220222020000020000220222020222222222020222020000020000020222020000020000",
	);


if( @ARGV != 1) {
    print "Usage: PG_NeumannBinaryRuleGenerator.prl pg_data.cpp \n";
    exit 0;
}

my $NAMEOutputfile = $ARGV[0];
open( OUTPUT_FILE , ">$NAMEOutputfile" ) 
	    || die "File $NAMEOutputfile not opened!";
printf "Generating data file $NAMEOutputfile\n";

print OUTPUT_FILE "    // SubType 0: neutral
    ptr[  0 ] = 3;
    for( int ind = 1 ; ind < std::min( width , 243+1 ) ; ind++ ) {
     ptr[  ind * 4 ] = 0;
    }
    ptr += 4 * width;

";

for( my $indAutom = 0 ; $indAutom <  @format + 0 ;  $indAutom++ ) {
	my ($automaton_name,$nb_states,$state_machine) = split /,/ , $format[ $indAutom ];
	print "$automaton_name -> nbStates $nb_states\n";
	my @stateMachineArray = split // , $state_machine;
	my $length = ($nb_states + 0) ** 5;
	if(  $length !=  @stateMachineArray + 0 ) {
		printf "theoretical length %d\n" , $length;
		printf "actual length %d\n" , @stateMachineArray + 0;
	}

	# transformation of 2-state automaton into 3-state
	# only states (0|1) + (0|1) * 3 + (0|1) * 9 + (0|1) * 27 + (0|1) * 81
	# are reached
	# the string should be converted from binary to ternary values 
	if($nb_states + 0 == 2) {
		my @OldstateMachineArray = @stateMachineArray;
		for( my $ind = 0 ; $ind < 243 ; $ind++ ) {
			 $stateMachineArray[ $ind ] = 0;
		}
		for( my $ind = 0 ; $ind < 32 ; $ind++ ) {
 			my $ternaryInd 
 				= $ind % 2 + ($ind / 2 % 2) * 3 + ($ind / 4 % 2) * 9 
 				  + ($ind / 8 % 2) * 27 + ($ind / 16 % 2) * 81;
			$stateMachineArray[ $ternaryInd ] =  $OldstateMachineArray[ $ind ];	
			# print "bin $ind ternary $ternaryInd\n";		
		}
	}
	$nb_states = 3;
	$length = 243;

	printf( OUTPUT_FILE "    // Subtype %d: %s
    GLubyte transition_table%s[%d] = {
" ,  $indAutom+1 , $automaton_name , $automaton_name ,  $length );

	print OUTPUT_FILE join( ',' , @stateMachineArray );
	
	printf( OUTPUT_FILE "\n    };
    ptr[  0 ] = %d;
    for( int ind = 1 ; ind < std::min( width , %d+1 ) ; ind++ ) {
     ptr[  ind * 4 ] = transition_table%s[ind-1];
    }
    ptr += 4 * width;\n\n" ,  $nb_states , $length , $automaton_name );
}
