bool  double_window       ;
bool  wide_screen         ;
int   window_width        ;
int   window_height       ;
int   window_x            ;
int   window_y            ;
float minimal_interframe_latency;
float time_scale          ;
float initial_time        ;
float input_volume        ;
int   camID               ;
float videoThreshold      ;
int   message_pixel_length;
bool  trace_output_frame_number;
bool  trace_time          ;
int   first_frame_number  ;
int   last_frame_number   ;
int   max_mouse_recording_frames;
int   max_network_message_length;
VarTypes ConfigurationVarTypes[_MaxConfigurationVarIDs] = { 
    _pg_bool,
    _pg_bool,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_int,
    _pg_float,
    _pg_int,
    _pg_bool,
    _pg_bool,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
};
void * ConfigurationVarPointers[_MaxConfigurationVarIDs] = { 
   (void *)&double_window,
   (void *)&wide_screen,
   (void *)&window_width,
   (void *)&window_height,
   (void *)&window_x,
   (void *)&window_y,
   (void *)&minimal_interframe_latency,
   (void *)&time_scale,
   (void *)&initial_time,
   (void *)&input_volume,
   (void *)&camID,
   (void *)&videoThreshold,
   (void *)&message_pixel_length,
   (void *)&trace_output_frame_number,
   (void *)&trace_time,
   (void *)&first_frame_number,
   (void *)&last_frame_number,
   (void *)&max_mouse_recording_frames,
   (void *)&max_network_message_length,
};
int   currentDrawingStroke;
int   brushID             ;
float brushRadius         ;
float RGBpalette          ;
float local_color_r       ;
float local_color_g       ;
float local_color_b       ;
float local_color_a       ;
float blendTransp         ;
int   particleMode        ;
float part_acc_factor     ;
float particle_texture_ID ;
float partAccCenter_0     ;
float partAccCenter_1     ;
float radiusParticle      ;
float repopulatingBG      ;
float repopulatingCA      ;
int   CAType              ;
int   CASubType           ;
bool  clearCA             ;
bool  clearLayer          ;
bool  clearAllLayers      ;
bool  copyTrack12         ;
bool  invertAllLayers     ;
int   cursorSize          ;
float echo                ;
float echoNeg             ;
float xy_spectrum_coef    ;
float RGBpalette_val_coef ;
float brush_radius_vol_coef;
float part_acc_attack_coef;
float RGBpalette_hue_coef ;
float xy_spectrum_replay_coef;
float RGBpalette_replay_coef;
float brush_radius_vol_replay_coef;
int   flashTrack0_freq_1  ;
int   flashTrack0_freq_2  ;
int   flashCA_freq_0      ;
int   flashCA_freq_1      ;
int   flashCA_freq_2      ;
int   flashBack_freq      ;
int   flashPart_freq      ;
int   flashPart_duration  ;
float brush_radius_pressure_coef;
float brush_radius_angleHor_coef;
float brush_radius_angleVer_coef;
bool  tracksSync          ;
int   currentDrawingTrack ;
int   currentVideoTrack   ;
float trackdecay_sign_0   ;
float trackdecay_sign_1   ;
float trackdecay_sign_2   ;
float trackdecay_0        ;
float trackdecay_1        ;
float trackdecay_2        ;
float CACompositionWeight ;
float trackCompositionWeight_0;
float trackCompositionWeight_1;
float trackCompositionWeight_2;
float CAFinalWeight       ;
float trackFinalWeight_0  ;
float trackFinalWeight_1  ;
float trackFinalWeight_2  ;
float FBCaptureWeight     ;
bool  track_replay_0      ;
bool  track_replay_1      ;
bool  track_replay_2      ;
bool  source_track_record_0;
bool  source_track_record_1;
bool  source_track_record_2;
bool  target_track_record_0;
bool  target_track_record_1;
bool  target_track_record_2;
bool  auto_beat           ;
float beat_duration       ;
float sample_setUp        ;
int   sensor_activation   ;
int   sensor_layout       ;
float CAdecay_sign        ;
float CAdecay             ;
float CAParams1           ;
float CAParams2           ;
float CAParams3           ;
float CAParams4           ;
float CAParams5           ;
float CAParams6           ;
float CAParams7           ;
float CAParams8           ;
bool  is_videoOn          ;
int   BGSubtr             ;
int   CAstep              ;
bool  interfaceMode       ;
bool  CAcolorSpread       ;
VarTypes ScenarioVarTypes[_MaxInterpVarIDs] = { 
    _pg_int ,
    _pg_int ,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_int,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_int,
    _pg_int,
    _pg_bool,
    _pg_bool,
    _pg_bool,
    _pg_bool,
    _pg_bool,
    _pg_int,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_bool,
    _pg_int,
    _pg_int,
    _pg_sign,
    _pg_sign,
    _pg_sign,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_bool,
    _pg_float,
    _pg_float,
    _pg_int ,
    _pg_int ,
    _pg_sign,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_bool,
    _pg_int,
    _pg_int,
    _pg_bool,
    _pg_bool,
};
void * ScenarioVarPointers[_MaxInterpVarIDs] = { 
   (void *)&currentDrawingStroke,
   (void *)&brushID,
   (void *)&brushRadius,
   (void *)&RGBpalette,
   (void *)&local_color_r,
   (void *)&local_color_g,
   (void *)&local_color_b,
   (void *)&local_color_a,
   (void *)&blendTransp,
   (void *)&particleMode,
   (void *)&part_acc_factor,
   (void *)&particle_texture_ID,
   (void *)&partAccCenter_0,
   (void *)&partAccCenter_1,
   (void *)&radiusParticle,
   (void *)&repopulatingBG,
   (void *)&repopulatingCA,
   (void *)&CAType,
   (void *)&CASubType,
   (void *)&clearCA,
   (void *)&clearLayer,
   (void *)&clearAllLayers,
   (void *)&copyTrack12,
   (void *)&invertAllLayers,
   (void *)&cursorSize,
   (void *)&echo,
   (void *)&echoNeg,
   (void *)&xy_spectrum_coef,
   (void *)&RGBpalette_val_coef,
   (void *)&brush_radius_vol_coef,
   (void *)&part_acc_attack_coef,
   (void *)&RGBpalette_hue_coef,
   (void *)&xy_spectrum_replay_coef,
   (void *)&RGBpalette_replay_coef,
   (void *)&brush_radius_vol_replay_coef,
   (void *)&flashTrack0_freq_1,
   (void *)&flashTrack0_freq_2,
   (void *)&flashCA_freq_0,
   (void *)&flashCA_freq_1,
   (void *)&flashCA_freq_2,
   (void *)&flashBack_freq,
   (void *)&flashPart_freq,
   (void *)&flashPart_duration,
   (void *)&brush_radius_pressure_coef,
   (void *)&brush_radius_angleHor_coef,
   (void *)&brush_radius_angleVer_coef,
   (void *)&tracksSync,
   (void *)&currentDrawingTrack,
   (void *)&currentVideoTrack,
   (void *)&trackdecay_sign_0,
   (void *)&trackdecay_sign_1,
   (void *)&trackdecay_sign_2,
   (void *)&trackdecay_0,
   (void *)&trackdecay_1,
   (void *)&trackdecay_2,
   (void *)&CACompositionWeight,
   (void *)&trackCompositionWeight_0,
   (void *)&trackCompositionWeight_1,
   (void *)&trackCompositionWeight_2,
   (void *)&CAFinalWeight,
   (void *)&trackFinalWeight_0,
   (void *)&trackFinalWeight_1,
   (void *)&trackFinalWeight_2,
   (void *)&FBCaptureWeight,
   (void *)&track_replay_0,
   (void *)&track_replay_1,
   (void *)&track_replay_2,
   (void *)&source_track_record_0,
   (void *)&source_track_record_1,
   (void *)&source_track_record_2,
   (void *)&target_track_record_0,
   (void *)&target_track_record_1,
   (void *)&target_track_record_2,
   (void *)&auto_beat,
   (void *)&beat_duration,
   (void *)&sample_setUp,
   (void *)&sensor_activation,
   (void *)&sensor_layout,
   (void *)&CAdecay_sign,
   (void *)&CAdecay,
   (void *)&CAParams1,
   (void *)&CAParams2,
   (void *)&CAParams3,
   (void *)&CAParams4,
   (void *)&CAParams5,
   (void *)&CAParams6,
   (void *)&CAParams7,
   (void *)&CAParams8,
   (void *)&is_videoOn,
   (void *)&BGSubtr,
   (void *)&CAstep,
   (void *)&interfaceMode,
   (void *)&CAcolorSpread,
};
void currentDrawingStroke_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void partAccCenter_0_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void partAccCenter_1_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void clearCA_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void clearLayer_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void clearAllLayers_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void copyTrack12_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void track_replay_0_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void track_replay_1_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void track_replay_2_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void source_track_record_0_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void source_track_record_1_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void source_track_record_2_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void target_track_record_0_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void target_track_record_1_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void target_track_record_2_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void sample_setUp_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void sensor_activation_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void sensor_layout_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void is_videoOn_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void (*ScenarioVarCallbacks[_MaxInterpVarIDs])(pg_Parameter_Input_Type,float) = { 
   &currentDrawingStroke_callBack,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   &partAccCenter_0_callBack,
   &partAccCenter_1_callBack,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   &clearCA_callBack,
   &clearLayer_callBack,
   &clearAllLayers_callBack,
   &copyTrack12_callBack,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   &track_replay_0_callBack,
   &track_replay_1_callBack,
   &track_replay_2_callBack,
   &source_track_record_0_callBack,
   &source_track_record_1_callBack,
   &source_track_record_2_callBack,
   &target_track_record_0_callBack,
   &target_track_record_1_callBack,
   &target_track_record_2_callBack,
   NULL,
   NULL,
   &sample_setUp_callBack,
   &sensor_activation_callBack,
   &sensor_layout_callBack,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   &is_videoOn_callBack,
   NULL,
   NULL,
   NULL,
   NULL,
};
char *ScenarioVarMessages[_MaxInterpVarIDs] = { 
  (char *)"",
  (char *)"brushID_can",
  (char *)"brushRadius_can",
  (char *)"RGBpalette_can",
  (char *)"local_color_r_can",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"particleMode_can",
  (char *)"part_acc_factor_can",
  (char *)"particle_texture_ID_can",
  (char *)"",
  (char *)"",
  (char *)"radiusParticle_can",
  (char *)"repopulatingBG_can",
  (char *)"repopulatingCA_can",
  (char *)"CAType_can",
  (char *)"CASubType_can",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"invertAllLayers_can",
  (char *)"",
  (char *)"echo_can",
  (char *)"echoNeg_can",
  (char *)"xy_spectrum_coef_can",
  (char *)"RGBpalette_val_coef_can",
  (char *)"",
  (char *)"part_acc_attack_coef_can",
  (char *)"RGBpalette_hue_coef_can",
  (char *)"xy_spectrum_replay_coef_can",
  (char *)"",
  (char *)"",
  (char *)"flashTrack0_freq_can 1",
  (char *)"flashTrack0_freq_can 2",
  (char *)"flashCA_freq_can 0",
  (char *)"flashCA_freq_can 1",
  (char *)"flashCA_freq_can 2",
  (char *)"flashBack_freq_can",
  (char *)"flashPart_freq_can",
  (char *)"flashPart_duration_can",
  (char *)"brush_radius_pressure_coef_can",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"currentDrawingTrack_can",
  (char *)"currentVideoTrack_can",
  (char *)"trackdecay_sign_can 0",
  (char *)"trackdecay_sign_can 1",
  (char *)"trackdecay_sign_can 2",
  (char *)"trackdecay_can 0",
  (char *)"trackdecay_can 1",
  (char *)"trackdecay_can 2",
  (char *)"CACompositionWeight_can",
  (char *)"trackCompositionWeight_can 0",
  (char *)"trackCompositionWeight_can 1",
  (char *)"trackCompositionWeight_can 2",
  (char *)"CAFinalWeight_can",
  (char *)"trackFinalWeight_can 0",
  (char *)"trackFinalWeight_can 1",
  (char *)"trackFinalWeight_can 2",
  (char *)"FBCaptureWeight_can",
  (char *)"track_replay_can 0",
  (char *)"track_replay_can 1",
  (char *)"track_replay_can 2",
  (char *)"source_track_record_can 0",
  (char *)"source_track_record_can 1",
  (char *)"source_track_record_can 2",
  (char *)"target_track_record_can 0",
  (char *)"target_track_record_can 1",
  (char *)"target_track_record_can 2",
  (char *)"auto_beat_can",
  (char *)"beat_duration_can",
  (char *)"sample_setUp_can",
  (char *)"sensor_activation_can",
  (char *)"sensor_layout_can",
  (char *)"CAdecay_sign_can",
  (char *)"CAdecay_can",
  (char *)"CAParams1_can",
  (char *)"CAParams2_can",
  (char *)"CAParams3_can",
  (char *)"CAParams4_can",
  (char *)"CAParams5_can",
  (char *)"CAParams6_can",
  (char *)"CAParams7_can",
  (char *)"CAParams8_can",
  (char *)"is_videoOn_can",
  (char *)"BGSubtr_can",
  (char *)"CAstep_can",
  (char *)"interfaceMode_can",
  (char *)"CAcolorSpread_can",
};
char *CmdString[_MaxInterpVarIDs] = { 
  (char *)"currentDrawingStroke",
  (char *)"brushID",
  (char *)"brushRadius",
  (char *)"RGBpalette",
  (char *)"local_color_r",
  (char *)"local_color_g",
  (char *)"local_color_b",
  (char *)"local_color_a",
  (char *)"blendTransp",
  (char *)"particleMode",
  (char *)"part_acc_factor",
  (char *)"particle_texture_ID",
  (char *)"partAccCenter_0",
  (char *)"partAccCenter_1",
  (char *)"radiusParticle",
  (char *)"repopulatingBG",
  (char *)"repopulatingCA",
  (char *)"CAType",
  (char *)"CASubType",
  (char *)"clearCA",
  (char *)"clearLayer",
  (char *)"clearAllLayers",
  (char *)"copyTrack12",
  (char *)"invertAllLayers",
  (char *)"cursorSize",
  (char *)"echo",
  (char *)"echoNeg",
  (char *)"xy_spectrum_coef",
  (char *)"RGBpalette_val_coef",
  (char *)"brush_radius_vol_coef",
  (char *)"part_acc_attack_coef",
  (char *)"RGBpalette_hue_coef",
  (char *)"xy_spectrum_replay_coef",
  (char *)"RGBpalette_replay_coef",
  (char *)"brush_radius_vol_replay_coef",
  (char *)"flashTrack0_freq_1",
  (char *)"flashTrack0_freq_2",
  (char *)"flashCA_freq_0",
  (char *)"flashCA_freq_1",
  (char *)"flashCA_freq_2",
  (char *)"flashBack_freq",
  (char *)"flashPart_freq",
  (char *)"flashPart_duration",
  (char *)"brush_radius_pressure_coef",
  (char *)"brush_radius_angleHor_coef",
  (char *)"brush_radius_angleVer_coef",
  (char *)"tracksSync",
  (char *)"currentDrawingTrack",
  (char *)"currentVideoTrack",
  (char *)"trackdecay_sign_0",
  (char *)"trackdecay_sign_1",
  (char *)"trackdecay_sign_2",
  (char *)"trackdecay_0",
  (char *)"trackdecay_1",
  (char *)"trackdecay_2",
  (char *)"CACompositionWeight",
  (char *)"trackCompositionWeight_0",
  (char *)"trackCompositionWeight_1",
  (char *)"trackCompositionWeight_2",
  (char *)"CAFinalWeight",
  (char *)"trackFinalWeight_0",
  (char *)"trackFinalWeight_1",
  (char *)"trackFinalWeight_2",
  (char *)"FBCaptureWeight",
  (char *)"track_replay_0",
  (char *)"track_replay_1",
  (char *)"track_replay_2",
  (char *)"source_track_record_0",
  (char *)"source_track_record_1",
  (char *)"source_track_record_2",
  (char *)"target_track_record_0",
  (char *)"target_track_record_1",
  (char *)"target_track_record_2",
  (char *)"auto_beat",
  (char *)"beat_duration",
  (char *)"sample_setUp",
  (char *)"sensor_activation",
  (char *)"sensor_layout",
  (char *)"CAdecay_sign",
  (char *)"CAdecay",
  (char *)"CAParams1",
  (char *)"CAParams2",
  (char *)"CAParams3",
  (char *)"CAParams4",
  (char *)"CAParams5",
  (char *)"CAParams6",
  (char *)"CAParams7",
  (char *)"CAParams8",
  (char *)"is_videoOn",
  (char *)"BGSubtr",
  (char *)"CAstep",
  (char *)"interfaceMode",
  (char *)"CAcolorSpread",
};
char CmdCharMinus[_MaxInterpVarIDs+1] = "*&roBBB***a******Hh**c*I*?***k************p***:*****d***********123789*********i********x****";
char CmdCharPlus[_MaxInterpVarIDs+1] = "lmROzzz**PA$*****Gg******!***K************Q****00***D**************************I*************";
float StepMinus[_MaxInterpVarIDs] = { 
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -0.100000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  0.000000F,
  -1.000000F,
  -1.000000F,
  -0.100000F,
  -1.000000F,
  -0.100000F,
  -0.100000F,
  -0.100000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -1.000000F,
  -0.100000F,
  -0.100000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  0.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -0.001000F,
  -0.001000F,
  -0.001000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -0.100000F,
  -0.100000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -0.001000F,
  -0.100000F,
  -0.100000F,
  -0.100000F,
  -0.100000F,
  -0.100000F,
  -0.100000F,
  -0.100000F,
  -0.100000F,
  0.000000F,
  0.000000F,
  -1.000000F,
  0.000000F,
  0.000000F,
};
float StepPlus[_MaxInterpVarIDs] = { 
  1.000000F,
  1.000000F,
  1.000000F,
  0.100000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  0.100000F,
  1.000000F,
  0.100000F,
  0.100000F,
  0.100000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  1.000000F,
  0.100000F,
  0.100000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  0.001000F,
  0.001000F,
  0.001000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  0.100000F,
  0.100000F,
  1.000000F,
  1.000000F,
  1.000000F,
  0.001000F,
  0.100000F,
  0.100000F,
  0.100000F,
  0.100000F,
  0.100000F,
  0.100000F,
  0.100000F,
  0.100000F,
  1.000000F,
  1.000000F,
  1.000000F,
  0.000000F,
  0.000000F,
};
float MinValues[_MaxInterpVarIDs] = { 
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  -9999.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  0.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -1.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  1.000000F,
  0.000000F,
  0.000000F,
};
float MaxValues[_MaxInterpVarIDs] = { 
  2.000000F,
  7.000000F,
  9999.000000F,
  9999.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  9999.000000F,
  2.000000F,
  9999.000000F,
  7.000000F,
  9999.000000F,
  9999.000000F,
  1.000000F,
  10.000000F,
  10.000000F,
  9.000000F,
  42.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  10.000000F,
  1.000000F,
  1.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  30.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  1.000000F,
  2.000000F,
  2.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  2.000000F,
  3.000000F,
  3.000000F,
  1.000000F,
  9999.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  100.000000F,
  1.000000F,
  1.000000F,
};
