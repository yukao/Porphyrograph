bool  double_window       ;
bool  wide_screen         ;
int   window_width        ;
int   window_height       ;
int   window_x            ;
int   window_y            ;
float minimal_interframe_latency;
float time_scale          ;
float initial_time        ;
float input_volume        ;
int   camID               ;
float videoThreshold      ;
int   message_pixel_length;
bool  trace_output_frame_number;
bool  trace_time          ;
int   first_frame_number  ;
int   last_frame_number   ;
int   max_mouse_recording_frames;
int   max_network_message_length;
VarTypes ConfigurationVarTypes[_MaxConfigurationVarIDs] = { 
    _pg_bool,
    _pg_bool,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_int,
    _pg_float,
    _pg_int,
    _pg_bool,
    _pg_bool,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
};
void * ConfigurationVarPointers[_MaxConfigurationVarIDs] = { 
   (void *)&double_window,
   (void *)&wide_screen,
   (void *)&window_width,
   (void *)&window_height,
   (void *)&window_x,
   (void *)&window_y,
   (void *)&minimal_interframe_latency,
   (void *)&time_scale,
   (void *)&initial_time,
   (void *)&input_volume,
   (void *)&camID,
   (void *)&videoThreshold,
   (void *)&message_pixel_length,
   (void *)&trace_output_frame_number,
   (void *)&trace_time,
   (void *)&first_frame_number,
   (void *)&last_frame_number,
   (void *)&max_mouse_recording_frames,
   (void *)&max_network_message_length,
};
int   currentDrawingStroke;
bool  drawing_on_off      ;
int   brushID             ;
float brushRadius         ;
float RGBspectrum         ;
float local_color_r       ;
float local_color_g       ;
float local_color_b       ;
float local_color_a       ;
float blendTransp         ;
int   particleMode        ;
float part_acc_factor     ;
float particle_texture_ID ;
float partAccCenter_0     ;
float partAccCenter_1     ;
int   CAType              ;
int   CASubType           ;
bool  clearAllLayers      ;
bool  invertAllLayers     ;
int   cursorSize          ;
float echo                ;
float echoNeg             ;
float color_spectrum_coef ;
float brush_radius_vol_coef;
float part_acc_attack_coef;
float brush_radius_vol_replay_coef;
int   flashTrack0_freq    ;
int   flashCA_freq        ;
int   flashBack_freq      ;
int   flashPart_freq      ;
int   flashTrack0_number  ;
int   flashCA_number      ;
int   flashPart_duration  ;
float flashBack_coef      ;
bool  withTabletPressureRadius;
bool  withTabletAngleRadius;
float brush_radius_pressure_coef;
float brush_radius_angleHor_coef;
float brush_radius_angleVer_coef;
int   currentTrack        ;
float CAdecay_sign        ;
float trackdecay_sign_0   ;
float trackdecay_sign_1   ;
float trackdecay_sign_2   ;
float CAdecay             ;
float trackdecay_0        ;
float trackdecay_1        ;
float trackdecay_2        ;
float CAweight            ;
float trackweight_0       ;
float trackweight_1       ;
float trackweight_2       ;
int   track_y_transl_1    ;
bool  track_replay_0      ;
bool  track_replay_1      ;
bool  track_replay_2      ;
bool  source_track_record_0;
bool  source_track_record_1;
bool  source_track_record_2;
bool  source_track_display_0;
bool  source_track_display_1;
bool  source_track_display_2;
float track_display_weight_0;
float track_display_weight_1;
float track_display_weight_2;
float track_display_rot_0 ;
float track_display_rot_1 ;
float track_display_rot_2 ;
float track_display_x_transl_0;
float track_display_x_transl_1;
float track_display_x_transl_2;
float track_display_y_transl_0;
float track_display_y_transl_1;
float track_display_y_transl_2;
float track_display_scale_0;
float track_display_scale_1;
float track_display_scale_2;
bool  auto_beat           ;
int   CAstep              ;
VarTypes ScenarioVarTypes[_MaxInterpVarIDs] = { 
    _pg_int ,
    _pg_bool,
    _pg_int ,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_int,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_int,
    _pg_int,
    _pg_bool,
    _pg_bool,
    _pg_int,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_float,
    _pg_bool,
    _pg_bool,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_int,
    _pg_sign,
    _pg_sign,
    _pg_sign,
    _pg_sign,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_int,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_track,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_bool,
    _pg_int,
};
void * ScenarioVarPointers[_MaxInterpVarIDs] = { 
   (void *)&currentDrawingStroke,
   (void *)&drawing_on_off,
   (void *)&brushID,
   (void *)&brushRadius,
   (void *)&RGBspectrum,
   (void *)&local_color_r,
   (void *)&local_color_g,
   (void *)&local_color_b,
   (void *)&local_color_a,
   (void *)&blendTransp,
   (void *)&particleMode,
   (void *)&part_acc_factor,
   (void *)&particle_texture_ID,
   (void *)&partAccCenter_0,
   (void *)&partAccCenter_1,
   (void *)&CAType,
   (void *)&CASubType,
   (void *)&clearAllLayers,
   (void *)&invertAllLayers,
   (void *)&cursorSize,
   (void *)&echo,
   (void *)&echoNeg,
   (void *)&color_spectrum_coef,
   (void *)&brush_radius_vol_coef,
   (void *)&part_acc_attack_coef,
   (void *)&brush_radius_vol_replay_coef,
   (void *)&flashTrack0_freq,
   (void *)&flashCA_freq,
   (void *)&flashBack_freq,
   (void *)&flashPart_freq,
   (void *)&flashTrack0_number,
   (void *)&flashCA_number,
   (void *)&flashPart_duration,
   (void *)&flashBack_coef,
   (void *)&withTabletPressureRadius,
   (void *)&withTabletAngleRadius,
   (void *)&brush_radius_pressure_coef,
   (void *)&brush_radius_angleHor_coef,
   (void *)&brush_radius_angleVer_coef,
   (void *)&currentTrack,
   (void *)&CAdecay_sign,
   (void *)&trackdecay_sign_0,
   (void *)&trackdecay_sign_1,
   (void *)&trackdecay_sign_2,
   (void *)&CAdecay,
   (void *)&trackdecay_0,
   (void *)&trackdecay_1,
   (void *)&trackdecay_2,
   (void *)&CAweight,
   (void *)&trackweight_0,
   (void *)&trackweight_1,
   (void *)&trackweight_2,
   (void *)&track_y_transl_1,
   (void *)&track_replay_0,
   (void *)&track_replay_1,
   (void *)&track_replay_2,
   (void *)&source_track_record_0,
   (void *)&source_track_record_1,
   (void *)&source_track_record_2,
   (void *)&source_track_display_0,
   (void *)&source_track_display_1,
   (void *)&source_track_display_2,
   (void *)&track_display_weight_0,
   (void *)&track_display_weight_1,
   (void *)&track_display_weight_2,
   (void *)&track_display_rot_0,
   (void *)&track_display_rot_1,
   (void *)&track_display_rot_2,
   (void *)&track_display_x_transl_0,
   (void *)&track_display_x_transl_1,
   (void *)&track_display_x_transl_2,
   (void *)&track_display_y_transl_0,
   (void *)&track_display_y_transl_1,
   (void *)&track_display_y_transl_2,
   (void *)&track_display_scale_0,
   (void *)&track_display_scale_1,
   (void *)&track_display_scale_2,
   (void *)&auto_beat,
   (void *)&CAstep,
};
void currentDrawingStroke_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void drawing_on_off_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void particle_texture_ID_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void partAccCenter_0_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void partAccCenter_1_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void clearAllLayers_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void currentTrack_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void track_replay_0_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void track_replay_1_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void track_replay_2_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void source_track_record_0_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void source_track_record_1_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void source_track_record_2_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void source_track_display_0_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void source_track_display_1_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void source_track_display_2_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void (*ScenarioVarCallbacks[_MaxInterpVarIDs])(pg_Parameter_Input_Type,float) = { 
   &currentDrawingStroke_callBack,
   &drawing_on_off_callBack,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   &particle_texture_ID_callBack,
   &partAccCenter_0_callBack,
   &partAccCenter_1_callBack,
   NULL,
   NULL,
   &clearAllLayers_callBack,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   &currentTrack_callBack,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   &track_replay_0_callBack,
   &track_replay_1_callBack,
   &track_replay_2_callBack,
   &source_track_record_0_callBack,
   &source_track_record_1_callBack,
   &source_track_record_2_callBack,
   &source_track_display_0_callBack,
   &source_track_display_1_callBack,
   &source_track_display_2_callBack,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
};
char *ScenarioVarMessages[_MaxInterpVarIDs] = { 
  (char *)"",
  (char *)"",
  (char *)"brushID_can",
  (char *)"brushRadius_can",
  (char *)"RGBspectrum_can",
  (char *)"local_color_r_can",
  (char *)"",
  (char *)"",
  (char *)"local_color_a_can",
  (char *)"",
  (char *)"particleMode_can",
  (char *)"part_acc_factor_can",
  (char *)"particle_texture_ID_can",
  (char *)"",
  (char *)"",
  (char *)"CAType_can",
  (char *)"CASubType_can",
  (char *)"",
  (char *)"invertAllLayers_can",
  (char *)"",
  (char *)"echo_can",
  (char *)"echoNeg_can",
  (char *)"color_spectrum_coef_can",
  (char *)"brush_radius_vol_coef_can",
  (char *)"part_acc_attack_coef_can",
  (char *)"brush_radius_vol_replay_coef_can",
  (char *)"flashTrack0_freq_can",
  (char *)"flashCA_freq_can",
  (char *)"flashBack_freq_can",
  (char *)"flashPart_freq_can",
  (char *)"flashTrack0_number_can",
  (char *)"flashCA_number_can",
  (char *)"flashPart_duration_can",
  (char *)"flashBack_coef_can",
  (char *)"withTabletPressureRadius_can",
  (char *)"withTabletAngleRadius_can",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"currentTrack_can",
  (char *)"CAdecay_sign_can",
  (char *)"trackdecay_sign_can 0",
  (char *)"trackdecay_sign_can 1",
  (char *)"trackdecay_sign_can 2",
  (char *)"CAdecay_can",
  (char *)"trackdecay_can 0",
  (char *)"trackdecay_can 1",
  (char *)"trackdecay_can 2",
  (char *)"CAweight_can",
  (char *)"trackweight_can 0",
  (char *)"trackweight_can 1",
  (char *)"trackweight_can 2",
  (char *)"",
  (char *)"track_replay_can 0",
  (char *)"track_replay_can 1",
  (char *)"track_replay_can 2",
  (char *)"source_track_record_can 0",
  (char *)"source_track_record_can 1",
  (char *)"source_track_record_can 2",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"auto_beat_can",
  (char *)"",
};
char *CmdString[_MaxInterpVarIDs] = { 
  (char *)"currentDrawingStroke",
  (char *)"drawing_on_off",
  (char *)"brushID",
  (char *)"brushRadius",
  (char *)"RGBspectrum",
  (char *)"local_color_r",
  (char *)"local_color_g",
  (char *)"local_color_b",
  (char *)"local_color_a",
  (char *)"blendTransp",
  (char *)"particleMode",
  (char *)"part_acc_factor",
  (char *)"particle_texture_ID",
  (char *)"partAccCenter_0",
  (char *)"partAccCenter_1",
  (char *)"CAType",
  (char *)"CASubType",
  (char *)"clearAllLayers",
  (char *)"invertAllLayers",
  (char *)"cursorSize",
  (char *)"echo",
  (char *)"echoNeg",
  (char *)"color_spectrum_coef",
  (char *)"brush_radius_vol_coef",
  (char *)"part_acc_attack_coef",
  (char *)"brush_radius_vol_replay_coef",
  (char *)"flashTrack0_freq",
  (char *)"flashCA_freq",
  (char *)"flashBack_freq",
  (char *)"flashPart_freq",
  (char *)"flashTrack0_number",
  (char *)"flashCA_number",
  (char *)"flashPart_duration",
  (char *)"flashBack_coef",
  (char *)"withTabletPressureRadius",
  (char *)"withTabletAngleRadius",
  (char *)"brush_radius_pressure_coef",
  (char *)"brush_radius_angleHor_coef",
  (char *)"brush_radius_angleVer_coef",
  (char *)"currentTrack",
  (char *)"CAdecay_sign",
  (char *)"trackdecay_sign_0",
  (char *)"trackdecay_sign_1",
  (char *)"trackdecay_sign_2",
  (char *)"CAdecay",
  (char *)"trackdecay_0",
  (char *)"trackdecay_1",
  (char *)"trackdecay_2",
  (char *)"CAweight",
  (char *)"trackweight_0",
  (char *)"trackweight_1",
  (char *)"trackweight_2",
  (char *)"track_y_transl_1",
  (char *)"track_replay_0",
  (char *)"track_replay_1",
  (char *)"track_replay_2",
  (char *)"source_track_record_0",
  (char *)"source_track_record_1",
  (char *)"source_track_record_2",
  (char *)"source_track_display_0",
  (char *)"source_track_display_1",
  (char *)"source_track_display_2",
  (char *)"track_display_weight_0",
  (char *)"track_display_weight_1",
  (char *)"track_display_weight_2",
  (char *)"track_display_rot_0",
  (char *)"track_display_rot_1",
  (char *)"track_display_rot_2",
  (char *)"track_display_x_transl_0",
  (char *)"track_display_x_transl_1",
  (char *)"track_display_x_transl_2",
  (char *)"track_display_y_transl_0",
  (char *)"track_display_y_transl_1",
  (char *)"track_display_y_transl_2",
  (char *)"track_display_scale_0",
  (char *)"track_display_scale_1",
  (char *)"track_display_scale_2",
  (char *)"auto_beat",
  (char *)"CAstep",
};
char CmdCharMinus[_MaxInterpVarIDs+1] = "*c&roBBB***a*****cC*?**k********p***********id*******123789456*****************";
char CmdCharPlus[_MaxInterpVarIDs+1] = "l*mROzzz**PA$**Gg***!**K******jJQ*bW***0****ID*********************************";
float StepMinus[_MaxInterpVarIDs] = { 
  -1.000000F,
  0.000000F,
  -1.000000F,
  -1.000000F,
  -0.100000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  0.000000F,
  -1.000000F,
  -1.000000F,
  -0.100000F,
  -1.000000F,
  -0.100000F,
  -0.100000F,
  -1.000000F,
  -1.000000F,
  0.000000F,
  0.000000F,
  -1.000000F,
  -0.100000F,
  -0.100000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -0.001000F,
  -0.001000F,
  -0.001000F,
  -0.001000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  0.000000F,
  -1.000000F,
};
float StepPlus[_MaxInterpVarIDs] = { 
  1.000000F,
  0.000000F,
  1.000000F,
  1.000000F,
  0.100000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  0.100000F,
  1.000000F,
  0.100000F,
  0.100000F,
  1.000000F,
  1.000000F,
  0.000000F,
  1.000000F,
  1.000000F,
  0.100000F,
  0.100000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  0.001000F,
  0.001000F,
  0.001000F,
  0.001000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
};
float MinValues[_MaxInterpVarIDs] = { 
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  -9999.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  0.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
};
float MaxValues[_MaxInterpVarIDs] = { 
  2.000000F,
  1.000000F,
  7.000000F,
  9999.000000F,
  9999.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  9999.000000F,
  2.000000F,
  9999.000000F,
  7.000000F,
  9999.000000F,
  9999.000000F,
  9.000000F,
  9.000000F,
  1.000000F,
  1.000000F,
  10.000000F,
  1.000000F,
  1.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  2.000000F,
  2.000000F,
  30.000000F,
  9999.000000F,
  1.000000F,
  1.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  2.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  100.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  1.000000F,
  100.000000F,
};
