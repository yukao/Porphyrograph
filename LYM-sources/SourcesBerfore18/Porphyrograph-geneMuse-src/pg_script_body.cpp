int   currentDrawingStroke;
int   brushID             ;
float brushRadius         ;
float scale               ;
float RGBspectrum         ;
float local_color_r       ;
float local_color_g       ;
float local_color_b       ;
float local_color_a       ;
float blendTransp         ;
int   particleMode        ;
float part_acc_factor     ;
float particle_texture_ID ;
float partAccCenter_0     ;
float partAccCenter_1     ;
int   CAType              ;
int   CASubType           ;
int   CA1TypeSubType      ;
int   CA2TypeSubType      ;
int   CA3TypeSubType      ;
float CA1_CA2_weight      ;
int   CAstep              ;
bool  clearAllLayers      ;
bool  clearCA             ;
bool  invertAllLayers     ;
int   cursorSize          ;
float echo                ;
float echoNeg             ;
float xy_spectrum_coef    ;
float color_spectrum_coef ;
float brush_radius_vol_coef;
float part_acc_attack_coef;
float xy_spectrum_replay_coef;
float color_spectrum_replay_coef;
float brush_radius_vol_replay_coef;
int   flashCA_freq_0      ;
int   flashBack_freq      ;
int   flashPart_freq      ;
bool  flashCA_onOff_0     ;
bool  flashBack_onOff     ;
bool  flashPart_onOff     ;
int   flashPart_duration  ;
float flashCA_coef_0      ;
float flashBack_coef      ;
float brush_radius_pressure_coef;
float brush_radius_angleHor_coef;
float brush_radius_angleVer_coef;
bool  tracksSync          ;
int   currentTrack        ;
float CAdecay_sign        ;
float trackdecay_sign_0   ;
float CAdecay             ;
float trackdecay_0        ;
float CAweight            ;
float trackweight_0       ;
bool  track_replay_0      ;
bool  source_track_record_0;
bool  auto_beat           ;
float sample_setUp        ;
int   TempoClock          ;
int   sensor_layout       ;
int   sensor_activation   ;
float volSC               ;
VarTypes ScenarioVarTypes[_MaxInterpVarIDs] = { 
    _pg_int ,
    _pg_int ,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_int,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_float,
    _pg_int,
    _pg_bool,
    _pg_bool,
    _pg_bool,
    _pg_int,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_int,
    _pg_int,
    _pg_int,
    _pg_bool,
    _pg_bool,
    _pg_bool,
    _pg_int,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_bool,
    _pg_int,
    _pg_sign,
    _pg_sign,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_float,
    _pg_track,
    _pg_track,
    _pg_bool,
    _pg_float,
    _pg_int ,
    _pg_int ,
    _pg_int ,
    _pg_float,
};
void * ScenarioVarPointers[_MaxInterpVarIDs] = { 
   (void *)&currentDrawingStroke,
   (void *)&brushID,
   (void *)&brushRadius,
   (void *)&scale,
   (void *)&RGBspectrum,
   (void *)&local_color_r,
   (void *)&local_color_g,
   (void *)&local_color_b,
   (void *)&local_color_a,
   (void *)&blendTransp,
   (void *)&particleMode,
   (void *)&part_acc_factor,
   (void *)&particle_texture_ID,
   (void *)&partAccCenter_0,
   (void *)&partAccCenter_1,
   (void *)&CAType,
   (void *)&CASubType,
   (void *)&CA1TypeSubType,
   (void *)&CA2TypeSubType,
   (void *)&CA3TypeSubType,
   (void *)&CA1_CA2_weight,
   (void *)&CAstep,
   (void *)&clearAllLayers,
   (void *)&clearCA,
   (void *)&invertAllLayers,
   (void *)&cursorSize,
   (void *)&echo,
   (void *)&echoNeg,
   (void *)&xy_spectrum_coef,
   (void *)&color_spectrum_coef,
   (void *)&brush_radius_vol_coef,
   (void *)&part_acc_attack_coef,
   (void *)&xy_spectrum_replay_coef,
   (void *)&color_spectrum_replay_coef,
   (void *)&brush_radius_vol_replay_coef,
   (void *)&flashCA_freq_0,
   (void *)&flashBack_freq,
   (void *)&flashPart_freq,
   (void *)&flashCA_onOff_0,
   (void *)&flashBack_onOff,
   (void *)&flashPart_onOff,
   (void *)&flashPart_duration,
   (void *)&flashCA_coef_0,
   (void *)&flashBack_coef,
   (void *)&brush_radius_pressure_coef,
   (void *)&brush_radius_angleHor_coef,
   (void *)&brush_radius_angleVer_coef,
   (void *)&tracksSync,
   (void *)&currentTrack,
   (void *)&CAdecay_sign,
   (void *)&trackdecay_sign_0,
   (void *)&CAdecay,
   (void *)&trackdecay_0,
   (void *)&CAweight,
   (void *)&trackweight_0,
   (void *)&track_replay_0,
   (void *)&source_track_record_0,
   (void *)&auto_beat,
   (void *)&sample_setUp,
   (void *)&TempoClock,
   (void *)&sensor_layout,
   (void *)&sensor_activation,
   (void *)&volSC,
};
void partAccCenter_0_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void partAccCenter_1_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void clearAllLayers_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void clearCA_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void track_replay_0_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void source_track_record_0_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void sample_setUp_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void TempoClock_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void sensor_layout_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void sensor_activation_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void volSC_callBack(pg_Parameter_Input_Type param_input_type , float scenario_or_gui_command_value);
void (*ScenarioVarCallbacks[_MaxInterpVarIDs])(pg_Parameter_Input_Type,float) = { 
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   &partAccCenter_0_callBack,
   &partAccCenter_1_callBack,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   &clearAllLayers_callBack,
   &clearCA_callBack,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   &track_replay_0_callBack,
   &source_track_record_0_callBack,
   NULL,
   &sample_setUp_callBack,
   &TempoClock_callBack,
   &sensor_layout_callBack,
   &sensor_activation_callBack,
   &volSC_callBack,
};
char *ScenarioVarMessages[_MaxInterpVarIDs] = { 
  (char *)"",
  (char *)"brushID_can",
  (char *)"brushRadius_can",
  (char *)"scale_can",
  (char *)"RGBspectrum_can",
  (char *)"local_color_r_can",
  (char *)"",
  (char *)"",
  (char *)"local_color_a_can",
  (char *)"",
  (char *)"particleMode_can",
  (char *)"part_acc_factor_can",
  (char *)"particle_texture_ID_can",
  (char *)"",
  (char *)"",
  (char *)"CAType_can",
  (char *)"CASubType_can",
  (char *)"CA1TypeSubType_can",
  (char *)"CA2TypeSubType_can",
  (char *)"CA3TypeSubType_can",
  (char *)"CA1_CA2_weight_can",
  (char *)"CAstep_can",
  (char *)"",
  (char *)"",
  (char *)"invertAllLayers_can",
  (char *)"",
  (char *)"echo_can",
  (char *)"echoNeg_can",
  (char *)"xy_spectrum_coef_can",
  (char *)"color_spectrum_coef_can",
  (char *)"",
  (char *)"part_acc_attack_coef_can",
  (char *)"xy_spectrum_replay_coef_can",
  (char *)"color_spectrum_replay_coef_can",
  (char *)"brush_radius_vol_replay_coef_can",
  (char *)"flashCA_freq_can 0",
  (char *)"flashBack_freq_can",
  (char *)"flashPart_freq_can",
  (char *)"flashCA_onOff_0_can",
  (char *)"flashBack_onOff_can",
  (char *)"flashPart_onOff_can",
  (char *)"flashPart_duration_can",
  (char *)"flashCA_coef_can 0",
  (char *)"flashBack_coef_can",
  (char *)"brush_radius_pressure_coef_can",
  (char *)"",
  (char *)"",
  (char *)"",
  (char *)"currentTrack_can",
  (char *)"CAdecay_sign_can",
  (char *)"trackdecay_sign_can 0",
  (char *)"CAdecay_can",
  (char *)"trackdecay_can 0",
  (char *)"CAweight_can",
  (char *)"trackweight_can 0",
  (char *)"track_replay_can 0",
  (char *)"source_track_record_can 0",
  (char *)"auto_beat_can",
  (char *)"sample_setUp_can",
  (char *)"TempoClock_can",
  (char *)"sensor_layout_can",
  (char *)"sensor_activation_can",
  (char *)"volSC_can",
};
char *CmdString[_MaxInterpVarIDs] = { 
  (char *)"currentDrawingStroke",
  (char *)"brushID",
  (char *)"brushRadius",
  (char *)"scale",
  (char *)"RGBspectrum",
  (char *)"local_color_r",
  (char *)"local_color_g",
  (char *)"local_color_b",
  (char *)"local_color_a",
  (char *)"blendTransp",
  (char *)"particleMode",
  (char *)"part_acc_factor",
  (char *)"particle_texture_ID",
  (char *)"partAccCenter_0",
  (char *)"partAccCenter_1",
  (char *)"CAType",
  (char *)"CASubType",
  (char *)"CA1TypeSubType",
  (char *)"CA2TypeSubType",
  (char *)"CA3TypeSubType",
  (char *)"CA1_CA2_weight",
  (char *)"CAstep",
  (char *)"clearAllLayers",
  (char *)"clearCA",
  (char *)"invertAllLayers",
  (char *)"cursorSize",
  (char *)"echo",
  (char *)"echoNeg",
  (char *)"xy_spectrum_coef",
  (char *)"color_spectrum_coef",
  (char *)"brush_radius_vol_coef",
  (char *)"part_acc_attack_coef",
  (char *)"xy_spectrum_replay_coef",
  (char *)"color_spectrum_replay_coef",
  (char *)"brush_radius_vol_replay_coef",
  (char *)"flashCA_freq_0",
  (char *)"flashBack_freq",
  (char *)"flashPart_freq",
  (char *)"flashCA_onOff_0",
  (char *)"flashBack_onOff",
  (char *)"flashPart_onOff",
  (char *)"flashPart_duration",
  (char *)"flashCA_coef_0",
  (char *)"flashBack_coef",
  (char *)"brush_radius_pressure_coef",
  (char *)"brush_radius_angleHor_coef",
  (char *)"brush_radius_angleVer_coef",
  (char *)"tracksSync",
  (char *)"currentTrack",
  (char *)"CAdecay_sign",
  (char *)"trackdecay_sign_0",
  (char *)"CAdecay",
  (char *)"trackdecay_0",
  (char *)"CAweight",
  (char *)"trackweight_0",
  (char *)"track_replay_0",
  (char *)"source_track_record_0",
  (char *)"auto_beat",
  (char *)"sample_setUp",
  (char *)"TempoClock",
  (char *)"sensor_layout",
  (char *)"sensor_activation",
  (char *)"volSC",
};
char CmdCharMinus[_MaxInterpVarIDs+1] = "*&rzoBBB***a***Hh*****ccC*?*x*********:::p*****:***id**17******";
char CmdCharPlus[_MaxInterpVarIDs+1] = "*mRZOWWW**PA$**Gg*********!*X************Q******0**ID**********";
float StepMinus[_MaxInterpVarIDs] = { 
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -0.100000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  0.000000F,
  -1.000000F,
  -1.000000F,
  -0.100000F,
  -1.000000F,
  -0.100000F,
  -0.100000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -0.100000F,
  -1.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -1.000000F,
  -0.100000F,
  -0.100000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  0.000000F,
  -1.000000F,
  -1.000000F,
  -1.000000F,
  -0.001000F,
  -0.001000F,
  -1.000000F,
  -1.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -0.100000F,
  -100.000000F,
  -1.000000F,
  -1.000000F,
  -0.100000F,
};
float StepPlus[_MaxInterpVarIDs] = { 
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  0.100000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  0.100000F,
  1.000000F,
  0.100000F,
  0.100000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  0.100000F,
  1.000000F,
  0.000000F,
  0.000000F,
  1.000000F,
  1.000000F,
  0.100000F,
  0.100000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  0.001000F,
  0.001000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  0.100000F,
  100.000000F,
  1.000000F,
  1.000000F,
  0.100000F,
};
float MinValues[_MaxInterpVarIDs] = { 
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  -9999.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  1.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  -1.000000F,
  -1.000000F,
  -9999.000000F,
  -9999.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
  0.000000F,
};
float MaxValues[_MaxInterpVarIDs] = { 
  2.000000F,
  7.000000F,
  9999.000000F,
  100.000000F,
  9999.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  9999.000000F,
  2.000000F,
  9999.000000F,
  7.000000F,
  9999.000000F,
  9999.000000F,
  9.000000F,
  42.000000F,
  99.000000F,
  99.000000F,
  99.000000F,
  1.000000F,
  100.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  10.000000F,
  1.000000F,
  1.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  30.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  9999.000000F,
  1.000000F,
  2.000000F,
  1.000000F,
  1.000000F,
  9999.000000F,
  9999.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  1.000000F,
  2.000000F,
  1000.000000F,
  3.000000F,
  3.000000F,
  1.000000F,
};
