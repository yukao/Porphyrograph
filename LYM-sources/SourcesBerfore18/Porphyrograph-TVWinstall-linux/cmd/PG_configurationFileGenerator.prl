#!/usr/bin/perl

# ods to conf

# PG_configurationFileGenerator.prl
# Sept 2014
# (c) Lola and Yukao Meet

# input: format csv (export from libreoffice)
# output: format XML Porphyrograph

use strict;
use warnings;
use 5.010;

my $COMMENT = 1;
my $HTML = 2;
my $SCENE = 3;
my $pad_len = 16;

if( @ARGV != 3 ) {
    print "Usage: PG_configurationFileGenerator.prl conf_file_head.xml conf_file_body.csv conf_file_complete.conf\n";
    print "PG_configurationFileGenerator.prl: A program for generating XML code for Porphyrograph\n";
    exit 0;
}

my $NAMEInputfileHEAD = $ARGV[0];
open( INPUT_HEAD_XML , "<$NAMEInputfileHEAD" ) 
    || die "File $NAMEInputfileHEAD not found!";

my $NAMEInputfileSCENARIO = $ARGV[1];
open( INPUT_SCENARIO_CSV , "<$NAMEInputfileSCENARIO" ) 
    || die "File $NAMEInputfileSCENARIO not found!";

my $NAMEOutputfile = $ARGV[2];
open( OUTPUT_CONFIG_FILE , ">$NAMEOutputfile" ) 
    || die "File $NAMEOutputfile not opened!";

printf "Generating configuration file $NAMEOutputfile\n";

my $line = <INPUT_HEAD_XML>;
while (!eof(INPUT_HEAD_XML)) {
    chomp $line;
    printf OUTPUT_CONFIG_FILE $line . "\n";
    $line = <INPUT_HEAD_XML>;
    if( eof(INPUT_HEAD_XML) ) {
	chomp $line;
	printf OUTPUT_CONFIG_FILE $line . "\n";
    }
}
close( INPUT_HEAD_XML );

$line = <INPUT_SCENARIO_CSV>;
chomp $line;
my $mode = $COMMENT;
my $value = 0;
while (!eof(INPUT_SCENARIO_CSV)) {
    chomp $line;
    if( $line =~ m/^\#specification/ ) {
	$mode = $COMMENT;
    }
    elsif( $line =~ m/^\#comment/ ) {
	$mode = $COMMENT;
    }
    elsif( $line =~ m/^\#HTML/ ) {
	$mode = $HTML;
    }
    elsif( $line =~ m/^\#SCENE/ ) {
	$mode = $SCENE;
    }
    else {
	die "Unknown mode [$line] !\n";
    }
    $line = <INPUT_SCENARIO_CSV>;

    if( $mode == $COMMENT ) {
	do {
	    chomp $line;
	    $line =~ s/\t+$//;
	    $line =~ s/\t/ /g;
	    printf OUTPUT_CONFIG_FILE "<!-- " . $line . " -->\n";
	    $line = <INPUT_SCENARIO_CSV>;
	} until( ($line =~ m/^\#/) || eof(INPUT_SCENARIO_CSV) );
	if( eof(INPUT_SCENARIO_CSV) ) {
	    chomp $line;
	    $line =~ s/\t+$//;
	    $line =~ s/\t/ /g;
	    printf OUTPUT_CONFIG_FILE "<!-- " . $line . " -->\n";
	}
    }
    elsif( $mode == $HTML ) {
	do {
	    chomp $line;
	    $line =~ s/""/"/g;
	    $line =~ s/^"//;
	    $line =~ s/"\t*$//;
	    printf OUTPUT_CONFIG_FILE $line . "\n";
	    $line = <INPUT_SCENARIO_CSV>;
	} until( $line =~ m/^\#/ || eof(INPUT_SCENARIO_CSV) );
	if( eof(INPUT_SCENARIO_CSV) ) {
	    chomp $line;
	    $line =~ s/""/"/g;
	    $line =~ s/^"//;
	    $line =~ s/"\t*$//;
	    printf OUTPUT_CONFIG_FILE $line . "\n";
	}
    }
    elsif( $mode == $SCENE ) {
	# scene name
	chomp $line;
	$line =~ s/\t+$//;
	printf OUTPUT_CONFIG_FILE "        <!-- " . $line . " -->\n";
	$line = <INPUT_SCENARIO_CSV>;

	# scene comments
	chomp $line;
	$line =~ s/^\t+//;
	my @values = split /\t/ , $line;
	printf OUTPUT_CONFIG_FILE "        <!-- ";
	foreach $value ( @values ) {
	    printf OUTPUT_CONFIG_FILE "%-${pad_len}s", $value;
	}
	printf OUTPUT_CONFIG_FILE " -->\n";
	$line = <INPUT_SCENARIO_CSV>;

	# initial values
	chomp $line;
	$line =~ s/^\t+//;
	@values = split /\t/ , $line;
	printf OUTPUT_CONFIG_FILE  "             " ;
	foreach $value ( @values ) {
	    printf OUTPUT_CONFIG_FILE "%-${pad_len}s", $value;
	}
	printf OUTPUT_CONFIG_FILE "\n";
	$line = <INPUT_SCENARIO_CSV>;

	# final values
	chomp $line;
	$line =~ s/^\t+//;
	@values = split /\t/ , $line;
	printf OUTPUT_CONFIG_FILE  "             " ;
	foreach $value ( @values ) {
	    printf OUTPUT_CONFIG_FILE "%-${pad_len}s", $value;
	}
	printf OUTPUT_CONFIG_FILE "\n";
	$line = <INPUT_SCENARIO_CSV>;

	# interpolation commands
	chomp $line;
	$line =~ s/^\t+//;
	@values = split /\t/ , $line;
	printf OUTPUT_CONFIG_FILE  "             " ;
	foreach $value ( @values ) {
	    printf OUTPUT_CONFIG_FILE "%-${pad_len}s", $value;
	}
	printf OUTPUT_CONFIG_FILE "\n";
	$line = <INPUT_SCENARIO_CSV>;
    }
}

close( INPUT_SCENARIO_CSV );
close( OUTPUT_CONFIG_FILE );
