// SCENARIO VARIABLES
float CA1_CA2_weight      ;
int   CA1SubType          ;
int   CA1Type             ;
int   CA2SubType          ;
int   CA2Type             ;
bool  CAcolorSpread       ;
float CAParams            [(PG_NB_CA_PARAMS+1)];
float CAParams_pulse      [(PG_NB_CA_PARAMS+1)];
int   CAstep              ;
float repop_CA            ;
int   flashCABG_freq      ;
int   flashCameraTrkBeat  ;
float flashCameraTrkBright;
float flashCameraTrkLength;
int   flashCAPart_freq    ;
int   flashPartBG_freq    ;
int   flashPartCA_freq    ;
int   flashParticleInit_freq;
int   flashPhotoChangeBeat;
int   flashPhotoTrkBeat   ;
float flashPhotoTrkBright ;
float flashPhotoTrkLength ;
int   flashPixel_duration ;
int   flashPixel_freq     ;
int   flashTrkBG_freq_1   ;
int   flashTrkBG_freq_2   ;
int   flashTrkBG_freq_3   ;
int   flashTrkCA_freq_0   ;
int   flashTrkCA_freq_1   ;
int   flashTrkCA_freq_2   ;
int   flashTrkCA_freq_3   ;
int   flashTrkPart_freq_0 ;
int   flashTrkPart_freq_1 ;
int   flashTrkPart_freq_2 ;
int   flashTrkPart_freq_3 ;
float master_crop_width   ;
float master_crop_x       ;
float master_crop_y       ;
float master_mask         ;
float master_mask_offsetX ;
float master_mask_offsetY ;
float master_mask_opacity [(PG_NB_MASTER_MASKS+1)];
float master_mask_scale   ;
float master_mask_scale_ratio;
float master_offsetX      ;
float master_offsetY      ;
float master_scale        ;
float master_scale_pulse  ;
float master_scale_ratio  ;
float audioInput_weight   ;
float beat_delay          ;
float beat_threshold      ;
int   playing_soundtrackNo;
float sound_env_max       ;
float sound_env_min       ;
float sound_min           ;
float sound_volume        ;
float soundtrack_PA_weight;
float soundtrack_PD_weight;
float camera_gamma        ;
float camera_gamma_pulse  ;
float cameraBrightness    ;
float cameraCaptFreq      ;
float cameraContrast      ;
int   cameraCumul         ;
float cameraExposure      ;
float cameraGain          ;
float cameraGamma         ;
int   cameraNo            ;
float cameraSaturation    ;
float cameraSobel         ;
float cameraSobel_pulse   ;
float cameraThreshold     ;
float cameraThreshold_pulse;
float cameraWB_B          ;
float cameraWB_R          ;
float cameraWeight        ;
float cameraWeight_pulse  ;
bool  invertCamera        ;
float clip_mix            ;
float clip_nudge_factor   ;
float clip_scratch_factor ;
float clipCaptFreq        ;
string playing_clipNameLeft;
string playing_clipNameRight;
string playing_secondClipNameLeft;
string playing_secondClipNameRight;
int   activeClipArts      ;
float ClipArt_width       ;
float ClipArt_width_pulse ;
float ClipArt_stroke_color_preset;
float ClipArt_stroke_color_preset_pulse;
float ClipArt_layer_1_color_preset;
float ClipArt_layer_1_color_preset_pulse;
float ClipArt_layer_2_color_preset;
float ClipArt_layer_2_color_preset_pulse;
float ClipArt_layer_3_color_preset;
float ClipArt_layer_3_color_preset_pulse;
float ClipArt_layer_4_color_preset;
float ClipArt_layer_4_color_preset_pulse;
float ClipArt_layer_5_color_preset;
float ClipArt_layer_5_color_preset_pulse;
float ClipArt_layer_6_color_preset;
float ClipArt_layer_6_color_preset_pulse;
float ClipArt_layer_7_color_preset;
float ClipArt_layer_7_color_preset_pulse;
float ClipArt_layer_8_color_preset;
float ClipArt_layer_8_color_preset_pulse;
float moving_messages     ;
bool  invertMovie         ;
float movie_gamma         ;
float movie_gamma_pulse   ;
bool  movie_loop          ;
float movie_threshold     ;
float movie_threshold_pulse;
float movieCaptFreq       ;
float movieSobel          ;
float movieSobel_pulse    ;
float movieWeight         ;
float movieWeight_pulse   ;
int   playing_movieNo     ;
bool  invertPhoto         ;
float maskJitterAmpl      ;
float photo_contrast      ;
int   photo_diaporama     ;
float photo_diaporama_fade;
float photo_diaporama_plateau;
float photo_gamma         ;
float photo_gamma_pulse   ;
float photo_hue           ;
float photo_hue_pulse     ;
float photo_offsetX       ;
float photo_offsetY       ;
float photo_rot           ;
float photo_satur         ;
float photo_satur_pulse   ;
float photo_scaleX        ;
float photo_scaleY        ;
float photo_threshold     ;
float photo_threshold_pulse;
float photo_transl_x      ;
float photo_transl_y      ;
float photo_value         ;
float photo_value_pulse   ;
float photoJitterAmpl     ;
float photoSobel          ;
float photoSobel_pulse    ;
float photoWeight         ;
float photoWeight_pulse   ;
float video_contrast      ;
float video_contrast_pulse;
float video_gamma         ;
float video_gamma_pulse   ;
float video_hue           ;
float video_hue_pulse     ;
float video_satur         ;
float video_satur_pulse   ;
float video_threshold     ;
float video_threshold_pulse;
float video_value         ;
float video_value_pulse   ;
float video_white         ;
float video_white_pulse   ;
int   noiseType           ;
float noiseLineScale      ;
float noiseAngleScale     ;
float noiseCenterX        ;
float noiseCenterY        ;
float noiseParticleScale  ;
float noiseParticleScale_pulse;
float part_acc            ;
float part_acc_pulse      ;
float part_damp           ;
float part_damp_pulse     ;
float part_damp_targtRad  ;
float part_field_weight   ;
float part_field_weight_pulse;
float part_gravity        ;
float part_gravity_pulse  ;
int   part_image_acceleration;
int   part_initialization ;
float part_size           ;
float part_size_pulse     ;
float part_timeToTargt    ;
int   partColor_mode      ;
int   partExit_mode       ;
int   particle_type       ;
bool  partMove_rand       ;
bool  partMove_target     ;
int   partSplat_texture   ;
int   partStroke_mode     ;
float pulsed_part_Hshift  ;
float pulsed_part_Vshift  ;
bool  tracksSync          ;
bool  part_path_follow    [PG_NB_PATHS];
bool  part_path_repop     [PG_NB_PATHS];
bool  part_path_repulse   [PG_NB_PATHS];
int   path_group          ;
bool  path_record         [PG_NB_PATHS];
bool  path_replay_loop    ;
float path_replay_speed   ;
int   path_replay_trackNo [PG_NB_PATHS];
float path_scaleX         ;
float path_scaleY         ;
float path_translX        ;
float path_translY        ;
float color_spectrum_coef ;
float pen_angle_pulse     ;
int   pen_brush           ;
int   pen_brush_replay    ;
float pen_color           ;
float pen_color_a         ;
float pen_color_a_pulse   ;
float pen_color_pulse     ;
float pen_color_replay    ;
float pen_color_replay_pulse;
float pen_grey            ;
float pen_grey_pulse      ;
float pen_grey_replay     ;
float pen_grey_replay_pulse;
float pen_hue_replay      ;
float pen_hue_replay_pulse;
int   pen_position_dash   ;
float pen_position_pulse  ;
float pen_radius          ;
float pen_radius_angleHor_coef;
float pen_radius_angleVer_coef;
float pen_radius_pressure_coef;
float pen_radius_pulse    ;
float pen_radius_replay   ;
float pen_radius_replay_pulse;
float pen_saturation_replay;
float pen_saturation_replay_pulse;
float pen_value_replay    ;
float pen_value_replay_pulse;
bool  penStrokeAtBeat     ;
int   Pixelstep           ;
float noiseUpdateScale    ;
float noiseUpdateScale_pulse;
float pixel_acc           ;
float pixel_acc_pulse     ;
float pixel_acc_shiftX    ;
float pixel_acc_shiftX_pulse;
float pixel_acc_shiftY    ;
float pixel_acc_shiftY_pulse;
int   pixel_image_acceleration;
int   pixel_mode          ;
float pixel_radius        ;
float pixel_radius_pulse  ;
int   BG_CA_repop_color_mode;
int   BG_CA_repop_density ;
int   Part_repop_color_mode;
int   Part_repop_density  ;
float repop_BG            ;
float repop_BG_pulse      ;
float repop_CA_pulse      ;
float repop_colorBG       ;
float repop_colorBG_pulse ;
float repop_colorCA       ;
float repop_colorCA_pulse ;
float repop_colorPart     ;
float repop_colorPart_pulse;
float repop_greyBG        ;
float repop_greyBG_pulse  ;
float repop_greyCA        ;
float repop_greyCA_pulse  ;
float repop_greyPart      ;
float repop_greyPart_pulse;
float repop_part          ;
float repop_part_pulse    ;
float repop_path          ;
float repop_path_pulse    ;
string script_1            ;
int   sensor_activation   ;
int   sensor_layout       ;
float sensor_sample_setUp ;
float sensor_vol          ;
bool  auto_beat           ;
float auto_beat_duration  ;
bool  auto_pulse          ;
bool  camera_BG_subtr     ;
bool  clearAllLayers      ;
bool  clearCA             ;
bool  clearLayer          ;
int   cursorSize          ;
bool  freeze              ;
bool  invertAllLayers     ;
float master              ;
bool  mute_second_screen  ;
bool  reset_camera        ;
bool  take_snapshots      ;
float CAdecay             ;
float CAdecay_pulse       ;
float echo                ;
float echo_pulse          ;
float echoNeg             ;
float echoNeg_pulse       ;
float partDecay           ;
float partDecay_pulse     ;
float trkDecay_0          ;
float trkDecay_0_pulse    ;
float trkDecay_1          ;
float trkDecay_1_pulse    ;
float trkDecay_2          ;
float trkDecay_2_pulse    ;
float trkDecay_3          ;
float trkDecay_3_pulse    ;
float CAMasterWeight      ;
float CAMasterWeight_pulse;
float CAMixingWeight      ;
float CAMixingWeight_pulse;
float ClipArtMixingWeight ;
float ClipArtMixingWeight_pulse;
float ClipArtMasterWeight ;
float ClipArtMasterWeight_pulse;
float PartMasterWeight    ;
float PartMasterWeight_pulse;
float PartMixingWeight    ;
float PartMixingWeight_pulse;
float SecondMasterMixingWeight;
float trackMasterWeight   [PG_NB_TRACKS];
float trackMasterWeight_pulse[PG_NB_TRACKS];
float trackMixingWeight   [PG_NB_TRACKS];
float trackMixingWeight_pulse[PG_NB_TRACKS];
int   blurRadius_1        ;
int   blurRadius_2        ;
int   currentDrawingTrack ;
int   currentMaskTrack    ;
int   currentPhotoTrack   ;
int   currentVideoTrack   ;
bool  slow_track_translation;
float track_x_transl_0    ;
float track_x_transl_0_pulse;
float track_x_transl_1    ;
float track_x_transl_1_pulse;
float track_y_transl_0    ;
float track_y_transl_0_pulse;
float track_y_transl_1    ;
float track_y_transl_1_pulse;
VarTypes ScenarioVarTypes[_MaxInterpVarIDs] = { 
	_pg_float,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_bool,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_float,
	_pg_int,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_bool,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_string,
	_pg_string,
	_pg_string,
	_pg_string,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_bool,
	_pg_float,
	_pg_float,
	_pg_bool,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_bool,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_bool,
	_pg_bool,
	_pg_int,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_bool,
	_pg_bool,
	_pg_bool,
	_pg_bool,
	_pg_int,
	_pg_bool,
	_pg_bool,
	_pg_float,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_bool,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_string,
	_pg_int,
	_pg_int,
	_pg_float,
	_pg_float,
	_pg_bool,
	_pg_float,
	_pg_bool,
	_pg_bool,
	_pg_bool,
	_pg_bool,
	_pg_bool,
	_pg_int,
	_pg_bool,
	_pg_bool,
	_pg_float,
	_pg_bool,
	_pg_bool,
	_pg_bool,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_int,
	_pg_bool,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
	_pg_float,
};
int ScenarioVarIndiceRanges[_MaxInterpVarIDs][2] = { 
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{1, (PG_NB_CA_PARAMS+1)},
	{1, (PG_NB_CA_PARAMS+1)},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{1, (PG_NB_MASTER_MASKS+1)},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{0, PG_NB_PATHS},
	{0, PG_NB_PATHS},
	{0, PG_NB_PATHS},
	{-1, -1},
	{1, PG_NB_PATHS},
	{-1, -1},
	{-1, -1},
	{1, PG_NB_PATHS},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{0, PG_NB_TRACKS},
	{0, PG_NB_TRACKS},
	{0, PG_NB_TRACKS},
	{0, PG_NB_TRACKS},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
};
void * ScenarioVarPointers[_MaxInterpVarIDs] = { 
	(void *)&CA1_CA2_weight,
	(void *)&CA1SubType,
	(void *)&CA1Type,
	(void *)&CA2SubType,
	(void *)&CA2Type,
	(void *)&CAcolorSpread,
	(void *)&CAParams,
	(void *)&CAParams_pulse,
	(void *)&CAstep,
	(void *)&repop_CA,
	(void *)&flashCABG_freq,
	(void *)&flashCameraTrkBeat,
	(void *)&flashCameraTrkBright,
	(void *)&flashCameraTrkLength,
	(void *)&flashCAPart_freq,
	(void *)&flashPartBG_freq,
	(void *)&flashPartCA_freq,
	(void *)&flashParticleInit_freq,
	(void *)&flashPhotoChangeBeat,
	(void *)&flashPhotoTrkBeat,
	(void *)&flashPhotoTrkBright,
	(void *)&flashPhotoTrkLength,
	(void *)&flashPixel_duration,
	(void *)&flashPixel_freq,
	(void *)&flashTrkBG_freq_1,
	(void *)&flashTrkBG_freq_2,
	(void *)&flashTrkBG_freq_3,
	(void *)&flashTrkCA_freq_0,
	(void *)&flashTrkCA_freq_1,
	(void *)&flashTrkCA_freq_2,
	(void *)&flashTrkCA_freq_3,
	(void *)&flashTrkPart_freq_0,
	(void *)&flashTrkPart_freq_1,
	(void *)&flashTrkPart_freq_2,
	(void *)&flashTrkPart_freq_3,
	(void *)&master_crop_width,
	(void *)&master_crop_x,
	(void *)&master_crop_y,
	(void *)&master_mask,
	(void *)&master_mask_offsetX,
	(void *)&master_mask_offsetY,
	(void *)&master_mask_opacity,
	(void *)&master_mask_scale,
	(void *)&master_mask_scale_ratio,
	(void *)&master_offsetX,
	(void *)&master_offsetY,
	(void *)&master_scale,
	(void *)&master_scale_pulse,
	(void *)&master_scale_ratio,
	(void *)&audioInput_weight,
	(void *)&beat_delay,
	(void *)&beat_threshold,
	(void *)&playing_soundtrackNo,
	(void *)&sound_env_max,
	(void *)&sound_env_min,
	(void *)&sound_min,
	(void *)&sound_volume,
	(void *)&soundtrack_PA_weight,
	(void *)&soundtrack_PD_weight,
	(void *)&camera_gamma,
	(void *)&camera_gamma_pulse,
	(void *)&cameraBrightness,
	(void *)&cameraCaptFreq,
	(void *)&cameraContrast,
	(void *)&cameraCumul,
	(void *)&cameraExposure,
	(void *)&cameraGain,
	(void *)&cameraGamma,
	(void *)&cameraNo,
	(void *)&cameraSaturation,
	(void *)&cameraSobel,
	(void *)&cameraSobel_pulse,
	(void *)&cameraThreshold,
	(void *)&cameraThreshold_pulse,
	(void *)&cameraWB_B,
	(void *)&cameraWB_R,
	(void *)&cameraWeight,
	(void *)&cameraWeight_pulse,
	(void *)&invertCamera,
	(void *)&clip_mix,
	(void *)&clip_nudge_factor,
	(void *)&clip_scratch_factor,
	(void *)&clipCaptFreq,
	(void *)&playing_clipNameLeft,
	(void *)&playing_clipNameRight,
	(void *)&playing_secondClipNameLeft,
	(void *)&playing_secondClipNameRight,
	(void *)&activeClipArts,
	(void *)&ClipArt_width,
	(void *)&ClipArt_width_pulse,
	(void *)&ClipArt_stroke_color_preset,
	(void *)&ClipArt_stroke_color_preset_pulse,
	(void *)&ClipArt_layer_1_color_preset,
	(void *)&ClipArt_layer_1_color_preset_pulse,
	(void *)&ClipArt_layer_2_color_preset,
	(void *)&ClipArt_layer_2_color_preset_pulse,
	(void *)&ClipArt_layer_3_color_preset,
	(void *)&ClipArt_layer_3_color_preset_pulse,
	(void *)&ClipArt_layer_4_color_preset,
	(void *)&ClipArt_layer_4_color_preset_pulse,
	(void *)&ClipArt_layer_5_color_preset,
	(void *)&ClipArt_layer_5_color_preset_pulse,
	(void *)&ClipArt_layer_6_color_preset,
	(void *)&ClipArt_layer_6_color_preset_pulse,
	(void *)&ClipArt_layer_7_color_preset,
	(void *)&ClipArt_layer_7_color_preset_pulse,
	(void *)&ClipArt_layer_8_color_preset,
	(void *)&ClipArt_layer_8_color_preset_pulse,
	(void *)&moving_messages,
	(void *)&invertMovie,
	(void *)&movie_gamma,
	(void *)&movie_gamma_pulse,
	(void *)&movie_loop,
	(void *)&movie_threshold,
	(void *)&movie_threshold_pulse,
	(void *)&movieCaptFreq,
	(void *)&movieSobel,
	(void *)&movieSobel_pulse,
	(void *)&movieWeight,
	(void *)&movieWeight_pulse,
	(void *)&playing_movieNo,
	(void *)&invertPhoto,
	(void *)&maskJitterAmpl,
	(void *)&photo_contrast,
	(void *)&photo_diaporama,
	(void *)&photo_diaporama_fade,
	(void *)&photo_diaporama_plateau,
	(void *)&photo_gamma,
	(void *)&photo_gamma_pulse,
	(void *)&photo_hue,
	(void *)&photo_hue_pulse,
	(void *)&photo_offsetX,
	(void *)&photo_offsetY,
	(void *)&photo_rot,
	(void *)&photo_satur,
	(void *)&photo_satur_pulse,
	(void *)&photo_scaleX,
	(void *)&photo_scaleY,
	(void *)&photo_threshold,
	(void *)&photo_threshold_pulse,
	(void *)&photo_transl_x,
	(void *)&photo_transl_y,
	(void *)&photo_value,
	(void *)&photo_value_pulse,
	(void *)&photoJitterAmpl,
	(void *)&photoSobel,
	(void *)&photoSobel_pulse,
	(void *)&photoWeight,
	(void *)&photoWeight_pulse,
	(void *)&video_contrast,
	(void *)&video_contrast_pulse,
	(void *)&video_gamma,
	(void *)&video_gamma_pulse,
	(void *)&video_hue,
	(void *)&video_hue_pulse,
	(void *)&video_satur,
	(void *)&video_satur_pulse,
	(void *)&video_threshold,
	(void *)&video_threshold_pulse,
	(void *)&video_value,
	(void *)&video_value_pulse,
	(void *)&video_white,
	(void *)&video_white_pulse,
	(void *)&noiseType,
	(void *)&noiseLineScale,
	(void *)&noiseAngleScale,
	(void *)&noiseCenterX,
	(void *)&noiseCenterY,
	(void *)&noiseParticleScale,
	(void *)&noiseParticleScale_pulse,
	(void *)&part_acc,
	(void *)&part_acc_pulse,
	(void *)&part_damp,
	(void *)&part_damp_pulse,
	(void *)&part_damp_targtRad,
	(void *)&part_field_weight,
	(void *)&part_field_weight_pulse,
	(void *)&part_gravity,
	(void *)&part_gravity_pulse,
	(void *)&part_image_acceleration,
	(void *)&part_initialization,
	(void *)&part_size,
	(void *)&part_size_pulse,
	(void *)&part_timeToTargt,
	(void *)&partColor_mode,
	(void *)&partExit_mode,
	(void *)&particle_type,
	(void *)&partMove_rand,
	(void *)&partMove_target,
	(void *)&partSplat_texture,
	(void *)&partStroke_mode,
	(void *)&pulsed_part_Hshift,
	(void *)&pulsed_part_Vshift,
	(void *)&tracksSync,
	(void *)&part_path_follow,
	(void *)&part_path_repop,
	(void *)&part_path_repulse,
	(void *)&path_group,
	(void *)&path_record,
	(void *)&path_replay_loop,
	(void *)&path_replay_speed,
	(void *)&path_replay_trackNo,
	(void *)&path_scaleX,
	(void *)&path_scaleY,
	(void *)&path_translX,
	(void *)&path_translY,
	(void *)&color_spectrum_coef,
	(void *)&pen_angle_pulse,
	(void *)&pen_brush,
	(void *)&pen_brush_replay,
	(void *)&pen_color,
	(void *)&pen_color_a,
	(void *)&pen_color_a_pulse,
	(void *)&pen_color_pulse,
	(void *)&pen_color_replay,
	(void *)&pen_color_replay_pulse,
	(void *)&pen_grey,
	(void *)&pen_grey_pulse,
	(void *)&pen_grey_replay,
	(void *)&pen_grey_replay_pulse,
	(void *)&pen_hue_replay,
	(void *)&pen_hue_replay_pulse,
	(void *)&pen_position_dash,
	(void *)&pen_position_pulse,
	(void *)&pen_radius,
	(void *)&pen_radius_angleHor_coef,
	(void *)&pen_radius_angleVer_coef,
	(void *)&pen_radius_pressure_coef,
	(void *)&pen_radius_pulse,
	(void *)&pen_radius_replay,
	(void *)&pen_radius_replay_pulse,
	(void *)&pen_saturation_replay,
	(void *)&pen_saturation_replay_pulse,
	(void *)&pen_value_replay,
	(void *)&pen_value_replay_pulse,
	(void *)&penStrokeAtBeat,
	(void *)&Pixelstep,
	(void *)&noiseUpdateScale,
	(void *)&noiseUpdateScale_pulse,
	(void *)&pixel_acc,
	(void *)&pixel_acc_pulse,
	(void *)&pixel_acc_shiftX,
	(void *)&pixel_acc_shiftX_pulse,
	(void *)&pixel_acc_shiftY,
	(void *)&pixel_acc_shiftY_pulse,
	(void *)&pixel_image_acceleration,
	(void *)&pixel_mode,
	(void *)&pixel_radius,
	(void *)&pixel_radius_pulse,
	(void *)&BG_CA_repop_color_mode,
	(void *)&BG_CA_repop_density,
	(void *)&Part_repop_color_mode,
	(void *)&Part_repop_density,
	(void *)&repop_BG,
	(void *)&repop_BG_pulse,
	(void *)&repop_CA_pulse,
	(void *)&repop_colorBG,
	(void *)&repop_colorBG_pulse,
	(void *)&repop_colorCA,
	(void *)&repop_colorCA_pulse,
	(void *)&repop_colorPart,
	(void *)&repop_colorPart_pulse,
	(void *)&repop_greyBG,
	(void *)&repop_greyBG_pulse,
	(void *)&repop_greyCA,
	(void *)&repop_greyCA_pulse,
	(void *)&repop_greyPart,
	(void *)&repop_greyPart_pulse,
	(void *)&repop_part,
	(void *)&repop_part_pulse,
	(void *)&repop_path,
	(void *)&repop_path_pulse,
	(void *)&script_1,
	(void *)&sensor_activation,
	(void *)&sensor_layout,
	(void *)&sensor_sample_setUp,
	(void *)&sensor_vol,
	(void *)&auto_beat,
	(void *)&auto_beat_duration,
	(void *)&auto_pulse,
	(void *)&camera_BG_subtr,
	(void *)&clearAllLayers,
	(void *)&clearCA,
	(void *)&clearLayer,
	(void *)&cursorSize,
	(void *)&freeze,
	(void *)&invertAllLayers,
	(void *)&master,
	(void *)&mute_second_screen,
	(void *)&reset_camera,
	(void *)&take_snapshots,
	(void *)&CAdecay,
	(void *)&CAdecay_pulse,
	(void *)&echo,
	(void *)&echo_pulse,
	(void *)&echoNeg,
	(void *)&echoNeg_pulse,
	(void *)&partDecay,
	(void *)&partDecay_pulse,
	(void *)&trkDecay_0,
	(void *)&trkDecay_0_pulse,
	(void *)&trkDecay_1,
	(void *)&trkDecay_1_pulse,
	(void *)&trkDecay_2,
	(void *)&trkDecay_2_pulse,
	(void *)&trkDecay_3,
	(void *)&trkDecay_3_pulse,
	(void *)&CAMasterWeight,
	(void *)&CAMasterWeight_pulse,
	(void *)&CAMixingWeight,
	(void *)&CAMixingWeight_pulse,
	(void *)&ClipArtMixingWeight,
	(void *)&ClipArtMixingWeight_pulse,
	(void *)&ClipArtMasterWeight,
	(void *)&ClipArtMasterWeight_pulse,
	(void *)&PartMasterWeight,
	(void *)&PartMasterWeight_pulse,
	(void *)&PartMixingWeight,
	(void *)&PartMixingWeight_pulse,
	(void *)&SecondMasterMixingWeight,
	(void *)&trackMasterWeight,
	(void *)&trackMasterWeight_pulse,
	(void *)&trackMixingWeight,
	(void *)&trackMixingWeight_pulse,
	(void *)&blurRadius_1,
	(void *)&blurRadius_2,
	(void *)&currentDrawingTrack,
	(void *)&currentMaskTrack,
	(void *)&currentPhotoTrack,
	(void *)&currentVideoTrack,
	(void *)&slow_track_translation,
	(void *)&track_x_transl_0,
	(void *)&track_x_transl_0_pulse,
	(void *)&track_x_transl_1,
	(void *)&track_x_transl_1_pulse,
	(void *)&track_y_transl_0,
	(void *)&track_y_transl_0_pulse,
	(void *)&track_y_transl_1,
	(void *)&track_y_transl_1_pulse,
};
void flashCameraTrkLength_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void flashCameraTrkLength_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	flashCameraTrkLength_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void flashPhotoTrkLength_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void flashPhotoTrkLength_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	flashPhotoTrkLength_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void audioInput_weight_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void audioInput_weight_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	audioInput_weight_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void beat_delay_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void beat_delay_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	beat_delay_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void beat_threshold_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void beat_threshold_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	beat_threshold_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void playing_soundtrackNo_callBack(pg_Parameter_Input_Type param_input_type, int scenario_or_gui_command_value);
void playing_soundtrackNo_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	playing_soundtrackNo_callBack(param_input_type, int(scenario_or_gui_command_value.val_num));
}
void sound_env_max_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void sound_env_max_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	sound_env_max_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void sound_env_min_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void sound_env_min_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	sound_env_min_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void soundtrack_PA_weight_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void soundtrack_PA_weight_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	soundtrack_PA_weight_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void soundtrack_PD_weight_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void soundtrack_PD_weight_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	soundtrack_PD_weight_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void cameraBrightness_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void cameraBrightness_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	cameraBrightness_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void cameraContrast_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void cameraContrast_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	cameraContrast_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void cameraExposure_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void cameraExposure_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	cameraExposure_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void cameraGain_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void cameraGain_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	cameraGain_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void cameraGamma_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void cameraGamma_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	cameraGamma_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void cameraNo_callBack(pg_Parameter_Input_Type param_input_type, int scenario_or_gui_command_value);
void cameraNo_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	cameraNo_callBack(param_input_type, int(scenario_or_gui_command_value.val_num));
}
void cameraSaturation_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void cameraSaturation_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	cameraSaturation_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void cameraWB_B_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void cameraWB_B_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	cameraWB_B_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void cameraWB_R_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void cameraWB_R_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	cameraWB_R_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void playing_clipNameLeft_callBack(pg_Parameter_Input_Type param_input_type, string scenario_or_gui_command_value);
void playing_clipNameLeft_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	playing_clipNameLeft_callBack(param_input_type, scenario_or_gui_command_value.val_string);
}
void playing_clipNameRight_callBack(pg_Parameter_Input_Type param_input_type, string scenario_or_gui_command_value);
void playing_clipNameRight_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	playing_clipNameRight_callBack(param_input_type, scenario_or_gui_command_value.val_string);
}
void playing_secondClipNameLeft_callBack(pg_Parameter_Input_Type param_input_type, string scenario_or_gui_command_value);
void playing_secondClipNameLeft_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	playing_secondClipNameLeft_callBack(param_input_type, scenario_or_gui_command_value.val_string);
}
void playing_secondClipNameRight_callBack(pg_Parameter_Input_Type param_input_type, string scenario_or_gui_command_value);
void playing_secondClipNameRight_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	playing_secondClipNameRight_callBack(param_input_type, scenario_or_gui_command_value.val_string);
}
void movieCaptFreq_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void movieCaptFreq_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	movieCaptFreq_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void playing_movieNo_callBack(pg_Parameter_Input_Type param_input_type, int scenario_or_gui_command_value);
void playing_movieNo_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	playing_movieNo_callBack(param_input_type, int(scenario_or_gui_command_value.val_num));
}
void photo_diaporama_callBack(pg_Parameter_Input_Type param_input_type, int scenario_or_gui_command_value);
void photo_diaporama_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	photo_diaporama_callBack(param_input_type, int(scenario_or_gui_command_value.val_num));
}
void part_initialization_callBack(pg_Parameter_Input_Type param_input_type, int scenario_or_gui_command_value);
void part_initialization_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	part_initialization_callBack(param_input_type, int(scenario_or_gui_command_value.val_num));
}
void partMove_rand_callBack(pg_Parameter_Input_Type param_input_type, bool scenario_or_gui_command_value);
void partMove_rand_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	partMove_rand_callBack(param_input_type, double_to_bool(scenario_or_gui_command_value.val_num));
}
void partMove_target_callBack(pg_Parameter_Input_Type param_input_type, bool scenario_or_gui_command_value);
void partMove_target_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	partMove_target_callBack(param_input_type, double_to_bool(scenario_or_gui_command_value.val_num));
}
void part_path_follow_callBack(int ind_path, pg_Parameter_Input_Type param_input_type, bool scenario_or_gui_command_value);
void part_path_follow_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	for (int index = 0; index < PG_NB_PATHS; index++) {;
		part_path_follow_callBack(index, param_input_type, bool(scenario_or_gui_command_value.val_array[index]));
	}
}
void part_path_repulse_callBack(int ind_path, pg_Parameter_Input_Type param_input_type, bool scenario_or_gui_command_value);
void part_path_repulse_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	for (int index = 0; index < PG_NB_PATHS; index++) {;
		part_path_repulse_callBack(index, param_input_type, bool(scenario_or_gui_command_value.val_array[index]));
	}
}
void path_group_callBack(pg_Parameter_Input_Type param_input_type, int scenario_or_gui_command_value);
void path_group_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	path_group_callBack(param_input_type, int(scenario_or_gui_command_value.val_num));
}
void path_record_callBack(int ind_path, pg_Parameter_Input_Type param_input_type, bool scenario_or_gui_command_value);
void path_record_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	for (int index = 1; index < PG_NB_PATHS; index++) {;
		path_record_callBack(index, param_input_type, bool(scenario_or_gui_command_value.val_array[index]));
	}
}
void path_replay_trackNo_callBack(int ind_path, pg_Parameter_Input_Type param_input_type, int scenario_or_gui_command_value);
void path_replay_trackNo_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	for (int index = 1; index < PG_NB_PATHS; index++) {;
		path_replay_trackNo_callBack(index, param_input_type, int(scenario_or_gui_command_value.val_array[index]));
	}
}
void pen_brush_callBack(pg_Parameter_Input_Type param_input_type, int scenario_or_gui_command_value);
void pen_brush_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	pen_brush_callBack(param_input_type, int(scenario_or_gui_command_value.val_num));
}
void pen_color_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void pen_color_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	pen_color_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void script_1_callBack(pg_Parameter_Input_Type param_input_type, string scenario_or_gui_command_value);
void script_1_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	script_1_callBack(param_input_type, scenario_or_gui_command_value.val_string);
}
void sensor_activation_callBack(pg_Parameter_Input_Type param_input_type, int scenario_or_gui_command_value);
void sensor_activation_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	sensor_activation_callBack(param_input_type, int(scenario_or_gui_command_value.val_num));
}
void sensor_layout_callBack(pg_Parameter_Input_Type param_input_type, int scenario_or_gui_command_value);
void sensor_layout_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	sensor_layout_callBack(param_input_type, int(scenario_or_gui_command_value.val_num));
}
void sensor_sample_setUp_callBack(pg_Parameter_Input_Type param_input_type, float scenario_or_gui_command_value);
void sensor_sample_setUp_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	sensor_sample_setUp_callBack(param_input_type, float(scenario_or_gui_command_value.val_num));
}
void auto_beat_callBack(pg_Parameter_Input_Type param_input_type, bool scenario_or_gui_command_value);
void auto_beat_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	auto_beat_callBack(param_input_type, double_to_bool(scenario_or_gui_command_value.val_num));
}
void auto_pulse_callBack(pg_Parameter_Input_Type param_input_type, bool scenario_or_gui_command_value);
void auto_pulse_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	auto_pulse_callBack(param_input_type, double_to_bool(scenario_or_gui_command_value.val_num));
}
void clearAllLayers_callBack(pg_Parameter_Input_Type param_input_type, bool scenario_or_gui_command_value);
void clearAllLayers_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	clearAllLayers_callBack(param_input_type, double_to_bool(scenario_or_gui_command_value.val_num));
}
void clearCA_callBack(pg_Parameter_Input_Type param_input_type, bool scenario_or_gui_command_value);
void clearCA_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	clearCA_callBack(param_input_type, double_to_bool(scenario_or_gui_command_value.val_num));
}
void clearLayer_callBack(pg_Parameter_Input_Type param_input_type, bool scenario_or_gui_command_value);
void clearLayer_callBack_generic(pg_Parameter_Input_Type param_input_type, ScenarioValue scenario_or_gui_command_value) {
	clearLayer_callBack(param_input_type, double_to_bool(scenario_or_gui_command_value.val_num));
}
void (*ScenarioVarCallbacks[_MaxInterpVarIDs])(pg_Parameter_Input_Type, ScenarioValue) = { 
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&flashCameraTrkLength_callBack_generic,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&flashPhotoTrkLength_callBack_generic,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&audioInput_weight_callBack_generic,
	&beat_delay_callBack_generic,
	&beat_threshold_callBack_generic,
	&playing_soundtrackNo_callBack_generic,
	&sound_env_max_callBack_generic,
	&sound_env_min_callBack_generic,
	NULL,
	NULL,
	&soundtrack_PA_weight_callBack_generic,
	&soundtrack_PD_weight_callBack_generic,
	NULL,
	NULL,
	&cameraBrightness_callBack_generic,
	NULL,
	&cameraContrast_callBack_generic,
	NULL,
	&cameraExposure_callBack_generic,
	&cameraGain_callBack_generic,
	&cameraGamma_callBack_generic,
	&cameraNo_callBack_generic,
	&cameraSaturation_callBack_generic,
	NULL,
	NULL,
	NULL,
	NULL,
	&cameraWB_B_callBack_generic,
	&cameraWB_R_callBack_generic,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&playing_clipNameLeft_callBack_generic,
	&playing_clipNameRight_callBack_generic,
	&playing_secondClipNameLeft_callBack_generic,
	&playing_secondClipNameRight_callBack_generic,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&movieCaptFreq_callBack_generic,
	NULL,
	NULL,
	NULL,
	NULL,
	&playing_movieNo_callBack_generic,
	NULL,
	NULL,
	NULL,
	&photo_diaporama_callBack_generic,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&part_initialization_callBack_generic,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&partMove_rand_callBack_generic,
	&partMove_target_callBack_generic,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&part_path_follow_callBack_generic,
	NULL,
	&part_path_repulse_callBack_generic,
	&path_group_callBack_generic,
	&path_record_callBack_generic,
	NULL,
	NULL,
	&path_replay_trackNo_callBack_generic,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&pen_brush_callBack_generic,
	NULL,
	&pen_color_callBack_generic,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	&script_1_callBack_generic,
	&sensor_activation_callBack_generic,
	&sensor_layout_callBack_generic,
	&sensor_sample_setUp_callBack_generic,
	NULL,
	&auto_beat_callBack_generic,
	NULL,
	&auto_pulse_callBack_generic,
	NULL,
	&clearAllLayers_callBack_generic,
	&clearCA_callBack_generic,
	&clearLayer_callBack_generic,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
};
char *ScenarioVarMessages[_MaxInterpVarIDs] = { 
  (char *)"CA1_CA2_weight",
  (char *)"CA1SubType",
  (char *)"CA1Type",
  (char *)"CA2SubType",
  (char *)"CA2Type",
  (char *)"CAcolorSpread",
  (char *)"CAParams",
  (char *)"CAParams_pulse",
  (char *)"CAstep",
  (char *)"repop_CA",
  (char *)"flashCABG_freq",
  (char *)"flashCameraTrkBeat",
  (char *)"flashCameraTrkBright",
  (char *)"flashCameraTrkLength",
  (char *)"flashCAPart_freq",
  (char *)"flashPartBG_freq",
  (char *)"flashPartCA_freq",
  (char *)"flashParticleInit_freq",
  (char *)"flashPhotoChangeBeat",
  (char *)"flashPhotoTrkBeat",
  (char *)"flashPhotoTrkBright",
  (char *)"flashPhotoTrkLength",
  (char *)"flashPixel_duration",
  (char *)"flashPixel_freq",
  (char *)"flashTrkBG_freq_1",
  (char *)"flashTrkBG_freq_2",
  (char *)"flashTrkBG_freq_3",
  (char *)"flashTrkCA_freq_0",
  (char *)"flashTrkCA_freq_1",
  (char *)"flashTrkCA_freq_2",
  (char *)"flashTrkCA_freq_3",
  (char *)"flashTrkPart_freq_0",
  (char *)"flashTrkPart_freq_1",
  (char *)"flashTrkPart_freq_2",
  (char *)"flashTrkPart_freq_3",
  (char *)"master_crop_width",
  (char *)"master_crop_x",
  (char *)"master_crop_y",
  (char *)"master_mask",
  (char *)"master_mask_offsetX",
  (char *)"master_mask_offsetY",
  (char *)"master_mask_opacity",
  (char *)"master_mask_scale",
  (char *)"master_mask_scale_ratio",
  (char *)"master_offsetX",
  (char *)"master_offsetY",
  (char *)"master_scale",
  (char *)"master_scale_pulse",
  (char *)"master_scale_ratio",
  (char *)"audioInput_weight",
  (char *)"beat_delay",
  (char *)"beat_threshold",
  (char *)"playing_soundtrackNo",
  (char *)"sound_env_max",
  (char *)"sound_env_min",
  (char *)"sound_min",
  (char *)"sound_volume",
  (char *)"soundtrack_PA_weight",
  (char *)"soundtrack_PD_weight",
  (char *)"camera_gamma",
  (char *)"camera_gamma_pulse",
  (char *)"cameraBrightness",
  (char *)"cameraCaptFreq",
  (char *)"cameraContrast",
  (char *)"cameraCumul",
  (char *)"cameraExposure",
  (char *)"cameraGain",
  (char *)"cameraGamma",
  (char *)"cameraNo",
  (char *)"cameraSaturation",
  (char *)"cameraSobel",
  (char *)"cameraSobel_pulse",
  (char *)"cameraThreshold",
  (char *)"cameraThreshold_pulse",
  (char *)"cameraWB_B",
  (char *)"cameraWB_R",
  (char *)"cameraWeight",
  (char *)"cameraWeight_pulse",
  (char *)"invertCamera",
  (char *)"clip_mix",
  (char *)"clip_nudge_factor",
  (char *)"clip_scratch_factor",
  (char *)"clipCaptFreq",
  (char *)"playing_clipNameLeft",
  (char *)"playing_clipNameRight",
  (char *)"playing_secondClipNameLeft",
  (char *)"playing_secondClipNameRight",
  (char *)"activeClipArts",
  (char *)"ClipArt_width",
  (char *)"ClipArt_width_pulse",
  (char *)"ClipArt_stroke_color_preset",
  (char *)"ClipArt_stroke_color_preset_pulse",
  (char *)"ClipArt_layer_1_color_preset",
  (char *)"ClipArt_layer_1_color_preset_pulse",
  (char *)"ClipArt_layer_2_color_preset",
  (char *)"ClipArt_layer_2_color_preset_pulse",
  (char *)"ClipArt_layer_3_color_preset",
  (char *)"ClipArt_layer_3_color_preset_pulse",
  (char *)"ClipArt_layer_4_color_preset",
  (char *)"ClipArt_layer_4_color_preset_pulse",
  (char *)"ClipArt_layer_5_color_preset",
  (char *)"ClipArt_layer_5_color_preset_pulse",
  (char *)"ClipArt_layer_6_color_preset",
  (char *)"ClipArt_layer_6_color_preset_pulse",
  (char *)"ClipArt_layer_7_color_preset",
  (char *)"ClipArt_layer_7_color_preset_pulse",
  (char *)"ClipArt_layer_8_color_preset",
  (char *)"ClipArt_layer_8_color_preset_pulse",
  (char *)"moving_messages",
  (char *)"invertMovie",
  (char *)"movie_gamma",
  (char *)"movie_gamma_pulse",
  (char *)"movie_loop",
  (char *)"movie_threshold",
  (char *)"movie_threshold_pulse",
  (char *)"movieCaptFreq",
  (char *)"movieSobel",
  (char *)"movieSobel_pulse",
  (char *)"movieWeight",
  (char *)"movieWeight_pulse",
  (char *)"playing_movieNo",
  (char *)"invertPhoto",
  (char *)"maskJitterAmpl",
  (char *)"photo_contrast",
  (char *)"photo_diaporama",
  (char *)"photo_diaporama_fade",
  (char *)"photo_diaporama_plateau",
  (char *)"photo_gamma",
  (char *)"photo_gamma_pulse",
  (char *)"photo_hue",
  (char *)"photo_hue_pulse",
  (char *)"photo_offsetX",
  (char *)"photo_offsetY",
  (char *)"photo_rot",
  (char *)"photo_satur",
  (char *)"photo_satur_pulse",
  (char *)"photo_scaleX",
  (char *)"photo_scaleY",
  (char *)"photo_threshold",
  (char *)"photo_threshold_pulse",
  (char *)"photo_transl_x",
  (char *)"photo_transl_y",
  (char *)"photo_value",
  (char *)"photo_value_pulse",
  (char *)"photoJitterAmpl",
  (char *)"photoSobel",
  (char *)"photoSobel_pulse",
  (char *)"photoWeight",
  (char *)"photoWeight_pulse",
  (char *)"video_contrast",
  (char *)"video_contrast_pulse",
  (char *)"video_gamma",
  (char *)"video_gamma_pulse",
  (char *)"video_hue",
  (char *)"video_hue_pulse",
  (char *)"video_satur",
  (char *)"video_satur_pulse",
  (char *)"video_threshold",
  (char *)"video_threshold_pulse",
  (char *)"video_value",
  (char *)"video_value_pulse",
  (char *)"video_white",
  (char *)"video_white_pulse",
  (char *)"noiseType",
  (char *)"noiseLineScale",
  (char *)"noiseAngleScale",
  (char *)"noiseCenterX",
  (char *)"noiseCenterY",
  (char *)"noiseParticleScale",
  (char *)"noiseParticleScale_pulse",
  (char *)"part_acc",
  (char *)"part_acc_pulse",
  (char *)"part_damp",
  (char *)"part_damp_pulse",
  (char *)"part_damp_targtRad",
  (char *)"part_field_weight",
  (char *)"part_field_weight_pulse",
  (char *)"part_gravity",
  (char *)"part_gravity_pulse",
  (char *)"part_image_acceleration",
  (char *)"part_initialization",
  (char *)"part_size",
  (char *)"part_size_pulse",
  (char *)"part_timeToTargt",
  (char *)"partColor_mode",
  (char *)"partExit_mode",
  (char *)"particle_type",
  (char *)"partMove_rand",
  (char *)"partMove_target",
  (char *)"partSplat_texture",
  (char *)"partStroke_mode",
  (char *)"pulsed_part_Hshift",
  (char *)"pulsed_part_Vshift",
  (char *)"tracksSync",
  (char *)"part_path_follow",
  (char *)"part_path_repop",
  (char *)"part_path_repulse",
  (char *)"path_group",
  (char *)"path_record",
  (char *)"path_replay_loop",
  (char *)"path_replay_speed",
  (char *)"path_replay_trackNo",
  (char *)"path_scaleX",
  (char *)"path_scaleY",
  (char *)"path_translX",
  (char *)"path_translY",
  (char *)"color_spectrum_coef",
  (char *)"pen_angle_pulse",
  (char *)"pen_brush",
  (char *)"pen_brush_replay",
  (char *)"pen_color",
  (char *)"pen_color_a",
  (char *)"pen_color_a_pulse",
  (char *)"pen_color_pulse",
  (char *)"pen_color_replay",
  (char *)"pen_color_replay_pulse",
  (char *)"pen_grey",
  (char *)"pen_grey_pulse",
  (char *)"pen_grey_replay",
  (char *)"pen_grey_replay_pulse",
  (char *)"pen_hue_replay",
  (char *)"pen_hue_replay_pulse",
  (char *)"pen_position_dash",
  (char *)"pen_position_pulse",
  (char *)"pen_radius",
  (char *)"pen_radius_angleHor_coef",
  (char *)"pen_radius_angleVer_coef",
  (char *)"pen_radius_pressure_coef",
  (char *)"pen_radius_pulse",
  (char *)"pen_radius_replay",
  (char *)"pen_radius_replay_pulse",
  (char *)"pen_saturation_replay",
  (char *)"pen_saturation_replay_pulse",
  (char *)"pen_value_replay",
  (char *)"pen_value_replay_pulse",
  (char *)"penStrokeAtBeat",
  (char *)"Pixelstep",
  (char *)"noiseUpdateScale",
  (char *)"noiseUpdateScale_pulse",
  (char *)"pixel_acc",
  (char *)"pixel_acc_pulse",
  (char *)"pixel_acc_shiftX",
  (char *)"pixel_acc_shiftX_pulse",
  (char *)"pixel_acc_shiftY",
  (char *)"pixel_acc_shiftY_pulse",
  (char *)"pixel_image_acceleration",
  (char *)"pixel_mode",
  (char *)"pixel_radius",
  (char *)"pixel_radius_pulse",
  (char *)"BG_CA_repop_color_mode",
  (char *)"BG_CA_repop_density",
  (char *)"Part_repop_color_mode",
  (char *)"Part_repop_density",
  (char *)"repop_BG",
  (char *)"repop_BG_pulse",
  (char *)"repop_CA_pulse",
  (char *)"repop_colorBG",
  (char *)"repop_colorBG_pulse",
  (char *)"repop_colorCA",
  (char *)"repop_colorCA_pulse",
  (char *)"repop_colorPart",
  (char *)"repop_colorPart_pulse",
  (char *)"repop_greyBG",
  (char *)"repop_greyBG_pulse",
  (char *)"repop_greyCA",
  (char *)"repop_greyCA_pulse",
  (char *)"repop_greyPart",
  (char *)"repop_greyPart_pulse",
  (char *)"repop_part",
  (char *)"repop_part_pulse",
  (char *)"repop_path",
  (char *)"repop_path_pulse",
  (char *)"script_1",
  (char *)"sensor_activation",
  (char *)"sensor_layout",
  (char *)"sensor_sample_setUp",
  (char *)"sensor_vol",
  (char *)"auto_beat",
  (char *)"auto_beat_duration",
  (char *)"auto_pulse",
  (char *)"camera_BG_subtr",
  (char *)"clearAllLayers",
  (char *)"clearCA",
  (char *)"clearLayer",
  (char *)"cursorSize",
  (char *)"freeze",
  (char *)"invertAllLayers",
  (char *)"master",
  (char *)"mute_second_screen",
  (char *)"reset_camera",
  (char *)"take_snapshots",
  (char *)"CAdecay",
  (char *)"CAdecay_pulse",
  (char *)"echo",
  (char *)"echo_pulse",
  (char *)"echoNeg",
  (char *)"echoNeg_pulse",
  (char *)"partDecay",
  (char *)"partDecay_pulse",
  (char *)"trkDecay_0",
  (char *)"trkDecay_0_pulse",
  (char *)"trkDecay_1",
  (char *)"trkDecay_1_pulse",
  (char *)"trkDecay_2",
  (char *)"trkDecay_2_pulse",
  (char *)"trkDecay_3",
  (char *)"trkDecay_3_pulse",
  (char *)"CAMasterWeight",
  (char *)"CAMasterWeight_pulse",
  (char *)"CAMixingWeight",
  (char *)"CAMixingWeight_pulse",
  (char *)"ClipArtMixingWeight",
  (char *)"ClipArtMixingWeight_pulse",
  (char *)"ClipArtMasterWeight",
  (char *)"ClipArtMasterWeight_pulse",
  (char *)"PartMasterWeight",
  (char *)"PartMasterWeight_pulse",
  (char *)"PartMixingWeight",
  (char *)"PartMixingWeight_pulse",
  (char *)"SecondMasterMixingWeight",
  (char *)"trackMasterWeight",
  (char *)"trackMasterWeight_pulse",
  (char *)"trackMixingWeight",
  (char *)"trackMixingWeight_pulse",
  (char *)"blurRadius_1",
  (char *)"blurRadius_2",
  (char *)"currentDrawingTrack",
  (char *)"currentMaskTrack",
  (char *)"currentPhotoTrack",
  (char *)"currentVideoTrack",
  (char *)"slow_track_translation",
  (char *)"track_x_transl_0",
  (char *)"track_x_transl_0_pulse",
  (char *)"track_x_transl_1",
  (char *)"track_x_transl_1_pulse",
  (char *)"track_y_transl_0",
  (char *)"track_y_transl_0_pulse",
  (char *)"track_y_transl_1",
  (char *)"track_y_transl_1_pulse",
};
PulseTypes ScenarioVarPulse[_MaxInterpVarIDs] = {   _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_special,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_uniform,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_absolute,
  _pg_pulsed_none,
  _pg_pulsed_uniform,
  _pg_pulsed_none,
  _pg_pulsed_uniform,
  _pg_pulsed_none,
  _pg_pulsed_uniform,
  _pg_pulsed_none,
  _pg_pulsed_uniform,
  _pg_pulsed_none,
  _pg_pulsed_uniform,
  _pg_pulsed_none,
  _pg_pulsed_uniform,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_uniform,
  _pg_pulsed_none,
  _pg_pulsed_uniform,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_none,
  _pg_pulsed_differential,
  _pg_pulsed_none,
  _pg_pulsed_differential,
  _pg_pulsed_none,
  _pg_pulsed_differential,
  _pg_pulsed_none,
  _pg_pulsed_differential,
  _pg_pulsed_none,
};
char *ScenarioVarStrings[_MaxInterpVarIDs] = { 
  (char *)"CA1_CA2_weight",
  (char *)"CA1SubType",
  (char *)"CA1Type",
  (char *)"CA2SubType",
  (char *)"CA2Type",
  (char *)"CAcolorSpread",
  (char *)"CAParams",
  (char *)"CAParams_pulse",
  (char *)"CAstep",
  (char *)"repop_CA",
  (char *)"flashCABG_freq",
  (char *)"flashCameraTrkBeat",
  (char *)"flashCameraTrkBright",
  (char *)"flashCameraTrkLength",
  (char *)"flashCAPart_freq",
  (char *)"flashPartBG_freq",
  (char *)"flashPartCA_freq",
  (char *)"flashParticleInit_freq",
  (char *)"flashPhotoChangeBeat",
  (char *)"flashPhotoTrkBeat",
  (char *)"flashPhotoTrkBright",
  (char *)"flashPhotoTrkLength",
  (char *)"flashPixel_duration",
  (char *)"flashPixel_freq",
  (char *)"flashTrkBG_freq_1",
  (char *)"flashTrkBG_freq_2",
  (char *)"flashTrkBG_freq_3",
  (char *)"flashTrkCA_freq_0",
  (char *)"flashTrkCA_freq_1",
  (char *)"flashTrkCA_freq_2",
  (char *)"flashTrkCA_freq_3",
  (char *)"flashTrkPart_freq_0",
  (char *)"flashTrkPart_freq_1",
  (char *)"flashTrkPart_freq_2",
  (char *)"flashTrkPart_freq_3",
  (char *)"master_crop_width",
  (char *)"master_crop_x",
  (char *)"master_crop_y",
  (char *)"master_mask",
  (char *)"master_mask_offsetX",
  (char *)"master_mask_offsetY",
  (char *)"master_mask_opacity",
  (char *)"master_mask_scale",
  (char *)"master_mask_scale_ratio",
  (char *)"master_offsetX",
  (char *)"master_offsetY",
  (char *)"master_scale",
  (char *)"master_scale_pulse",
  (char *)"master_scale_ratio",
  (char *)"audioInput_weight",
  (char *)"beat_delay",
  (char *)"beat_threshold",
  (char *)"playing_soundtrackNo",
  (char *)"sound_env_max",
  (char *)"sound_env_min",
  (char *)"sound_min",
  (char *)"sound_volume",
  (char *)"soundtrack_PA_weight",
  (char *)"soundtrack_PD_weight",
  (char *)"camera_gamma",
  (char *)"camera_gamma_pulse",
  (char *)"cameraBrightness",
  (char *)"cameraCaptFreq",
  (char *)"cameraContrast",
  (char *)"cameraCumul",
  (char *)"cameraExposure",
  (char *)"cameraGain",
  (char *)"cameraGamma",
  (char *)"cameraNo",
  (char *)"cameraSaturation",
  (char *)"cameraSobel",
  (char *)"cameraSobel_pulse",
  (char *)"cameraThreshold",
  (char *)"cameraThreshold_pulse",
  (char *)"cameraWB_B",
  (char *)"cameraWB_R",
  (char *)"cameraWeight",
  (char *)"cameraWeight_pulse",
  (char *)"invertCamera",
  (char *)"clip_mix",
  (char *)"clip_nudge_factor",
  (char *)"clip_scratch_factor",
  (char *)"clipCaptFreq",
  (char *)"playing_clipNameLeft",
  (char *)"playing_clipNameRight",
  (char *)"playing_secondClipNameLeft",
  (char *)"playing_secondClipNameRight",
  (char *)"activeClipArts",
  (char *)"ClipArt_width",
  (char *)"ClipArt_width_pulse",
  (char *)"ClipArt_stroke_color_preset",
  (char *)"ClipArt_stroke_color_preset_pulse",
  (char *)"ClipArt_layer_1_color_preset",
  (char *)"ClipArt_layer_1_color_preset_pulse",
  (char *)"ClipArt_layer_2_color_preset",
  (char *)"ClipArt_layer_2_color_preset_pulse",
  (char *)"ClipArt_layer_3_color_preset",
  (char *)"ClipArt_layer_3_color_preset_pulse",
  (char *)"ClipArt_layer_4_color_preset",
  (char *)"ClipArt_layer_4_color_preset_pulse",
  (char *)"ClipArt_layer_5_color_preset",
  (char *)"ClipArt_layer_5_color_preset_pulse",
  (char *)"ClipArt_layer_6_color_preset",
  (char *)"ClipArt_layer_6_color_preset_pulse",
  (char *)"ClipArt_layer_7_color_preset",
  (char *)"ClipArt_layer_7_color_preset_pulse",
  (char *)"ClipArt_layer_8_color_preset",
  (char *)"ClipArt_layer_8_color_preset_pulse",
  (char *)"moving_messages",
  (char *)"invertMovie",
  (char *)"movie_gamma",
  (char *)"movie_gamma_pulse",
  (char *)"movie_loop",
  (char *)"movie_threshold",
  (char *)"movie_threshold_pulse",
  (char *)"movieCaptFreq",
  (char *)"movieSobel",
  (char *)"movieSobel_pulse",
  (char *)"movieWeight",
  (char *)"movieWeight_pulse",
  (char *)"playing_movieNo",
  (char *)"invertPhoto",
  (char *)"maskJitterAmpl",
  (char *)"photo_contrast",
  (char *)"photo_diaporama",
  (char *)"photo_diaporama_fade",
  (char *)"photo_diaporama_plateau",
  (char *)"photo_gamma",
  (char *)"photo_gamma_pulse",
  (char *)"photo_hue",
  (char *)"photo_hue_pulse",
  (char *)"photo_offsetX",
  (char *)"photo_offsetY",
  (char *)"photo_rot",
  (char *)"photo_satur",
  (char *)"photo_satur_pulse",
  (char *)"photo_scaleX",
  (char *)"photo_scaleY",
  (char *)"photo_threshold",
  (char *)"photo_threshold_pulse",
  (char *)"photo_transl_x",
  (char *)"photo_transl_y",
  (char *)"photo_value",
  (char *)"photo_value_pulse",
  (char *)"photoJitterAmpl",
  (char *)"photoSobel",
  (char *)"photoSobel_pulse",
  (char *)"photoWeight",
  (char *)"photoWeight_pulse",
  (char *)"video_contrast",
  (char *)"video_contrast_pulse",
  (char *)"video_gamma",
  (char *)"video_gamma_pulse",
  (char *)"video_hue",
  (char *)"video_hue_pulse",
  (char *)"video_satur",
  (char *)"video_satur_pulse",
  (char *)"video_threshold",
  (char *)"video_threshold_pulse",
  (char *)"video_value",
  (char *)"video_value_pulse",
  (char *)"video_white",
  (char *)"video_white_pulse",
  (char *)"noiseType",
  (char *)"noiseLineScale",
  (char *)"noiseAngleScale",
  (char *)"noiseCenterX",
  (char *)"noiseCenterY",
  (char *)"noiseParticleScale",
  (char *)"noiseParticleScale_pulse",
  (char *)"part_acc",
  (char *)"part_acc_pulse",
  (char *)"part_damp",
  (char *)"part_damp_pulse",
  (char *)"part_damp_targtRad",
  (char *)"part_field_weight",
  (char *)"part_field_weight_pulse",
  (char *)"part_gravity",
  (char *)"part_gravity_pulse",
  (char *)"part_image_acceleration",
  (char *)"part_initialization",
  (char *)"part_size",
  (char *)"part_size_pulse",
  (char *)"part_timeToTargt",
  (char *)"partColor_mode",
  (char *)"partExit_mode",
  (char *)"particle_type",
  (char *)"partMove_rand",
  (char *)"partMove_target",
  (char *)"partSplat_texture",
  (char *)"partStroke_mode",
  (char *)"pulsed_part_Hshift",
  (char *)"pulsed_part_Vshift",
  (char *)"tracksSync",
  (char *)"part_path_follow",
  (char *)"part_path_repop",
  (char *)"part_path_repulse",
  (char *)"path_group",
  (char *)"path_record",
  (char *)"path_replay_loop",
  (char *)"path_replay_speed",
  (char *)"path_replay_trackNo",
  (char *)"path_scaleX",
  (char *)"path_scaleY",
  (char *)"path_translX",
  (char *)"path_translY",
  (char *)"color_spectrum_coef",
  (char *)"pen_angle_pulse",
  (char *)"pen_brush",
  (char *)"pen_brush_replay",
  (char *)"pen_color",
  (char *)"pen_color_a",
  (char *)"pen_color_a_pulse",
  (char *)"pen_color_pulse",
  (char *)"pen_color_replay",
  (char *)"pen_color_replay_pulse",
  (char *)"pen_grey",
  (char *)"pen_grey_pulse",
  (char *)"pen_grey_replay",
  (char *)"pen_grey_replay_pulse",
  (char *)"pen_hue_replay",
  (char *)"pen_hue_replay_pulse",
  (char *)"pen_position_dash",
  (char *)"pen_position_pulse",
  (char *)"pen_radius",
  (char *)"pen_radius_angleHor_coef",
  (char *)"pen_radius_angleVer_coef",
  (char *)"pen_radius_pressure_coef",
  (char *)"pen_radius_pulse",
  (char *)"pen_radius_replay",
  (char *)"pen_radius_replay_pulse",
  (char *)"pen_saturation_replay",
  (char *)"pen_saturation_replay_pulse",
  (char *)"pen_value_replay",
  (char *)"pen_value_replay_pulse",
  (char *)"penStrokeAtBeat",
  (char *)"Pixelstep",
  (char *)"noiseUpdateScale",
  (char *)"noiseUpdateScale_pulse",
  (char *)"pixel_acc",
  (char *)"pixel_acc_pulse",
  (char *)"pixel_acc_shiftX",
  (char *)"pixel_acc_shiftX_pulse",
  (char *)"pixel_acc_shiftY",
  (char *)"pixel_acc_shiftY_pulse",
  (char *)"pixel_image_acceleration",
  (char *)"pixel_mode",
  (char *)"pixel_radius",
  (char *)"pixel_radius_pulse",
  (char *)"BG_CA_repop_color_mode",
  (char *)"BG_CA_repop_density",
  (char *)"Part_repop_color_mode",
  (char *)"Part_repop_density",
  (char *)"repop_BG",
  (char *)"repop_BG_pulse",
  (char *)"repop_CA_pulse",
  (char *)"repop_colorBG",
  (char *)"repop_colorBG_pulse",
  (char *)"repop_colorCA",
  (char *)"repop_colorCA_pulse",
  (char *)"repop_colorPart",
  (char *)"repop_colorPart_pulse",
  (char *)"repop_greyBG",
  (char *)"repop_greyBG_pulse",
  (char *)"repop_greyCA",
  (char *)"repop_greyCA_pulse",
  (char *)"repop_greyPart",
  (char *)"repop_greyPart_pulse",
  (char *)"repop_part",
  (char *)"repop_part_pulse",
  (char *)"repop_path",
  (char *)"repop_path_pulse",
  (char *)"script_1",
  (char *)"sensor_activation",
  (char *)"sensor_layout",
  (char *)"sensor_sample_setUp",
  (char *)"sensor_vol",
  (char *)"auto_beat",
  (char *)"auto_beat_duration",
  (char *)"auto_pulse",
  (char *)"camera_BG_subtr",
  (char *)"clearAllLayers",
  (char *)"clearCA",
  (char *)"clearLayer",
  (char *)"cursorSize",
  (char *)"freeze",
  (char *)"invertAllLayers",
  (char *)"master",
  (char *)"mute_second_screen",
  (char *)"reset_camera",
  (char *)"take_snapshots",
  (char *)"CAdecay",
  (char *)"CAdecay_pulse",
  (char *)"echo",
  (char *)"echo_pulse",
  (char *)"echoNeg",
  (char *)"echoNeg_pulse",
  (char *)"partDecay",
  (char *)"partDecay_pulse",
  (char *)"trkDecay_0",
  (char *)"trkDecay_0_pulse",
  (char *)"trkDecay_1",
  (char *)"trkDecay_1_pulse",
  (char *)"trkDecay_2",
  (char *)"trkDecay_2_pulse",
  (char *)"trkDecay_3",
  (char *)"trkDecay_3_pulse",
  (char *)"CAMasterWeight",
  (char *)"CAMasterWeight_pulse",
  (char *)"CAMixingWeight",
  (char *)"CAMixingWeight_pulse",
  (char *)"ClipArtMixingWeight",
  (char *)"ClipArtMixingWeight_pulse",
  (char *)"ClipArtMasterWeight",
  (char *)"ClipArtMasterWeight_pulse",
  (char *)"PartMasterWeight",
  (char *)"PartMasterWeight_pulse",
  (char *)"PartMixingWeight",
  (char *)"PartMixingWeight_pulse",
  (char *)"SecondMasterMixingWeight",
  (char *)"trackMasterWeight",
  (char *)"trackMasterWeight_pulse",
  (char *)"trackMixingWeight",
  (char *)"trackMixingWeight_pulse",
  (char *)"blurRadius_1",
  (char *)"blurRadius_2",
  (char *)"currentDrawingTrack",
  (char *)"currentMaskTrack",
  (char *)"currentPhotoTrack",
  (char *)"currentVideoTrack",
  (char *)"slow_track_translation",
  (char *)"track_x_transl_0",
  (char *)"track_x_transl_0_pulse",
  (char *)"track_x_transl_1",
  (char *)"track_x_transl_1_pulse",
  (char *)"track_y_transl_0",
  (char *)"track_y_transl_0_pulse",
  (char *)"track_y_transl_1",
  (char *)"track_y_transl_1_pulse",
};
