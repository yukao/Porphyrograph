/*! \file pg-conf.cpp
 *
 * 
 * 
 *     File pg-conf.cpp
 * 
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free
 * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 */
#include "pg-all_include.h"

/*! \name Group constants
 *  \brief Enumerated constants
 */
// \{

const char *pg_UDPMessageFormatString[pg_enum_Empty_UDPMessageFormat + 1] = { "Plain" , "OSC" , "Empty_UDPMessageFormat" };

/////////////////////////////////////////////////////
// global variable for screenshot file name
/////////////////////////////////////////////////////

vector<Scene>			 pg_Scenario[PG_MAX_SCENARIOS];
						// table of PG_MAX_SCENARIOS booleans tables indicating whether a var (from the full scenario) 
						// is active for the current configuration and scenario
bool					 pg_FullScenarioActiveVars[PG_MAX_SCENARIOS][_MaxInterpVarIDs] = { {false} };

string					 pg_csv_file_name;
string					 pg_snapshots_dir_path_prefix;
string					 pg_snapshots_dir_path_name;

pg_WindowData              *pg_Window;

// PNG capture
pg_Png_Capture pg_Png_Capture_param;

// JPG capture
pg_Jpg_Capture pg_Jpg_Capture_param;

// SVG path capture
pg_Svg_Capture pg_Svg_Capture_param;

// VIDEO capture
pg_Video_Capture pg_Video_Capture_param;

// UDP servers and clients
vector<pg_IPServer>     pg_IP_Servers;
vector<pg_IPClient>     pg_IP_Clients;

// nb configuration and scenario files
string *pg_ScenarioFileNames = NULL;

// shader file names
string  ** pg_Shader_File_Names;
GLenum *** pg_Shader_Stages;
int     ** pg_Shader_nbStages;

// BACKGROUND COLOR
float pg_BGcolorRed_prec;
float pg_BGcolorGreen_prec;
float pg_BGcolorBlue_prec;

// TEXTURES
// number of Texture files
vector<pg_TextureData> pg_Textures[PG_MAX_SCENARIOS];
pg_TextureData pg_texDataScreenFont;

// ++++++++++++++++++++++ PATHS, IDs FROM CONFIGURATION FILE ++++++++++++++++++++ 
string pg_scripts_directory;
string pg_videos_directory;
string pg_soundtracks_directory;
string pg_cliparts_directory;
string pg_diaporamas_directory;
string pg_meshes_directory;
string pg_messages_directory;
string pg_SVGpaths_directory;
string pg_textures_directory;
string pg_clips_directory;
string pg_shaders_directory;

// initial values in the scenario (before first scene)
ScenarioValue pg_InitialValuesInterpVar[PG_MAX_SCENARIOS][_MaxInterpVarIDs];
// rank of the scenario variable in the list of variables generated by python
int pg_ConfigScenarioVarRank[PG_MAX_SCENARIOS][_MaxInterpVarIDs];
// var IDs in scenarios in the order in which they appear in the scenario
string pg_ConfigScenarioVarIDs[PG_MAX_SCENARIOS][_MaxInterpVarIDs];
// number of vars in the scenario file
int pg_ScenarioVarNb[PG_MAX_SCENARIOS] = { 0 };
// last value shipped to the GUI (PD)
ScenarioValue pg_LastGUIShippedValuesInterpVar[PG_MAX_SCENARIOS][_MaxInterpVarIDs];
// initial values in the configuration file
//float InitialValuesConfigurationVar[_MaxConfigurationVarIDs];

// current working directory
std::string pg_cwd;

/////////////////////////////////////////////////////
// Default values for global variables
/////////////////////////////////////////////////////
pg_WindowData::pg_WindowData( void ) {
  glutID = -1;
}

pg_WindowData::~pg_WindowData(void) {
}

/////////////////////////////////////////////////////
// environment parsing from configuration file
/////////////////////////////////////////////////////

float pg_stof(string str) {
	float f = 0.f;
	try {
		f = std::stof(str);
	}
	catch (const std::invalid_argument&) {
		sprintf(pg_errorStr, "Error: float argument is invalid (%s)\n", str.c_str()); pg_ReportError(pg_errorStr); throw 50;
	}
	catch (const std::out_of_range&) {
		sprintf(pg_errorStr, "Error: float argument is out of range (%s)\n", str.c_str()); pg_ReportError(pg_errorStr); throw 50;
	}
	catch (const std::exception& e) {
		sprintf(pg_errorStr, "Error: float argument is incorrect (%s): %s\n", str.c_str(), e.what()); pg_ReportError(pg_errorStr); throw 50;
	}
	return f;
}

int pg_stoi(string str) {
	int i = 0;
	try {
		i = std::stoi(str);
	}
	catch (const std::invalid_argument&) {
		sprintf(pg_errorStr, "Error: int argument is invalid (%s)\n", str.c_str()); pg_ReportError(pg_errorStr); throw 50;
	}
	catch (const std::out_of_range&) {
		sprintf(pg_errorStr, "Error: int argument is out of range (%s)\n", str.c_str()); pg_ReportError(pg_errorStr); throw 50;
	}
	catch (const std::exception& e) {
		sprintf(pg_errorStr, "Error: int argument is incorrect (%s): %s\n", str.c_str(), e.what()); pg_ReportError(pg_errorStr); throw 50;
	}
	return i;
}

double pg_stod(string str) {
	double d = 0.;
	try {
		d = std::stod(str);
	}
	catch (const std::invalid_argument&) {
		sprintf(pg_errorStr, "Error: double argument is invalid (%s)\n", str.c_str()); pg_ReportError(pg_errorStr); throw 50;
	}
	catch (const std::out_of_range&) {
		sprintf(pg_errorStr, "Error: double argument is out of range (%s)\n", str.c_str()); pg_ReportError(pg_errorStr); throw 50;
	}
	catch (const std::exception& e) {
		sprintf(pg_errorStr, "Error: double argument is incorrect (%s): %s\n", str.c_str(), e.what()); pg_ReportError(pg_errorStr); throw 50;
	}
	return d;
}

void pg_stringstreamStoreLine(std::stringstream *sstream, std::string *line) {
	(*sstream).clear();
	if ((*line).find('\t') == std::string::npos) {
		std::replace((*line).begin(), (*line).end(), ',', ' ');
	}
	//printf("%s\n", (* line).c_str());
	(*sstream).str((*line));
}

double pg_stringToDuration(string percentOrAbsoluteDuration, double full_length, int ind_scene, int ind_var) {
	double returnedPercent = 0.f;
	if (percentOrAbsoluteDuration.back() == 's') {
		percentOrAbsoluteDuration.resize(size_t(percentOrAbsoluteDuration.size() - 1));
		returnedPercent = pg_stof(percentOrAbsoluteDuration);
		if (returnedPercent < 0 || returnedPercent > full_length) {
			sprintf(pg_errorStr, "Error: in scene %d var %d absolute duration %s negative or greater than full scene duration %.2f\n", ind_scene, ind_var, (percentOrAbsoluteDuration + "s").c_str(), full_length); pg_ReportError(pg_errorStr); throw 50;
		}
		if (full_length != 0.f) {
			returnedPercent /= full_length;
		}
	}
	else {
		returnedPercent = pg_stof(percentOrAbsoluteDuration);
		if (returnedPercent < 0 || returnedPercent > 1.f) {
			sprintf(pg_errorStr, "Error: in scene %d var %d relative duration %s negative or greater than 1.\n", ind_scene, ind_var, percentOrAbsoluteDuration.c_str()); pg_ReportError(pg_errorStr); throw 50;
		}
	}
	return min(max(float(returnedPercent), 0.f), 1.f);
}


bool pg_isFullPath(string dir_or_filename) {
	if (dir_or_filename.length() > 0
		&& (dir_or_filename.find(':') != std::string::npos
			|| dir_or_filename[0] == '/')) {
		return true;
	}
	else {
		return false;
	}
}
void pg_completeToFullPath(string &dir_or_filename) {
	if (!pg_isFullPath(dir_or_filename)) {
		if (pg_cwd[pg_cwd.length() - 1] == '/') {
			dir_or_filename = pg_cwd + dir_or_filename;
		}
		else {
			dir_or_filename = pg_cwd + "/" + dir_or_filename;
		}
	}
}


/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
// SCENARIO FILE
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

int pg_varID_to_rank(string var_ID, int indConfig) {
	for (int indP = 0; indP < _MaxInterpVarIDs; indP++) {
		if (pg_FullScenarioVarStrings[indP] == var_ID) {
			return indP;
		}
	}
	sprintf(pg_errorStr, "Error: scenario variable %s of configuration %d not found in the variable string list generated by python generator\n", var_ID.c_str(), indConfig); pg_ReportError(pg_errorStr); throw 50;
	return -1;
}

void pg_parseScenarioVideos(std::ifstream& scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;
	string temp2;

	////////////////////////////
	////// VIDEOS
	// Number of videos
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID; // string videos
	if (ID.compare("videos") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"videos\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	while (true) {
		// new line
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string /svg_paths or svg_path
		if (ID.compare("/videos") == 0) {
			break;
		}
		else if (ID.compare("movie") != 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"movie\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}

		VideoTrack video;

		sstream >> temp;
		video.videoFileName = temp;
		if (!pg_isFullPath(video.videoFileName)) {
			video.videoFileName = pg_videos_directory + video.videoFileName;
		}
		sstream >> temp2;
		video.videoShortName = temp2;

		// in addition to the movie name and short name, 2 additional
		// sound files can be provided that are synchronized with the 
		// movie and used to generate beats from sound envelope at 1
		// or sound onsets detected through aubio library

		// possible additional soundtrack file with peaked sound envelope at 1.0 or above
		// NULL value or no value means no file
		if (sstream >> temp2) {
			// there is a soundtrack file with peaked sound envelope at 1.0
			if (temp2.compare("") != 0 && temp2.compare("NULL") != 0) {
				video.videoSoundtrackPeaksFileName = temp2;
				string csv_line;
				vector<float> peak_times;
				std::ifstream peak_file(temp2);
				if (!peak_file) {
					sprintf(pg_errorStr, "Error: peak file [%s] not found!", temp2.c_str()); pg_ReportError(pg_errorStr); throw 11;
				}
				printf("Read video soundtrack peaks [%s]\n", temp2.c_str());
				// reads the peaks timecodes and stores them in a float vector
				std::getline(peak_file, csv_line);
				std::getline(peak_file, csv_line);
				std::getline(peak_file, csv_line);
				while (std::getline(peak_file, csv_line)) {
					std::stringstream  peak_sstream;
					pg_stringstreamStoreLine(&peak_sstream, &csv_line);
					float time, sound;
					peak_sstream >> time;
					peak_sstream >> sound;
					if (sound >= 1) {
						peak_times.push_back(time);
					}
				}
				peak_file.close();
				video.videoSoundtrackPeaks = peak_times;
				//for (int i = 0; i < int(peak_times.size()); ++i) {
				//	std::cout << "Peak: " << peak_times[i] << '\n';
				//}
			}
			else {
				video.videoSoundtrackPeaksFileName = "";
				video.videoSoundtrackPeaks = {};
			}
			if (sstream >> temp2 && temp2.compare("") != 0 && temp2.compare("NULL") != 0) {
				video.videoSoundtrackOnsetsFileName = temp2;
				string csv_line;
				vector<float> onset_times;
				std::ifstream onset_file(temp2);
				if (!onset_file) {
					sprintf(pg_errorStr, "Error: onset file [%s] not found!", temp2.c_str()); pg_ReportError(pg_errorStr); throw 11;
				}
				// reads the peaks timecodes and stores them in a float vector
				printf("Read video soundtrack onsets [%s]\n", temp2.c_str());
				while (std::getline(onset_file, csv_line)) {
					std::stringstream  onset_sstream;
					pg_stringstreamStoreLine(&onset_sstream, &csv_line);
					float time;
					onset_sstream >> time;
					onset_times.push_back(time);
				}
				onset_file.close();
				video.videoSoundtrackOnsets = onset_times;
				//for (int i = 0; i < int(onset_times.size()); ++i) {
				//	std::cout << "Onset: " << onset_times[i] << '\n';
				//}
			}
			else {
				video.videoSoundtrackOnsetsFileName = "";
				video.videoSoundtrackOnsets = {};
			}
		}
		else {
			video.videoSoundtrackPeaksFileName = "";
			video.videoSoundtrackPeaks = {};
			video.videoSoundtrackOnsetsFileName = "";
			video.videoSoundtrackOnsets = {};
		}
		//std::cout << "movie : " << 
		// movieFileName[indVideo] << "\n";
		pg_VideoTracks[indConfiguration].push_back(video);
	}
}

void pg_parseScenarioClipsAndPhotos(std::ifstream& scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;

	////////////////////////////
	////// SHORT VIDEO CLIPS ALBUMS
	//pg_NbClipAlbums[indConfiguration] = 0;
	// Number of photo albums
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID; // string videos
	if (ID.compare("clips") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"clips\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}
	//sstream >> pg_NbClipAlbums[indConfiguration];

	//printf("Clip album Number %d\n", pg_NbClipAlbums);

	int nbClipAlbums = 0;
	pg_ClipDirectory[indConfiguration] = "";
	while (true) {
		// new line
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string /svg_paths or svg_path
		if (ID.compare("/clips") == 0) {
			break;
		}
		else if (ID.compare("album") != 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"album\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}

		if (nbClipAlbums > 1) {
			sprintf(pg_errorStr, "Error: incorrect configuration file: Only one clip album with subdirectories is expected!"); pg_ReportError(pg_errorStr); throw 100;
		}

		sstream >> pg_ClipDirectory[indConfiguration];
		if (!pg_isFullPath(pg_ClipDirectory[indConfiguration])) {
			pg_ClipDirectory[indConfiguration] = pg_clips_directory + pg_ClipDirectory[indConfiguration];
		}
		std::cout << "Clip album directory: " << pg_ClipDirectory << "\n";
		sstream >> clip_image_width[indConfiguration];
		sstream >> clip_image_height[indConfiguration];
		sstream >> clip_crop_width[indConfiguration];
		sstream >> clip_crop_height[indConfiguration];
		sstream >> clip_max_length[indConfiguration];
		if (clip_image_width[indConfiguration] == 0 || clip_image_height[indConfiguration] == 0 || clip_crop_width[indConfiguration] == 0 || clip_crop_height[indConfiguration] == 0 || clip_max_length[indConfiguration] == 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file: missing dimension data for clip image size %dx%d cropped size %dx%d max length %d\n", clip_image_width[indConfiguration], clip_image_height[indConfiguration], clip_crop_width[indConfiguration], clip_crop_height[indConfiguration], clip_max_length[indConfiguration]); pg_ReportError(pg_errorStr); throw 100;
		}

		nbClipAlbums;
	}
	pg_NbClipAlbums[indConfiguration] = nbClipAlbums;

	////////////////////////////
	////// PHOTO ALBUMS
	//pg_NbPhotoAlbums[indConfiguration] = 0;
	// Number of photo albums
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID; // string videos
	if (ID.compare("photos") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"photos\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	int nbPhotoAlbums = 0;
	string photoAlbumDir = "";
	while (true) {
		// new line
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string /svg_paths or svg_path
		if (ID.compare("/photos") == 0) {
			break;
		}
		else if (ID.compare("album") != 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"album\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}

		if (nbPhotoAlbums > 1) {
			sprintf(pg_errorStr, "Error: incorrect configuration file: Only one photo album with subdirectories is expected"); pg_ReportError(pg_errorStr); throw 100;
		}

		sstream >> photoAlbumDir;
		//std::cout << "photo album : " << photoAlbumDir << "\n";

		nbPhotoAlbums++;
	}

	if (photoAlbumDir != "") {
		if (!pg_isFullPath(photoAlbumDir)) {
			pg_ImageDirectory[indConfiguration] = pg_diaporamas_directory + photoAlbumDir;
		}
		else {
			pg_ImageDirectory[indConfiguration] = photoAlbumDir;
		}
		//std::cout << "Photo album directory: " << pg_ImageDirectory[indConfiguration] << std::endl;
	}
	else {
		pg_ImageDirectory[indConfiguration] = "";
	}

	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID; // string messages
	if (ID.compare("messages") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"messages\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID; // string lines
	if (ID.compare("/messages") != 0) {
		sstream >> pg_MessageFile[indConfiguration];
		if (!pg_isFullPath(pg_MessageFile[indConfiguration])) {
			pg_MessageFile[indConfiguration] = pg_messages_directory + pg_MessageFile[indConfiguration];
		}
		std::cout << "Loading messages from " << pg_MessageFile[indConfiguration] << std::endl;

		// /messages
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string /messages
		if (ID.compare("/messages") != 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"/messages\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}
	}
	else {
		pg_MessageFile[indConfiguration] = "";
	}

}

void pg_parseScenarioSoundtracks(std::ifstream& scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;
	string temp2;

	////////////////////////////
	////// SOUNDTRACKS
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID; // string soundtracks
	if (ID.compare("soundtracks") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"soundtracks\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	while (true) {
		// new line
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string /svg_paths or svg_path
		if (ID.compare("/soundtracks") == 0) {
			break;
		}
		else if (ID.compare("track") != 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"track\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}

		SoundTrack soundtrack;

		sstream >> temp;
		soundtrack.soundtrackFileName = temp;
		if (!pg_isFullPath(soundtrack.soundtrackFileName)) {
			soundtrack.soundtrackFileName = pg_soundtracks_directory + soundtrack.soundtrackFileName;
		}
		sstream >> temp2;
		soundtrack.soundtrackShortName = temp2;
		//std::cout << "Soundtrack: " << pg_SoundTracks[indConfiguration][indTrack].soundtrackFileName << " " << pg_SoundTracks[indConfiguration][indTrack].trackShortName << " (#" << indTrack << ")\n";

		// in addition to the track name and short name, 2 additional
		// files can be used to generate beats from sound envelope at 1
		// or sound onsets detected through aubio library

		// possible additional peaked sound envelope at 1.0 or above
		// NULL value or no value means no file
		if (sstream >> temp2) {
			// there is a soundtrack file with peaked sound envelope at 1.0
			if (temp2.compare("") != 0 && temp2.compare("NULL") != 0) {
				soundtrack.soundtrackPeaksFileName = temp2;
				string csv_line;
				vector<float> peak_times;
				std::ifstream peak_file(temp2);
				if (!peak_file) {
					sprintf(pg_errorStr, "Error: peak file [%s] not found!", temp2.c_str()); pg_ReportError(pg_errorStr); throw 11;
				}
				printf("Read audio soundtrack peaks [%s]\n", temp2.c_str());
				// reads the peaks timecodes and stores them in a float vector
				std::getline(peak_file, csv_line);
				std::getline(peak_file, csv_line);
				std::getline(peak_file, csv_line);
				while (std::getline(peak_file, csv_line)) {
					std::stringstream  peak_sstream;
					pg_stringstreamStoreLine(&peak_sstream, &csv_line);
					float time, sound;
					peak_sstream >> time;
					peak_sstream >> sound;
					if (sound >= 1) {
						peak_times.push_back(time);
					}
				}
				peak_file.close();
				soundtrack.soundtrackPeaks = peak_times;;
				//for (int i = 0; i < int(peak_times.size()); ++i) {
				//	std::cout << "Peak: " << peak_times[i] << '\n';
				//}
			}
			else {
				soundtrack.soundtrackPeaksFileName = "";
				soundtrack.soundtrackPeaks = {};
			}
			if (sstream >> temp2 && temp2.compare("") != 0 && temp2.compare("NULL") != 0) {
				soundtrack.soundtrackOnsetsFileName = temp2;
				string csv_line;
				vector<float> onset_times;
				std::ifstream onset_file(temp2);
				if (!onset_file) {
					sprintf(pg_errorStr, "Error: onset file [%s] not found!", temp2.c_str()); pg_ReportError(pg_errorStr); throw 11;
				}
				// reads the peaks timecodes and stores them in a float vector
				printf("Read audio soundtrack onsets [%s]\n", temp2.c_str());
				while (std::getline(onset_file, csv_line)) {
					std::stringstream  onset_sstream;
					pg_stringstreamStoreLine(&onset_sstream, &csv_line);
					float time;
					onset_sstream >> time;
					onset_times.push_back(time);
				}
				onset_file.close();
				soundtrack.soundtrackOnsets = onset_times;;
				//for (int i = 0; i < int(onset_times.size()); ++i) {
				//	std::cout << "Onset: " << onset_times[i] << '\n';
				//}
			}
			else {
				soundtrack.soundtrackOnsetsFileName = "";
				soundtrack.soundtrackOnsets = {};
			}
			float offset = 0.f;
			sstream >> offset;
			soundtrack.soundtrackOnsetsAndPeasksOffset = offset;
		}
		else {
			soundtrack.soundtrackPeaksFileName = "";
			soundtrack.soundtrackPeaks = {};
			soundtrack.soundtrackOnsetsFileName = "";
			soundtrack.soundtrackOnsets = {};
			soundtrack.soundtrackOnsetsAndPeasksOffset = 0.f;
		}
		//std::cout << "track : " << 
		// pg_SoundTracks[indVideo]->soundtrackFileName << "\n";
		pg_SoundTracks[indConfiguration].push_back(soundtrack);
	}
}

void pg_parseScenarioSVGPaths(std::ifstream& scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;
	string temp2;

	////////////////////////////
	////// SVG PATHS

	// Initial markup for SVG pathCurves
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID; // string svg_paths
	if (ID.compare("svg_paths") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"svg_paths\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	// initializes the tracks for recording the strokes
	// has to be made before loading the scenario that may load predefined svg paths
	// and has to be made after the configuration file loading that has 

	// mouse pointer tracks recording initialization
	for (int ind = 0; ind <= PG_NB_PATHS; ind++) {
		pg_synchr_start_recording_path[ind] = false;
		pg_synchr_start_path_replay_trackNo[ind] = -1;
		pg_recorded_path[ind] = false;
		pg_is_path_replay[ind] = false;
	}

	// each path should have minimally one curve which is used to record/replay live
	for (int pathNo = 1; pathNo <= PG_NB_PATHS; pathNo++) {
		// a path without curves
		if (pg_Path_Status[pathNo].path_PathCurve_Data[indConfiguration].size() == 0) {
			PathCurve_Data curve;
			curve.PathCurve_Data_init();
			pg_Path_Status[pathNo].path_PathCurve_Data[indConfiguration].push_back(curve);
		}
	}

	// parses the full list of paths 
	// check which paths have associated curves and how many pathCurves are associated to each active path
	pg_current_SVG_path_group = 1;
	int nb_path_curves = 0;
	while(true) {
		string fileName = "";
		string local_ID = "";
		string path_ID = "";

		SVG_scenarioPathCurve pathCurve;

		// adds a new curve
		pg_SVG_scenarioPathCurves[indConfiguration].push_back(pathCurve);

		// new line
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string /svg_paths or svg_path
		if (ID.compare("/svg_paths") == 0) {
			break;
		}
		else if (ID.compare("svg_path") != 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"svg_path\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}

		sstream >> fileName; // file name
		if (!pg_isFullPath(fileName)) {
			fileName = pg_SVGpaths_directory + fileName;
		}
		//printf("Filename %s\n", fileName.c_str());
		sstream >> temp2;
		int pathNo = pg_stoi(temp2);
		// adds a new curve to the path, the curve is made of one empty frame 
		// the addition of a new frame is made by filling the back frame and pushing a new one when another one is built
		if (pathNo <= PG_NB_PATHS && pathNo >= 0) {
			PathCurve_Data curve;
			curve.PathCurve_Data_init();
			pg_Path_Status[pathNo].path_PathCurve_Data[indConfiguration].push_back(curve);
		}
		else {
			sprintf(pg_errorStr, "Error: incorrect scenario file SVG path %d number (\"%s\"), pathRank should be between 0 and %d",
				pathNo, fileName.c_str(), PG_NB_PATHS); pg_ReportError(pg_errorStr); throw 100;
		}
		sstream >> temp2;
		int path_track = pg_stoi(temp2);
		sstream >> temp2;
		float pathRadius = pg_stof(temp2);
		sstream >> temp2;
		float path_r_color = pg_stof(temp2);
		sstream >> temp2;
		float path_g_color = pg_stof(temp2);
		sstream >> temp2;
		float path_b_color = pg_stof(temp2);
		sstream >> temp2;
		float path_readSpeedScale = pg_stof(temp2);
		sstream >> path_ID;
		sstream >> temp2;
		int local_path_group = pg_stoi(temp2);
		if (local_path_group <= 0) {
			sprintf(pg_errorStr, "Error: incorrect scenario file group %d for SVG path %d number (\"%s\"), path group should be stricly positive",
				local_path_group, pathNo, fileName.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}
		else {
			pg_nb_SVG_path_groups[indConfiguration] = max(pg_nb_SVG_path_groups[indConfiguration], local_path_group);
		}
		sstream >> temp2;
		bool with_color_radius_from_scenario = (pg_stoi(temp2) != 0);
		sstream >> temp2;
		double secondsforwidth = pg_stod(temp2);

		//printf("path no %d group %d\n", indPathCurve, local_path_group);
		//printf("path ID %s radius %.3f\n", path_ID.c_str(), pathRadius);
		//printf("path no %d group %d\n", paths[indConfiguration][indPathCurve].indPathCurve, paths[indConfiguration][indPathCurve].path_group);
		// checks whether there are other curves in the same path
		int rankInPath = 0;
		for (int indAux = 0; indAux < nb_path_curves; indAux++) {
			if (pg_SVG_scenarioPathCurves[indConfiguration][indAux].path_no == pg_SVG_scenarioPathCurves[indConfiguration][nb_path_curves].path_no) {
				rankInPath++;
				//sprintf(pg_errorStr, "Error: incorrect configuration file paths %d and %d have the same path index %d and same path group %d", 
				//	indAux, indPathCurve, pg_SVG_scenarioPathCurves[indConfiguration][indAux].indPath, pg_SVG_scenarioPathCurves[indConfiguration][indAux].path_group); pg_ReportError(pg_errorStr); throw 100;
			}
		}
		pg_SVG_scenarioPathCurves[indConfiguration][nb_path_curves].SVG_scenarioPathCurve_init(pathNo, rankInPath, path_track, pathRadius,
			path_r_color, path_g_color, path_b_color, path_readSpeedScale,
			path_ID, fileName, local_path_group, with_color_radius_from_scenario, secondsforwidth);

		//printf("indPathCurve %d path_track %d pathRadius %.2f path_r_color %.2f path_g_color %.2f path_b_color %.2f path_readSpeedScale %.2f\n",
		//	pathRank, path_track, pathRadius, path_r_color, path_g_color, path_b_color, path_readSpeedScale);
		if (path_track >= 0 && path_track < PG_NB_TRACKS && pathNo >= 1 && pathNo <= PG_NB_PATHS) {
			if (local_path_group == pg_current_SVG_path_group) {
				//printf("Load svg path No %d track %d\n", pathNo, path_track);
				pg_Path_Status[pathNo].load_svg_path((char*)fileName.c_str(),
					pathRadius, path_r_color, path_g_color, path_b_color,
					path_readSpeedScale, path_ID, with_color_radius_from_scenario, secondsforwidth, indConfiguration);
				//printf("time stamps %.2f %.2f %.2f %.2f %.2f\n",
				//	pg_Path_Status[pathNo].path_TmpTimeStamps[0], pg_Path_Status[pathNo].path_TmpTimeStamps[1], 
				//	pg_Path_Status[pathNo].path_TmpTimeStamps[2], pg_Path_Status[pathNo].path_TmpTimeStamps[3], 
				//	pg_Path_Status[pathNo].path_TmpTimeStamps[4]);
			}
		}
		else {
			sprintf(pg_errorStr, "Error: incorrect scenario file track %d for SVG path number %d (\"%s\") track number should be between 0 and %d and path number between 1 and %d\n",
				path_track, pathNo, fileName.c_str(), PG_NB_TRACKS, PG_NB_PATHS); pg_ReportError(pg_errorStr); throw 100;
		}
		//std::cout << "svg_path #" << pathNo << ": " << pg_SVGpaths_directory + temp << " track #" << path_track << "\n";

		nb_path_curves++;
	}
}

void pg_parseScenarioClipArt(std::ifstream& scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;

	////////////////////////////
	////// ClipArt GPU PATHS
	// the paths are loaded inside the GPU and diplayed path by path
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID; // string clip_arts
	if (ID.compare("clip_arts") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"clip_arts\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	pg_nb_tot_SvgGpu_paths[indConfiguration] = 0;
	while (true) {
		// new line
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string /svg_paths or svg_path
		if (ID.compare("/clip_arts") == 0) {
			break;
		}
		else if (ID.compare("clip_art") != 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"clip_art\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}

		// adds a new clipart
		ClipArt aClipArt;

		sstream >> aClipArt.pg_ClipArt_fileNames; // file name
		if (!pg_isFullPath(aClipArt.pg_ClipArt_fileNames)) {
			//printf("CipArts dir [%s] filename [%s]\n", pg_cliparts_directory.c_str(), aClipArt.pg_ClipArt_fileNames.c_str());
			aClipArt.pg_ClipArt_fileNames = pg_cliparts_directory + aClipArt.pg_ClipArt_fileNames;
		}
		sstream >> aClipArt.pg_nb_paths_in_ClipArt; // number of paths in the file
		pg_nb_tot_SvgGpu_paths[indConfiguration] += aClipArt.pg_nb_paths_in_ClipArt;
		//printf("%s, ", aClipArt.pg_ClipArt_fileNames.c_str());
		//printf("ind path file %d name %s nb paths %d, ", indClipArtFile, aClipArt.pg_ClipArt_fileNames.c_str(), aClipArt.pg_nb_paths_in_ClipArt);

		aClipArt.pg_ClipArt_SubPath = new bool[aClipArt.pg_nb_paths_in_ClipArt];
		for (int indPathCurve = 0; indPathCurve < aClipArt.pg_nb_paths_in_ClipArt; indPathCurve++) {
			aClipArt.pg_ClipArt_SubPath[indPathCurve] = true;
		}

		aClipArt.pg_ClipArt_Colors = new pg_ClipArt_Colors_Types[aClipArt.pg_nb_paths_in_ClipArt];
		for (int indPathCurve = 0; indPathCurve < aClipArt.pg_nb_paths_in_ClipArt; indPathCurve++) {
			aClipArt.pg_ClipArt_Colors[indPathCurve] = pg_enum_ClipArt_nat;
		}

		// image initial geometry
		sstream >> aClipArt.pg_ClipArt_Scale;
		sstream >> aClipArt.pg_ClipArt_Translation_X;
		sstream >> aClipArt.pg_ClipArt_Translation_Y;
		//printf("ind clipart %d scale %.2f pos %.2f %.2f\n", indClipArtFile, aClipArt.pg_ClipArt_Scale, aClipArt.pg_ClipArt_Translation_X, aClipArt.pg_ClipArt_Translation_Y);
		sstream >> aClipArt.pg_ClipArt_Rotation;
		sstream >> ID;
		if (ID.compare("nat") == 0) {
			for (int indPathCurve = 0; indPathCurve < aClipArt.pg_nb_paths_in_ClipArt; indPathCurve++) {
				aClipArt.pg_ClipArt_Colors[indPathCurve] = pg_enum_ClipArt_nat;
			}
		}
		else if (ID.compare("white") == 0) {
			for (int indPathCurve = 0; indPathCurve < aClipArt.pg_nb_paths_in_ClipArt; indPathCurve++) {
				aClipArt.pg_ClipArt_Colors[indPathCurve] = pg_enum_ClipArt_white;
			}
		}
		else if (ID.compare("red") == 0) {
			for (int indPathCurve = 0; indPathCurve < aClipArt.pg_nb_paths_in_ClipArt; indPathCurve++) {
				aClipArt.pg_ClipArt_Colors[indPathCurve] = pg_enum_ClipArt_red;
			}
		}
		else if (ID.compare("green") == 0) {
			for (int indPathCurve = 0; indPathCurve < aClipArt.pg_nb_paths_in_ClipArt; indPathCurve++) {
				aClipArt.pg_ClipArt_Colors[indPathCurve] = pg_enum_ClipArt_green;
			}
		}
		else if (ID.compare("blue") == 0) {
			for (int indPathCurve = 0; indPathCurve < aClipArt.pg_nb_paths_in_ClipArt; indPathCurve++) {
				aClipArt.pg_ClipArt_Colors[indPathCurve] = pg_enum_ClipArt_blue;
			}
		}
		else {
			sprintf(pg_errorStr, "Error: incorrect configuration file ClipArt GPU color \"%s\" (nat, white, red, blue or green expected)", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}

		pg_ClipArts[indConfiguration].push_back(aClipArt);
	}
	printf("\n");
	printf("Nb clip arts %d config %d\n", (int)pg_ClipArts[indConfiguration].size(), indConfiguration);
	if (pg_ClipArts[indConfiguration].size() > 0) {
		pg_last_activated_ClipArt = &(pg_ClipArts[indConfiguration][0]);
	}
}

void pg_parseScenarioTextures(std::ifstream& scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;

	////////////////////////////	
	////// TEXTURES
	// the textures are loaded inside the GPU and diplayed path by path

	// initial markup
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID; // string textures
	if (ID.compare("textures") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"textures\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	// Number of textures
	while(true) {
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string texture
		if (ID.compare("/textures") == 0) {
			break;
		}
		else if (ID.compare("texture") != 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"texture\" not found! (instead \"%s\")\n", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}

		pg_TextureData cur_texture;

		sstream >> ID; // file name
		if (!pg_isFullPath(ID)) {
				cur_texture.texture_fileName = pg_textures_directory + ID;
		}
		else {
			cur_texture.texture_fileName = ID;
		}
		sstream >> cur_texture.texture_fileNameSuffix; // file suffix

		// usage
		sstream >> ID;
		//printf("Usage %s: (%s)\n", cur_texture.texture_fileName.c_str(), ID.c_str());
		if (ID.compare("master_mask") == 0) {
			cur_texture.texture_usage = pg_enum_Texture_master_mask;
		}
		else if (ID.compare("mesh") == 0) {
			cur_texture.texture_usage = pg_enum_Texture_mesh;
		}
		else if (ID.compare("sensor") == 0) {
			cur_texture.texture_usage = pg_enum_Texture_sensor;
		}
		else if (ID.compare("logo") == 0) {
			cur_texture.texture_usage = pg_enum_Texture_logo;
		}
		else if (ID.compare("brush") == 0) {
			cur_texture.texture_usage = pg_enum_Texture_brush;
		}
		else if (ID.compare("noise") == 0) {
			cur_texture.texture_usage = pg_enum_Texture_noise;
		}
		else if (ID.compare("curve_particle") == 0) {
			cur_texture.texture_usage = pg_enum_Texture_particle;
		}
		else if (ID.compare("splat_particle") == 0) {
			cur_texture.texture_usage = pg_enum_Texture_splat_particle;
		}
		else if (ID.compare("part_init") == 0) {
			cur_texture.texture_usage = pg_enum_Texture_part_init;
		}
		else if (ID.compare("part_acc") == 0) {
			cur_texture.texture_usage = pg_enum_Texture_part_acc;
		}
		else if (ID.compare("pixel_acc") == 0) {
			cur_texture.texture_usage = pg_enum_Texture_pixel_acc;
		}
		else if (ID.compare("repop_density") == 0) {
			cur_texture.texture_usage = pg_enum_Texture_repop_density;
		}
		else if (ID.compare("multilayer_master_mask") == 0) {
			cur_texture.texture_usage = pg_enum_Texture_multilayer_master_mask;
		}
		else {
			sprintf(pg_errorStr, "Error: incorrect configuration file Texture usage \"%s\"\n", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}
		// rank of the texture (used in particular for meshes)
		sstream >> cur_texture.texture_Rank;
		// dimension (2 or 3)
		sstream >> cur_texture.texture_Dimension;
		if (cur_texture.texture_Dimension != 2
			&& cur_texture.texture_Dimension != 3) {
			sprintf(pg_errorStr, "Error: 2D or 3D texture dimension expected, not %d for texture (%s)\n", cur_texture.texture_Dimension, cur_texture.texture_fileName.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}
		// number of piled textures in case of 3D texture or tif format
		sstream >> cur_texture.texture_Nb_Layers;
		if (cur_texture.texture_usage == pg_enum_Texture_brush) {
			nb_pen_brushes[indConfiguration] = cur_texture.texture_Nb_Layers;
		}
		if (cur_texture.texture_usage == pg_enum_Texture_multilayer_master_mask) {
			nb_layers_master_mask[indConfiguration] = cur_texture.texture_Nb_Layers;
		}

		// image initial geometry
		sstream >> cur_texture.texture_Size_X;
		sstream >> cur_texture.texture_Size_Y;
		if (cur_texture.texture_usage == pg_enum_Texture_master_mask &&
			(cur_texture.texture_Size_X < pg_workingWindow_width || cur_texture.texture_Size_Y < PG_WINDOW_HEIGHT)) {
			sprintf(pg_errorStr, "Error: master mask texture should be minimlally %dx%d (%dx%d)\n", PG_WINDOW_WIDTH, PG_WINDOW_HEIGHT,
				cur_texture.texture_Size_X, cur_texture.texture_Size_Y); pg_ReportError(pg_errorStr); throw 100;
		}
		if (cur_texture.texture_usage == pg_enum_Texture_multilayer_master_mask &&
			(cur_texture.texture_Size_X < pg_workingWindow_width || cur_texture.texture_Size_Y < PG_WINDOW_HEIGHT)) {
			sprintf(pg_errorStr, "Error: multilayer master mask texture should be minimlally %dx%d (%dx%d)\n", PG_WINDOW_WIDTH, PG_WINDOW_HEIGHT,
				cur_texture.texture_Size_X, cur_texture.texture_Size_Y); pg_ReportError(pg_errorStr); throw 100;
		}
		if (cur_texture.texture_usage == pg_enum_Texture_noise &&
			(cur_texture.texture_Size_X < pg_workingWindow_width_powerOf2 || cur_texture.texture_Size_Y < pg_window_height_powerOf2)) {
			sprintf(pg_errorStr, "Error: noise texture should be minimlally %dx%d (%dx%d)\n", pg_workingWindow_width_powerOf2, pg_window_height_powerOf2,
				cur_texture.texture_Size_X, cur_texture.texture_Size_Y); pg_ReportError(pg_errorStr); throw 100;
		}
		if (cur_texture.texture_usage == pg_enum_Texture_part_init &&
			(cur_texture.texture_Size_X < pg_workingWindow_width || cur_texture.texture_Size_Y < PG_WINDOW_HEIGHT)) {
			sprintf(pg_errorStr, "Error: particle initialization texture should be minimlally %dx%d (%dx%d)\n", pg_workingWindow_width, PG_WINDOW_HEIGHT,
				cur_texture.texture_Size_X, cur_texture.texture_Size_Y); pg_ReportError(pg_errorStr); throw 100;
		}
		if (cur_texture.texture_usage == pg_enum_Texture_part_acc &&
			(cur_texture.texture_Size_X < pg_workingWindow_width || cur_texture.texture_Size_Y < PG_WINDOW_HEIGHT)) {
			sprintf(pg_errorStr, "Error: particle acceleration texture should be minimlally %dx%d (%dx%d)\n", pg_workingWindow_width, PG_WINDOW_HEIGHT,
				cur_texture.texture_Size_X, cur_texture.texture_Size_Y); pg_ReportError(pg_errorStr); throw 100;
		}
		if (cur_texture.texture_usage == pg_enum_Texture_pixel_acc &&
			(cur_texture.texture_Size_X < pg_workingWindow_width || cur_texture.texture_Size_Y < PG_WINDOW_HEIGHT)) {
			sprintf(pg_errorStr, "Error: pixel acceleration texture should be minimlally %dx%d (%dx%d)\n", pg_workingWindow_width, PG_WINDOW_HEIGHT,
				cur_texture.texture_Size_X, cur_texture.texture_Size_Y); pg_ReportError(pg_errorStr); throw 100;
		}
		if (cur_texture.texture_usage == pg_enum_Texture_repop_density &&
			(cur_texture.texture_Size_X < pg_workingWindow_width || cur_texture.texture_Size_Y < PG_WINDOW_HEIGHT)) {
			sprintf(pg_errorStr, "Error:  repopulation density texture should be minimlally %dx%d (%dx%d)\n", pg_workingWindow_width, PG_WINDOW_HEIGHT,
				cur_texture.texture_Size_X, cur_texture.texture_Size_Y); pg_ReportError(pg_errorStr); throw 100;
		}

		// image color depth
		sstream >> cur_texture.texture_Nb_Bytes_per_Pixel;

		// booleans invert & is rectangle
		sstream >> ID;
		if (ID.compare("true") == 0 || ID.compare("TRUE") == 0) {
			cur_texture.texture_Is_Rectangle = true;
		}
		else if (ID.compare("false") == 0 || ID.compare("FALSE") == 0) {
			cur_texture.texture_Is_Rectangle = false;
		}
		else {
			sprintf(pg_errorStr, "Error: incorrect boolean for Texture rectangle \"%s\" (true or false expected)\n", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}
		sstream >> ID;
		if (ID.compare("true") == 0 || ID.compare("TRUE") == 0) {
			cur_texture.texture_Invert = true;
		}
		else if (ID.compare("false") == 0 || ID.compare("FALSE") == 0) {
			cur_texture.texture_Invert = false;
		}
		else {
			sprintf(pg_errorStr, "Error: incorrect boolean for Texture invert \"%s\" (true or false expected)\n", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}

		pg_Textures[indConfiguration].push_back(cur_texture);

		//printf("Texture #%d size (%d,%d), rank %d, usage %d\n",
		//	pg_Textures[indConfiguration].size(), cur_texture.texture_Size_X, cur_texture.texture_Size_Y,
		//	cur_texture.texture_Rank, cur_texture.texture_usage);
	}
	// /textures
}

void pg_parseScenarioColorPalettes(std::ifstream& scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;

	////////////////////////////
	////// PALETTE COLORSS
	// palettes markup
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID; // string palette_colors
	if (ID.compare("palette_colors") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"palette_colors\" not found! (instead \"%s\")\n", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	// palettes parsing
	while (true) {
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string texture
		if (ID.compare("/palette_colors") == 0) {
			break;
		}
		else if (ID.compare("palette") != 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"palette\" not found! (instead \"%s\")\n", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}

		array<float, 9> paletteData;
		sstream >> ID; // palette ID
		for (int indColorBandpass = 0; indColorBandpass < 3; indColorBandpass++) {
			for (int indColorChannel = 0; indColorChannel < 3; indColorChannel++) {
				sstream >> paletteData[indColorBandpass * 3 + indColorChannel];
				paletteData[indColorBandpass * 3 + indColorChannel] /= 255.f;
			}
		}
		Palette apalette(ID, paletteData);
		pg_Palettes[indConfiguration].push_back(apalette);
		// std::cout << "palettes : " << indPalette << " " <<  pen_palettes_names[indPalette] << " " << pen_palettes_values[indPalette] << "\n";
	}
	// std::cout << "line: " << line << "\n";
	// std::cout << "Nb palettes : " << pg_Palettes[indConfiguration].size() <<  "\n";
}

void pg_parseScenarioColorPresets(std::ifstream& scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;

	////////////////////////////
	////// COLOR PRESETS
	// Number of presets
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID; // string color_presets
	if (ID.compare("color_presets") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"color_presets\" not found! (instead \"%s\")\n", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	while(true) {
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string texture
		if (ID.compare("/color_presets") == 0) {
			break;
		}
		else if (ID.compare("preset") != 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"preset\" not found! (instead \"%s\")\n", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}

		Color presetColor;
		sstream >> ID; // preset ID
		sstream >> presetColor.color;           // hue
		sstream >> presetColor.grey;            // color to white interpolation
		sstream >> presetColor.alpha;           // transparency, translated into to black interpolation for RGB conversion wo transparency
		ColorPreset preset(ID, presetColor);
		pg_ColorPresets[indConfiguration].push_back(preset);
		//std::cout << "palettes : " << indPalette << " " <<  pen_colorPresets_names[indPalette] << " " << pg_colorPreset_values[indPalette] << "\n";
	}
	// std::cout << "line: " << line << "\n";
	// std::cout << "Nb palettes : " << pg_ColorPresets[indConfiguration].size() <<  "\n";
}

// Can't compile if DMX is not present
void pg_parseScenarioLights(std::ifstream & scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;

	////////////////////////////
	////// LIGHTS
	// lights markup
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID; // string color_presets
	if (ID.compare("lights") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"lights\" not found! (instead \"%s\")\n", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	// lights presets
	pg_nb_light_groups[indConfiguration] = 0;
	int nbLights = 0;
	while (true) {
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string texture
		if (ID.compare("/lights") == 0) {
			break;
		}
		else if (ID.compare("light") != 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"light\" not found! (instead \"%s\")\n", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}

		string a_light_name;
		int a_light_group;
		int a_light_port;
		int a_light_address;
		int a_light_channels;
		string a_light_red;
		string a_light_green;
		string a_light_blue;
		string a_light_grey;
		string a_light_dimmer;
		string a_light_strobe;
		string a_light_zoom;
		string a_light_pan;
		string a_light_tilt;
		string a_light_hue;

		std::getline(scenarioFin, line);
		// std::cout << "scene: " << line << "\n";
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // "light"
		sstream >> a_light_name; // light ID
		sstream >> a_light_group;
		//#ifdef PG_NB_LIGHTS_GROUPS_IN_PG_VARS
		//		if (a_light_group > PG_NB_LIGHTS_GROUPS_IN_PG_VARS) {
		//			sprintf(pg_errorStr, "Error: incorrect configuration file light group of light #%d should be <= %d\n", indLight, PG_NB_LIGHTS_GROUPS_IN_PG_VARS); pg_ReportError(pg_errorStr); throw 100;
		//		}
		//#endif
		if (a_light_group < 1) {
			sprintf(pg_errorStr, "Error: incorrect configuration file light group (%d) should be a value >= 1 for light %d\n", a_light_group, nbLights + 1); pg_ReportError(pg_errorStr); throw 100;
		}
		pg_nb_light_groups[indConfiguration] = max(pg_nb_light_groups[indConfiguration], a_light_group);

		sstream >> a_light_port;
		if (a_light_port != 1 && a_light_port != 2) {
			sprintf(pg_errorStr, "Error: incorrect configuration file light port should be equal to 1 or 2 not %d for light %d\n", a_light_port, nbLights + 1); pg_ReportError(pg_errorStr); throw 100;
		}
		sstream >> a_light_address;
		sstream >> a_light_channels;
		sstream >> a_light_red;
		sstream >> a_light_green;
		sstream >> a_light_blue;
		sstream >> a_light_grey;
		sstream >> a_light_dimmer;
		sstream >> a_light_strobe;
		sstream >> a_light_zoom;
		sstream >> a_light_pan;
		sstream >> a_light_tilt;
		sstream >> a_light_hue;
		Light alight(a_light_name, a_light_group, 0, a_light_port, a_light_address, a_light_channels,
			a_light_red, a_light_green, a_light_blue, a_light_grey, a_light_dimmer, a_light_strobe, a_light_zoom, a_light_pan, a_light_tilt, a_light_hue);
		pg_Lights[indConfiguration].push_back(alight);
		//std::cout << "light : " << indLight << " id " <<  a_light_names << " port " 
		//	<< a_light_port << " rank " << a_light_group << " add " << a_light_address << " ch " << a_light_channels << " r "
		//	<< a_light_red << " g " << a_light_green << " b " << a_light_blue 
		//	<< " dimm " << a_light_dimmer <<" strobe " << a_light_strobe << "\n";
	}

	// initializes light groups with no lights (0 light index in each light group)
	vector<int> indexes_in_group(pg_nb_light_groups[indConfiguration],0);
	// assign index inside light group to each light
	for (Light &light : pg_Lights[indConfiguration]) {
		int an_index_in_group = 0;
		int a_light_group = light.light_group;
		if (a_light_group < pg_nb_light_groups[indConfiguration]) {
			an_index_in_group = indexes_in_group[a_light_group];
			indexes_in_group[a_light_group] += 1;
		}
		light.index_in_group = an_index_in_group;
	}


	// classes of light groups initialized to default values
	for (int ind_light_group = 0; ind_light_group < pg_nb_light_groups[indConfiguration]; ind_light_group++) {
		LightGroup lgroup(ind_light_group + 1);
		pg_light_groups[indConfiguration].push_back(lgroup);
		for (Light &light : pg_Lights[indConfiguration]) {
			if (light.light_group == ind_light_group + 1) {
				pg_light_groups[indConfiguration][ind_light_group].set_group_id(light.light_name);
				//printf("group ind %d id %s\n", ind , pg_light_groups[ind].get_group_id().c_str());
				break;
			}
		}
	}

	// Iterate over an unordered_map using range based for loop
	// builds pg_inverse_light_param_hashMap from pg_light_param_hashMap
	// by exchanging keys and values
	for (const auto& myPair : pg_light_param_hashMap) {
		pg_inverse_light_param_hashMap[myPair.second] = myPair.first;
	}
}

////////////////////////////////////
////// RENDERING FILES & DIRECTORIES (VIDEP, PNG, JPG, ClipArt...)
////////////////////////////////////

void pg_parseScenarioRenderingFiles(std::ifstream& scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;

// rendering_files
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID;
	if (ID.compare("rendering_files") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"rendering_files\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	// TYPE
	std::getline(scenarioFin, line);
	// ID	begin	end	step	id	shots
	std::getline(scenarioFin, line);

	// storing the Video capture values
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID;
	if (ID.compare("VIDEO") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"VIDEO\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}
	if (indConfiguration == 0) {
		sstream >> pg_Video_Capture_param.beginVideo_file;
		sstream >> pg_Video_Capture_param.endVideo_file;
		sstream >> temp; // unused
		sstream >> pg_Video_Capture_param.Video_file_name;
		pg_Video_Capture_param.outputVideo_file = !pg_Video_Capture_param.Video_file_name.empty();
	}

	// storing the Svg capture values
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID;
	if (ID.compare("SVG") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"SVG\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}
	if (indConfiguration == 0) {
		sstream >> pg_Svg_Capture_param.beginSvg;
		sstream >> pg_Svg_Capture_param.endSvg;
		sstream >> temp;
		if (temp.back() == 's') {
			temp.resize(size_t(temp.size() - 1));
			pg_Svg_Capture_param.stepSvgInSeconds = pg_stof(temp);
			pg_Svg_Capture_param.nextSvgCapture = -1.;
			pg_Svg_Capture_param.stepSvgInFrames = -1;
		}
		else {
			pg_Svg_Capture_param.stepSvgInFrames = pg_stoi(temp);
			pg_Svg_Capture_param.stepSvgInSeconds = -1.;
		}
		sstream >> pg_Svg_Capture_param.Svg_file_name;
		pg_Svg_Capture_param.outputSvg = !pg_Svg_Capture_param.Svg_file_name.empty();
		pg_Svg_Capture_param.indSvgSnapshot = 0;
	}

	// storing the Png capture values
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID;
	if (ID.compare("PNG") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"PNG\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}
	if (indConfiguration == 0) {
		sstream >> pg_Png_Capture_param.beginPng;
		sstream >> pg_Png_Capture_param.endPng;
		sstream >> temp;
		if (temp.back() == 's') {
			temp.resize(size_t(temp.size() - 1));
			pg_Png_Capture_param.stepPngInSeconds = pg_stof(temp);
			pg_Png_Capture_param.nextPngCapture = -1.;
			pg_Png_Capture_param.stepPngInFrames = -1;
		}
		else {
			pg_Png_Capture_param.stepPngInFrames = pg_stoi(temp);
			pg_Png_Capture_param.stepPngInSeconds = -1.;
		}
		sstream >> pg_Png_Capture_param.Png_file_name;
		pg_Png_Capture_param.outputPng = !pg_Png_Capture_param.Png_file_name.empty();
		pg_Png_Capture_param.indPngSnapshot = 0;
	}

	// storing the Jpg capture values
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID;
	if (ID.compare("JPG") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"JPG\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}
	if (indConfiguration == 0) {
		sstream >> pg_Jpg_Capture_param.beginJpg;
		sstream >> pg_Jpg_Capture_param.endJpg;
		sstream >> temp;
		if (temp.back() == 's') {
			temp.resize(size_t(temp.size() - 1));
			pg_Jpg_Capture_param.stepJpgInSeconds = pg_stof(temp);
			pg_Jpg_Capture_param.nextJpgCapture = -1.;
			pg_Jpg_Capture_param.stepJpgInFrames = -1;
		}
		else {
			pg_Jpg_Capture_param.stepJpgInFrames = pg_stoi(temp);
			pg_Jpg_Capture_param.stepJpgInSeconds = -1.;
		}

		sstream >> pg_Jpg_Capture_param.Jpg_file_name;
		pg_Jpg_Capture_param.outputJpg = !pg_Jpg_Capture_param.Jpg_file_name.empty();
		pg_Jpg_Capture_param.indJpgSnapshot = 0;
	}

	// /rendering_files
	std::getline(scenarioFin, line);
}

////////////////////////////////////
////// IP CLIENTS/SERVERS
////////////////////////////////////
void pg_parseScenarioUDP(std::ifstream& scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;

	if (indConfiguration == 0) {
		pg_IP_Servers.clear();

		pg_IP_Clients.clear();
	}

	// udp_local_server Number of servers
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID;
	if (ID.compare("udp_local_server") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"udp_local_server\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	// VERBATIM
	std::getline(scenarioFin, line);
	// TYPE
	std::getline(scenarioFin, line);
	// ID
	std::getline(scenarioFin, line);

	if (indConfiguration == 0) {
		while (true) {
			std::getline(scenarioFin, line);
			pg_stringstreamStoreLine(&sstream, &line);
			sstream >> ID; // string "server" or end with "/udp_local_server"
			if (ID.compare("/udp_local_server") == 0) {
				break;
			}
			else if (ID.compare("server") != 0) {
				sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"server\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
			}
			pg_IPServer server;
			sstream >> server.id;
			sstream >> server.Local_server_port;
			sstream >> ID;
			server.receive_format = pg_enum_Empty_UDPMessageFormat;
			for (int ind = 0; ind < pg_enum_Empty_UDPMessageFormat; ind++) {
				if (strcmp(ID.c_str(), pg_UDPMessageFormatString[ind]) == 0) {
					server.receive_format = (pg_UDPMessageFormat)ind;
					break;
				}
			}
			if (server.receive_format == pg_enum_Empty_UDPMessageFormat) {
				sprintf(pg_errorStr, "Error: unknown receive message format [%s]!", ID.c_str()); pg_ReportError(pg_errorStr); throw 249;
			}
			sstream >> server.IP_message_trace;
			sstream >> server.depth_input_stack;
			sstream >> server.OSC_duplicate_removal;
			// printf("serveur %d duplicate removal %d\n", ind_IP_Server, pg_IP_Servers[ind_IP_Server]->OSC_duplicate_removal);
			sstream >> server.OSC_endian_reversal;
			pg_IP_Servers.push_back(server);
		}
	}
	else {
		while (true) {
			std::getline(scenarioFin, line);
			pg_stringstreamStoreLine(&sstream, &line);
			sstream >> ID; // string "server" or end with "/udp_local_server"
			if (ID.compare("/udp_local_server") == 0) {
				break;
			}
			else if (ID.compare("server") != 0) {
				sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"server\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
			}
		}
	}

	//// /udp_local_server
	//std::getline(scenarioFin, line);

	// udp_remote_client Number of clients
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID;
	if (ID.compare("udp_remote_client") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"udp_remote_client\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	// VERBATIM
	std::getline(scenarioFin, line);
	// TYPE
	std::getline(scenarioFin, line);
	// ID
	std::getline(scenarioFin, line);

	if (indConfiguration == 0) {
		while (true) {
			std::getline(scenarioFin, line);
			pg_stringstreamStoreLine(&sstream, &line);
			sstream >> ID; // string "client" or end with "/udp_remote_client"
			if (ID.compare("/udp_remote_client") == 0) {
				break;
			}
			else if (ID.compare("client") != 0) {
				sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"client\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
			}
			pg_IPClient client;
			sstream >> client.id;
			sstream >> client.Remote_server_IP;
			sstream >> client.Remote_server_port;
			sstream >> ID;
			client.send_format = pg_enum_Empty_UDPMessageFormat;
			for (int ind = 0; ind < pg_enum_Empty_UDPMessageFormat; ind++) {
				if (strcmp(ID.c_str(), pg_UDPMessageFormatString[ind]) == 0) {
					client.send_format = (pg_UDPMessageFormat)ind;
					break;
				}
			}
			if (client.send_format == pg_enum_Empty_UDPMessageFormat) {
				sprintf(pg_errorStr, "Error: unknown receive message format [%s]!", ID.c_str()); pg_ReportError(pg_errorStr); throw 249;
			}
			sstream >> client.IP_message_trace;
			sstream >> client.max_depth_output_stack;
			sstream >> client.OSC_endian_reversal;
			// std::cout << "OSC_trace: " << client.IP_message_trace << "\n";
			//std::cout << "client.id: " << client.id << "\n";
			//std::cout << "client.Remote_server_IP: " << client.Remote_server_IP << "\n";
			//std::cout << "client.Remote_server_port: " << client.Remote_server_port << "\n";
			//std::cout << "client.Remote_server_port: " << client.Remote_server_port << "\n";
			pg_IP_Clients.push_back(client);
		}
	}
	else {
		while (true) {
			std::getline(scenarioFin, line);
			pg_stringstreamStoreLine(&sstream, &line);
			sstream >> ID; // string "client" or end with "/udp_remote_client"
			if (ID.compare("/udp_remote_client") == 0) {
				break;
			}
			else if (ID.compare("client") != 0) {
				sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"client\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
			}
		}
	}

	//// /udp_remote_client
	//std::getline(scenarioFin, line);
}

////////////////////////////////////
////// CAMERAS
////////////////////////////////////
void pg_parseScenarioCameras(std::ifstream& scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;
	string temp2;
	string temp3;

	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID;
	if (ID.compare("webCam") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"webCam\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	// VERBATIM
	std::getline(scenarioFin, line);
	// TYPE
	std::getline(scenarioFin, line);
	// ID
	std::getline(scenarioFin, line);

	if (indConfiguration == 0) {
		while (true) {
			std::getline(scenarioFin, line);
			pg_stringstreamStoreLine(&sstream, &line);
			sstream >> ID; // string "client" or end with "/udp_remote_client"
			if (ID.compare("/webCam") == 0) {
				break;
			}
			else if (ID.compare("camera") != 0) {
				sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"camera\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
			}
			webCam cur_webCam;

			sstream >> cur_webCam.cameraString; // string "cameraString"

			sstream >> temp; // string "cameraID"
			try {
				cur_webCam.cameraID = stoi(temp);
			}
			catch (...) {
				sprintf(pg_errorStr, "Error: webcam configuration incorrect cameraID \"%s\"\n", temp.c_str()); pg_ReportError(pg_errorStr); throw 50;
			}

			sstream >> temp2; // string "cameraWidth"
			try {
				cur_webCam.cameraWidth = stoi(temp2);
			}
			catch (...) {
				sprintf(pg_errorStr, "Error: webcam configuration incorrect cameraWidth \"%s\"\n", temp2.c_str()); pg_ReportError(pg_errorStr); throw 50;
			}

			sstream >> temp3; // string "cameraHeight"
			try {
				cur_webCam.cameraHeight = stoi(temp3);
			}
			catch (...) {
				sprintf(pg_errorStr, "Error: webcam configuration incorrect cameraHeight \"%s\"\n", temp3.c_str()); pg_ReportError(pg_errorStr); throw 50;
			}		//std::cout << temp2 << "\n";
			pg_webCams.push_back(cur_webCam);
		}
	}
	else {
		while (true) {
			std::getline(scenarioFin, line);
			pg_stringstreamStoreLine(&sstream, &line);
			sstream >> ID; // string "client" or end with "/udp_remote_client"
			if (ID.compare("/webCam") == 0) {
				break;
			}
			else if (ID.compare("camera") != 0) {
				sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"camera\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
			}
		}
	}

	// remote_IPCam Number of cameras
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID;
	if (ID.compare("remote_IPCam") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"remote_IPCam\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	// VERBATIM
	std::getline(scenarioFin, line);
	// TYPE
	std::getline(scenarioFin, line);
	// ID
	std::getline(scenarioFin, line);

	if (indConfiguration == 0) {
		while (true) {
			std::getline(scenarioFin, line);
			pg_stringstreamStoreLine(&sstream, &line);
			sstream >> ID; // string "client" or end with "/udp_remote_client"
			if (ID.compare("/remote_IPCam") == 0) {
				break;
			}
			else if (ID.compare("IPCam") != 0) {
				sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"IPCam\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
			}
			VideoCapture cur_IPCam;

			std::getline(scenarioFin, line);
			pg_stringstreamStoreLine(&sstream, &line);
			sstream >> temp; // string "IPCam_IP"
			sstream >> temp2; // string "IPCam_Port"
			sstream >> temp3; // string "IPCam_Device"
			//String fulllAddress = "http://" + temp + ":" + temp2;
			// "rtsp://[username]:[pass]@[ip address]/media/video1"
			// fulllAddress = "rtsp://" + temp + "/H264?ch=1&subtype=0";
			// fulllAddress = "rtsp://" + temp + "/H264?ch=1&subtype=0";
			//fulllAddress = "rtsp://" + temp + "/H264";
			//fulllAddress = "rtsp://" + temp + "/mjpeg.cgi?user=yukao.nagemi@gmail.com&password=Fire5432_&channel=0&.mjpg";
			//fulllAddress = "rtsp://yukao.nagemi@gmail.com:Fire5432_@" + temp + ":" + temp2 + "/onvif1";
			//fulllAddress = "rtsp://" + temp + ":" + temp2 + "/onvif1";
			//fulllAddress = "rtsp://" + temp + "/onvif1";
			// rtsp://192.168.1.65:8554/main
			//fulllAddress = "rtsp://192.168.1.65:8554/main";
			pg_IPCam_capture_address.push_back("rtsp://" + temp + ":" + temp2 + "/" + temp3);
			pg_IPCam_capture.push_back(cur_IPCam);
		}
	}
	else {
		while (true) {
			std::getline(scenarioFin, line);
			pg_stringstreamStoreLine(&sstream, &line);
			sstream >> ID; // string "client" or end with "/udp_remote_client"
			if (ID.compare("/remote_IPCam") == 0) {
				break;
			}
			else if (ID.compare("IPCam") != 0) {
				sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"IPCam\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
			}
		}
	}
}

////////////////////////////////////
////// SHADERS
////////////////////////////////////
void pg_parseScenarioShaders(std::ifstream& scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;

	// shader file names
	pg_Shader_File_Names[indConfiguration] = NULL;

	// shader_files Number of files<
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID;
	if (ID.compare("shader_files") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"shader_files<\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}

	// VERBATIM
	std::getline(scenarioFin, line);
	// TYPE
	std::getline(scenarioFin, line);
	// ID
	std::getline(scenarioFin, line);

	pg_Shader_File_Names[indConfiguration] = new string[pg_enum_shader_TotalNbTypes];
	pg_Shader_nbStages[indConfiguration] = new int[pg_enum_shader_TotalNbTypes];
	pg_Shader_Stages[indConfiguration] = new GLenum * [pg_enum_shader_TotalNbTypes];
	for (int ind_shader_type = 0; ind_shader_type < pg_enum_shader_TotalNbTypes; ind_shader_type++) {
		pg_Shader_File_Names[indConfiguration][ind_shader_type] = string("");
		pg_Shader_nbStages[indConfiguration][ind_shader_type] = 0;
	}
	//std::unordered_map<int, std::string> pg_stringShaderTypes = {
//	{ pg_enum_shader_ParticleAnimation, "ParticleAnimation" },
//	{ pg_enum_shader_Update, "Update" },
//	{ pg_enum_shader_ParticleRender, "ParticleRender" },
//	{ pg_enum_shader_Mixing, "Mixing" },
//	{ pg_enum_shader_Master, "Master" },
//	{ pg_enum_shader_Sensor, "Sensor" },
//	{ pg_enum_shader_ClipArt, "ClipArt" },
//	{ pg_enum_shader_Mesh, "Mesh" },
//	{ pg_enum_shader_TotalNbTypes, "TotalNbTypes" },
//};
	for (int ind_shader_type = 0; ind_shader_type < pg_enum_shader_TotalNbTypes; ind_shader_type++) {
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // shader type
		if (ID != pg_stringShaderTypes[ind_shader_type]) {
			sprintf(pg_errorStr, "Error: incorrect shader type expected string \"%s\" not found! (instead \"%s\")", pg_stringShaderTypes[ind_shader_type].c_str(), ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}
		sstream >> pg_Shader_File_Names[indConfiguration][ind_shader_type];
		sstream >> pg_Shader_nbStages[indConfiguration][ind_shader_type];
		if (pg_Shader_nbStages[indConfiguration][ind_shader_type] > 0 && pg_Shader_File_Names[indConfiguration][ind_shader_type] != "NULL") {
			pg_Shader_Stages[indConfiguration][ind_shader_type] = new GLenum[pg_Shader_nbStages[indConfiguration][ind_shader_type]];
			for (int ind_shader_stage = 0; ind_shader_stage < pg_Shader_nbStages[indConfiguration][ind_shader_type]; ind_shader_stage++) {
				string shader_stage;
				sstream >> shader_stage;
				if (shader_stage.compare("GL_VERTEX_SHADER") == 0) {
					pg_Shader_Stages[indConfiguration][ind_shader_type][ind_shader_stage] = GL_VERTEX_SHADER;
				}
				else if (shader_stage.compare("GL_TESS_CONTROL_SHADER") == 0) {
					pg_Shader_Stages[indConfiguration][ind_shader_type][ind_shader_stage] = GL_TESS_CONTROL_SHADER;
				}
				else if (shader_stage.compare("GL_TESS_EVALUATION_SHADER") == 0) {
					pg_Shader_Stages[indConfiguration][ind_shader_type][ind_shader_stage] = GL_TESS_EVALUATION_SHADER;
				}
				else if (shader_stage.compare("GL_GEOMETRY_SHADER") == 0) {
					pg_Shader_Stages[indConfiguration][ind_shader_type][ind_shader_stage] = GL_GEOMETRY_SHADER;
				}
				else if (shader_stage.compare("GL_FRAGMENT_SHADER") == 0) {
					pg_Shader_Stages[indConfiguration][ind_shader_type][ind_shader_stage] = GL_FRAGMENT_SHADER;
				}
				else {
					sprintf(pg_errorStr, "Error: unknown shader type [%s]!", shader_stage.c_str()); pg_ReportError(pg_errorStr); throw 430;
				}
			}
		}
		if (ind_shader_type == pg_enum_shader_ParticleAnimation
			&& (pg_Shader_nbStages[indConfiguration][ind_shader_type] == 0
				|| pg_Shader_File_Names[indConfiguration][ind_shader_type] == "NULL")) {
			sprintf(pg_errorStr, "Error: active shader file for Particle Animation is missing in header file (name %s/configuration #%d/%s, nb stages %d)",
				pg_Shader_File_Names[indConfiguration][ind_shader_type].c_str(), indConfiguration, pg_ScenarioFileNames[indConfiguration].c_str(),
				pg_Shader_nbStages[indConfiguration][ind_shader_type]); pg_ReportError(pg_errorStr); throw(6778);
			printf("Particle aniation shader, ");
		}
		if (ind_shader_type == pg_enum_shader_ParticleRender
			&& (pg_Shader_nbStages[indConfiguration][ind_shader_type] == 0
				|| pg_Shader_File_Names[indConfiguration][ind_shader_type] == "NULL")) {
			sprintf(pg_errorStr, "Error: active shader file for Particle Rendering is missing in header file (name %s/configuration #%d/%s, nb stages %d)",
				pg_Shader_File_Names[indConfiguration][ind_shader_type].c_str(), indConfiguration, pg_ScenarioFileNames[indConfiguration].c_str(),
				pg_Shader_nbStages[indConfiguration][ind_shader_type]); pg_ReportError(pg_errorStr); throw(6778);
			printf("Particle aniation shader, ");
		}
		if (pg_FullScenarioActiveVars[indConfiguration][_sensor_layout]) {
			if (ind_shader_type == pg_enum_shader_Sensor
				&& (pg_Shader_nbStages[indConfiguration][ind_shader_type] == 0
					|| pg_Shader_File_Names[indConfiguration][ind_shader_type] == "NULL")) {
				sprintf(pg_errorStr, "Error: active shader file for Sensors is missing in header file (name %s/configuration #%d/%s, nb stages %d)",
					pg_Shader_File_Names[indConfiguration][ind_shader_type].c_str(), indConfiguration, pg_ScenarioFileNames[indConfiguration].c_str(),
					pg_Shader_nbStages[indConfiguration][ind_shader_type]); pg_ReportError(pg_errorStr); throw(6778);
				printf("Particle aniation shader, ");
			}
		}
		if (pg_FullScenarioActiveVars[indConfiguration][_activeClipArts]) {
			if (ind_shader_type == pg_enum_shader_ClipArt
				&& (pg_Shader_nbStages[indConfiguration][ind_shader_type] == 0
					|| pg_Shader_File_Names[indConfiguration][ind_shader_type] == "NULL")) {
				sprintf(pg_errorStr, "Error: active shader file for Clip Arts is missing in header file (name %s, nb stages%d)", pg_Shader_File_Names[indConfiguration][ind_shader_type].c_str(), pg_Shader_nbStages[indConfiguration][ind_shader_type]); pg_ReportError(pg_errorStr); throw(6778);
				printf("Particle aniation shader, ");
			}
		}
		if (pg_FullScenarioActiveVars[indConfiguration][_activeMeshes]) {
			if (ind_shader_type == pg_enum_shader_Mesh
				&& (pg_Shader_nbStages[indConfiguration][ind_shader_type] == 0
					|| pg_Shader_File_Names[indConfiguration][ind_shader_type] == "NULL")) {
				sprintf(pg_errorStr, "Error: active shader file for Meshes is missing in header file (name %s/configuration #%d/%s, nb stages %d)",
					pg_Shader_File_Names[indConfiguration][ind_shader_type].c_str(), indConfiguration, pg_ScenarioFileNames[indConfiguration].c_str(),
					pg_Shader_nbStages[indConfiguration][ind_shader_type]); pg_ReportError(pg_errorStr); throw(6778);
				printf("Particle aniation shader, ");
			}
		}
		if (ind_shader_type == pg_enum_shader_Update
			&& (pg_Shader_nbStages[indConfiguration][ind_shader_type] == 0
				|| pg_Shader_File_Names[indConfiguration][ind_shader_type] == "NULL")) {
			sprintf(pg_errorStr, "Error: active shader file for Update is missing in header file (name %s/configuration #%d/%s, nb stages %d)",
				pg_Shader_File_Names[indConfiguration][ind_shader_type].c_str(), indConfiguration, pg_ScenarioFileNames[indConfiguration].c_str(),
				pg_Shader_nbStages[indConfiguration][ind_shader_type]); pg_ReportError(pg_errorStr); throw(6778);
			printf("Particle aniation shader, ");
		}
		if (ind_shader_type == pg_enum_shader_Mixing
			&& (pg_Shader_nbStages[indConfiguration][ind_shader_type] == 0
				|| pg_Shader_File_Names[indConfiguration][ind_shader_type] == "NULL")) {
			sprintf(pg_errorStr, "Error: active shader file for Mixing is missing in header file (name %s/configuration #%d/%s, nb stages %d)",
				pg_Shader_File_Names[indConfiguration][ind_shader_type].c_str(), indConfiguration, pg_ScenarioFileNames[indConfiguration].c_str(),
				pg_Shader_nbStages[indConfiguration][ind_shader_type]); pg_ReportError(pg_errorStr); throw(6778);
			printf("Particle aniation shader, ");
		}
		if (ind_shader_type == pg_enum_shader_Master
			&& (pg_Shader_nbStages[indConfiguration][ind_shader_type] == 0
				|| pg_Shader_File_Names[indConfiguration][ind_shader_type] == "NULL")) {
			sprintf(pg_errorStr, "Error: active shader file for Master is missing in header file (name %s/configuration #%d/%s, nb stages %d)",
				pg_Shader_File_Names[indConfiguration][ind_shader_type].c_str(), indConfiguration, pg_ScenarioFileNames[indConfiguration].c_str(),
				pg_Shader_nbStages[indConfiguration][ind_shader_type]); pg_ReportError(pg_errorStr); throw(6778);
			printf("Particle aniation shader, ");
		}
	}

	// /shader_files
	std::getline(scenarioFin, line);
}


void pg_parseScenarioDirectories(std::ifstream& scenarioFin, int indConfiguration) {
	std::stringstream  sstream;
	string line;
	string ID;
	string temp;

	// directories
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID;
	if (ID.compare("directories") != 0) {
		sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"directories\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
	}
	// default value
	pg_scripts_directory = "./Data/core-data/scripts/";
	pg_videos_directory = "./Data/core-data/videos/";
	pg_soundtracks_directory = "./Data/core-data/soundtracks/";
	pg_cliparts_directory = "./Data/core-data/ClipArts/";
	pg_diaporamas_directory = "./Data/core-data/images/";
	pg_meshes_directory = "./Data/core-data/meshes/";
	pg_messages_directory = "./Data/core-data/messages/";
	pg_SVGpaths_directory = "./Data/core-data/SVGs/";
	pg_textures_directory = "./Data/core-data/textures/";
	pg_shaders_directory = "./Projects/shaders/";
	while (true) {
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string "client" or end with "/udp_remote_client"
		if (ID.compare("/directories") == 0) {
			break;
		}
		else if (ID.compare("snapshots") == 0) {
			if (indConfiguration == 0) {
				sstream >> pg_snapshots_dir_path_prefix; // string of the snapshots and log file directory
			}
		}
		else if (ID.compare("screen_font") == 0) {
			if (indConfiguration == 0) {
				sstream >> pg_texDataScreenFont.texture_fileName;
				pg_completeToFullPath(pg_texDataScreenFont.texture_fileName);
			}
		}
		else if (ID.compare("scripts") == 0) {
			if (indConfiguration == 0) {
				sstream >> pg_scripts_directory;
				pg_completeToFullPath(pg_scripts_directory);
			}
		}
		else if (ID.compare("videos") == 0) {
			if (indConfiguration == 0) {
				sstream >> pg_videos_directory;
				pg_completeToFullPath(pg_videos_directory);
			}
		}
		else if (ID.compare("soundtracks") == 0) {
			if (indConfiguration == 0) {
				sstream >> pg_soundtracks_directory;
				pg_completeToFullPath(pg_soundtracks_directory);
			}
		}
		else if (ID.compare("cliparts") == 0) {
			if (indConfiguration == 0) {
				sstream >> pg_cliparts_directory;
				pg_completeToFullPath(pg_cliparts_directory);
			}
		}
		else if (ID.compare("diaporamas") == 0) {
			if (indConfiguration == 0) {
				sstream >> pg_diaporamas_directory;
				pg_completeToFullPath(pg_diaporamas_directory);
			}
		}
		else if (ID.compare("meshes") == 0) {
			if (indConfiguration == 0) {
				sstream >> pg_meshes_directory;
				pg_completeToFullPath(pg_meshes_directory);
			}
		}
		else if (ID.compare("messages") == 0) {
			if (indConfiguration == 0) {
				sstream >> pg_messages_directory;
				pg_completeToFullPath(pg_messages_directory);
			}
		}
		else if (ID.compare("SVGpaths") == 0) {
			if (indConfiguration == 0) {
				sstream >> pg_SVGpaths_directory;
				pg_completeToFullPath(pg_SVGpaths_directory);
			}
		}
		else if (ID.compare("textures") == 0) {
			if (indConfiguration == 0) {
				sstream >> pg_textures_directory;
				pg_completeToFullPath(pg_textures_directory);
			}
		}
		else if (ID.compare("clips") == 0) {
			if (indConfiguration == 0) {
				sstream >> pg_clips_directory;
				pg_completeToFullPath(pg_clips_directory);
			}
		}
		else if (ID.compare("shaders") == 0) {
			if (indConfiguration == 0) {
				sstream >> pg_shaders_directory;
				pg_completeToFullPath(pg_shaders_directory);
			}
		}
		else {
			sprintf(pg_errorStr, "Error: incorrect configuration \"%s\" is an unknown directory path type in configuration file (directories)", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}
	}
}

////////////////////////////////////
////// FULL SCENARIO
////////////////////////////////////
void pg_parseScenarioFile(std::ifstream& scenarioFin, int indConfiguration) {

	////////////////////////////
	////// CONFIGURATION VARIABLE INITIALIZATION
	string line;
	string ID;
	string temp;
	string temp2;
	string temp3;
	std::stringstream  sstream;

	int indVar;

	//////////////////////////////////////////////////////////
	// READS SCENARIO FILE

	// RANK
	std::getline(scenarioFin, line);
	// VERBATIM
	std::getline(scenarioFin, line);
	// TYPE
	std::getline(scenarioFin, line);
	// ID
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	int nb_vars = 0;
	// initializations for scenario variables: value arrray and active vars
	for (int indP = 0; indP < _MaxInterpVarIDs; indP++) {
		pg_FullScenarioActiveVars[indConfiguration][indP] = false;
		if (pg_FullScenarioVarIndiceRanges[indP][0] == -1) {
			pg_InitialValuesInterpVar[indConfiguration][indP].init_ScenarioValue(0., "", NULL, 0);
			pg_LastGUIShippedValuesInterpVar[indConfiguration][indP].init_ScenarioValue(0., "", NULL, 0);
		}
		else {
			pg_InitialValuesInterpVar[indConfiguration][indP].init_ScenarioValue(0., "", NULL, pg_FullScenarioVarIndiceRanges[indP][1]);
			pg_LastGUIShippedValuesInterpVar[indConfiguration][indP].init_ScenarioValue(0., "", NULL, pg_FullScenarioVarIndiceRanges[indP][1]);
		}
	}

	// loop over all the variables of the full scenario, but only the active variables for the current configuration are used, 
	// the other ones keep a constant initial value of the full scenario
	for (int indP = 0; indP < _MaxInterpVarIDs; indP++) {
		if (sstream.eof()) {
			break;
			//sprintf(pg_errorStr, "Error: scenario (index %d) of configuration %d missing fewer variables in scenario files than expected\n", indP, indConfiguration); pg_ReportError(pg_errorStr); throw 50;
		}
		sstream >> temp;
		// first item is "ID"
		if (indP > 0) {
			// the index of the current scenario var into the global list of variables cumulated from all the scenarios
			indVar = pg_varID_to_rank(temp, indConfiguration);
			pg_ConfigScenarioVarRank[indConfiguration][indP - 1] = indVar;
			pg_ConfigScenarioVarIDs[indConfiguration][indP - 1] = temp;
			if (indVar == -1) {
				sprintf(pg_errorStr, "Error: scenario variable %s (index %d) of configuration %d not found in the variable list generated by python generator\n", temp.c_str(), indP, indConfiguration); pg_ReportError(pg_errorStr); throw 50;
			}
			pg_FullScenarioActiveVars[indConfiguration][indVar] = true;
			nb_vars++;
		}
	}

	// stores the number of scenario variabes
	pg_ScenarioVarNb[indConfiguration] = nb_vars;
	//std::cout << "configuration #" << indConfiguration << " nb vars " << pg_ScenarioVarNb[indConfiguration] << "\n";
	//printf("Loading scenario %s with %d variables\n", pg_ScenarioFileNames[indConfiguration].c_str(), pg_ScenarioVarNb[indConfiguration]);

	// CALLBACKS
	std::getline(scenarioFin, line);
	// GUI
	std::getline(scenarioFin, line);
	// SHADER
	std::getline(scenarioFin, line);
	// PULSE
	std::getline(scenarioFin, line);

	// initial_values
	std::getline(scenarioFin, line);
	// storing the initial values
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	for (int indP = 0; indP < pg_ScenarioVarNb[indConfiguration]; indP++) {
		indVar = pg_ConfigScenarioVarRank[indConfiguration][indP];
		if (pg_FullScenarioActiveVars[indConfiguration][indVar]) {
			pg_ConfigScenarioVarRank[indConfiguration][indVar];
			if (sstream.eof()) {
				sprintf(pg_errorStr, "Error: missing initial value %s %d\n", temp.c_str(), indVar); pg_ReportError(pg_errorStr); throw 50;
			}
			sstream >> temp;
			if (pg_FullScenarioVarTypes[indVar] != _pg_string) {
				// dimension 1 variable: number
				if (pg_FullScenarioVarIndiceRanges[indVar][0] == -1) {
					bool has_only_digits = (temp.find_first_not_of("0123456789-.E") == string::npos);
					if (!has_only_digits) {
						sprintf(pg_errorStr, "Error: non numeric variable initial value for var %d (%s)\n", indVar, pg_FullScenarioVarStrings[indVar].c_str()); pg_ReportError(pg_errorStr); throw 50;
					}
					pg_InitialValuesInterpVar[indConfiguration][indVar].val_num = pg_stod(temp);
				}
				// array
				else {
					unsigned int size_of_array = pg_FullScenarioVarIndiceRanges[indVar][1] - pg_FullScenarioVarIndiceRanges[indVar][0];
					vector<string> values = pg_split_string(temp, '/');
					if (values.size() != size_of_array) {
						sprintf(pg_errorStr, "Error: numeric array variable expects %d initial value not %d (%s[%d..%d])\n", size_of_array, values.size(), pg_FullScenarioVarStrings[indVar].c_str(), pg_FullScenarioVarIndiceRanges[indVar][0], pg_FullScenarioVarIndiceRanges[indVar][1]); pg_ReportError(pg_errorStr); throw 50;
					}
					int indVect = 0;
					for (int index = pg_FullScenarioVarIndiceRanges[indVar][0]; index < pg_FullScenarioVarIndiceRanges[indVar][1]; index++) {
						pg_InitialValuesInterpVar[indConfiguration][indVar].val_array[index] = pg_stod(values[indVect]);
						indVect++;
					}
				}
			}
			else {
				pg_InitialValuesInterpVar[indConfiguration][indVar].val_string = temp;
			}
			//std::cout << indP << " " << pg_InitialValuesInterpVar[indConfiguration][indP] << " \n";
			pg_LastGUIShippedValuesInterpVar[indConfiguration][indVar].const_value(MAXFLOAT);
		}
	}
	// checks that the number of variables is what is expected
	//sstream >> ID;
	if (!sstream.eof()) {
		sprintf(pg_errorStr, "Error: too many initial variable values %s: expected %d\n", sstream.str().c_str(), pg_ScenarioVarNb[indConfiguration]); pg_ReportError(pg_errorStr); throw 50;
	}

	//std::cout << "\n";
	// /initial_values
	std::getline(scenarioFin, line);


	////////////////////////////
	////// SCENARIO
	// Number of scenes
	std::getline(scenarioFin, line);
	pg_stringstreamStoreLine(&sstream, &line);
	sstream >> ID; // string scenario

	pg_InterpolationScene.init_scene();
	pg_variable_param_input_type = new pg_Parameter_Input_Type[_MaxInterpVarIDs];
	for (int indP = 0; indP < pg_ScenarioVarNb[indConfiguration]; indP++) {
		indVar = pg_ConfigScenarioVarRank[indConfiguration][indP];
		if (pg_FullScenarioActiveVars[indConfiguration][indVar]) {
			pg_variable_param_input_type[indVar] = pg_enum_PG_SCENARIO;
		}
	}

	printf("Loading scenario %s with %d variables\n", pg_ScenarioFileNames[indConfiguration].c_str(), pg_ScenarioVarNb[indConfiguration]);
	int nbScenesInScenario = 0;
	while(true) {
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string scene
		if (ID.compare("/scenario") == 0) {
			break;
		}
		else if (ID.compare("scene") != 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"scene\" not found! (instead \"%s\")\n", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}
		
		Scene newScene;

		newScene.init_scene();

		sstream >> newScene.scene_IDs;
		std::cout << "scene: " << newScene.scene_IDs << "\n";
		sstream >> newScene.scene_duration;
		sstream >> temp;  // change_when_ends or prolong_when_ends
		if (temp.compare("change_when_ends") == 0) {
			newScene.scene_change_when_ends = true;
		}
		else if (temp.compare("prolong_when_ends") == 0) {
			newScene.scene_change_when_ends = false;
		}
		else {
			newScene.scene_change_when_ends = true;
			sprintf(pg_errorStr, "Error: one of strings expected as scene ending mode: \"change_when_ends\" or \"prolong_when_ends\" not \"%s\" for scene %d %s\n", temp.c_str(), nbScenesInScenario, newScene.scene_IDs.c_str()); pg_ReportError(pg_errorStr); throw 50;
		}
		// second and third comments possibly displayed on the interface to help the user
		if (!sstream.eof()) {
			sstream >> newScene.scene_Msg1;
		}
		else {
			newScene.scene_Msg1 = "";
		}
		if (!sstream.eof()) {
			sstream >> newScene.scene_Msg2;
		}
		else {
			newScene.scene_Msg2 = "";
		}

		//std::cout << "duration : " << 
		//  newScene.scene_duration << " sc #" << nbScenesInScenario << "\n";

		if (newScene.scene_duration <= 0.0) {
			sprintf(pg_errorStr, "Error: null scene #%d duration [%f]!", nbScenesInScenario + 1, newScene.scene_duration); pg_ReportError(pg_errorStr); throw 50;
		}
		if (nbScenesInScenario > 0) {
			newScene.scene_initial_time = pg_Scenario[indConfiguration][nbScenesInScenario - 1].scene_final_time;
		}
		else {
			newScene.scene_initial_time = 0.0;
		}
		newScene.scene_final_time
			= newScene.scene_initial_time + newScene.scene_duration;

		// verbatim
		std::getline(scenarioFin, line);
		// var comment
		std::getline(scenarioFin, line);
		// std::cout << "var comment: " << line << "\n";

		// storing the initial values
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		//std::cout << "line :" << line;
		//std::cout << "\ninitial values :\n";
		for (int indP = 0; indP < pg_ScenarioVarNb[indConfiguration]; indP++) {
			indVar = pg_ConfigScenarioVarRank[indConfiguration][indP];
			if (pg_FullScenarioActiveVars[indConfiguration][indVar]) {
				if (sstream.eof()) {
					sprintf(pg_errorStr, "Error: missing initial value in scene %d var %d (%s)\n",
						nbScenesInScenario + 1, indVar, pg_FullScenarioVarMessages[indVar].c_str()); pg_ReportError(pg_errorStr); throw 50;
				}
				sstream >> temp;
				if (pg_FullScenarioVarTypes[indVar] == _pg_string) {
					newScene.scene_initial_parameters[indVar].val_string = temp;
				}
				else {
					// dimension 1 variable: number
					if (pg_FullScenarioVarIndiceRanges[indVar][0] == -1) {
						bool has_only_digits = (temp.find_first_not_of("0123456789-.E") == string::npos);
						if (!has_only_digits) {
							sprintf(pg_errorStr, "Error: non numeric variable initial value in scene %d var %d (%s) type %d\n",
								nbScenesInScenario + 1, indVar, pg_FullScenarioVarStrings[indVar].c_str(), pg_FullScenarioVarTypes[indVar]); pg_ReportError(pg_errorStr); throw 50;
						}
						else {
							newScene.scene_initial_parameters[indVar].val_num = pg_stod(temp);
						}
					}
					// array
					else {
						unsigned int size_of_array = pg_FullScenarioVarIndiceRanges[indVar][1] - pg_FullScenarioVarIndiceRanges[indVar][0];
						vector<string> values = pg_split_string(temp, '/');
						if (values.size() != size_of_array) {
							sprintf(pg_errorStr, "Error: numeric array variable expects %d scene initial values not %d (%s[%d..%d])\n", size_of_array, values.size(), pg_FullScenarioVarStrings[indVar].c_str(), pg_FullScenarioVarIndiceRanges[indVar][0], pg_FullScenarioVarIndiceRanges[indVar][1]); pg_ReportError(pg_errorStr); throw 50;
						}
						int indVect = 0;
						for (int index = pg_FullScenarioVarIndiceRanges[indVar][0]; index < pg_FullScenarioVarIndiceRanges[indVar][1]; index++) {
							newScene.scene_initial_parameters[indVar].val_array[index] = pg_stod(values[indVect]);
							indVect++;
						}
					}
				}
			}
		}
		// checks that the number of variables is what is expected
		//sstream >> ID;
		if (!sstream.eof()) {
			sprintf(pg_errorStr, "Error: too many initial variable values in scene %d (%s)\n", nbScenesInScenario + 1, sstream.str().c_str()); pg_ReportError(pg_errorStr); throw 50;
		}

		// storing the final values
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		//std::cout << "line :" << line;
		//std::cout << "\nfinal values :\n";

		for (int indP = 0; indP < pg_ScenarioVarNb[indConfiguration]; indP++) {
			indVar = pg_ConfigScenarioVarRank[indConfiguration][indP];
			if (pg_FullScenarioActiveVars[indConfiguration][indVar]) {
				if (sstream.eof()) {
					sprintf(pg_errorStr, "Error: missing final value in scene %d var %d (%s)\n", nbScenesInScenario + 1, indVar, temp.c_str()); pg_ReportError(pg_errorStr); throw 50;
				}
				sstream >> temp;
				//printf("val %s\n", temp.c_str());
				if (pg_FullScenarioVarTypes[indVar] == _pg_string) {
					newScene.scene_final_parameters[indVar].val_string = temp;
				}
				else {
					// dimension 1 variable: number
					if (pg_FullScenarioVarIndiceRanges[indVar][0] == -1) {
						bool has_only_digits = (temp.find_first_not_of("0123456789-.E") == string::npos);
						if (!has_only_digits) {
							sprintf(pg_errorStr, "Error: non numeric variable initial value in scene %d var %d (%s) type %d\n",
								nbScenesInScenario + 1, indVar, pg_FullScenarioVarStrings[indVar].c_str(), pg_FullScenarioVarTypes[indVar]); pg_ReportError(pg_errorStr); throw 50;
						}
						else {
							newScene.scene_final_parameters[indVar].val_num = pg_stod(temp);
						}
					}
					// array
					else {
						unsigned int size_of_array = pg_FullScenarioVarIndiceRanges[indVar][1] - pg_FullScenarioVarIndiceRanges[indVar][0];
						vector<string> values = pg_split_string(temp, '/');
						if (values.size() != size_of_array) {
							sprintf(pg_errorStr, "Error: numeric array variable expects %d scene initial values not %d (%s[%d..%d])\n", size_of_array, values.size(), pg_FullScenarioVarStrings[indVar].c_str(), pg_FullScenarioVarIndiceRanges[indVar][0], pg_FullScenarioVarIndiceRanges[indVar][1]); pg_ReportError(pg_errorStr); throw 50;
						}
						int indVect = 0;
						for (int index = pg_FullScenarioVarIndiceRanges[indVar][0]; index < pg_FullScenarioVarIndiceRanges[indVar][1]; index++) {
							newScene.scene_final_parameters[indVar].val_array[index] = pg_stod(values[indVect]);
							indVect++;
						}
					}
				}
			}
			// std::cout << scene_final_parameters[nbScenesInScenario][indVar].val_num << " ";
		}
		// checks that the number of variables is what is expected
		//sstream >> ID;
		if (!sstream.eof()) {
			sprintf(pg_errorStr, "Error: too many final variable values in scene %d\n", nbScenesInScenario + 1); pg_ReportError(pg_errorStr); throw 50;
		}

		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		//printf("line interp %s\n", line.c_str());

		// storing the interpolation mode
		for (int indP = 0; indP < pg_ScenarioVarNb[indConfiguration]; indP++) {
			indVar = pg_ConfigScenarioVarRank[indConfiguration][indP];
			if (pg_FullScenarioActiveVars[indConfiguration][indVar]) {
				char valCh = 0;
				char valCh2 = 0;
				string vals, val2s;
				float val3;

				newScene.scene_interpolations[indVar].offSet = 0.0;
				newScene.scene_interpolations[indVar].duration = 1.0;
				if (pg_FullScenarioVarIndiceRanges[indVar][0] == -1) {
					newScene.scene_interpolations[indVar].midTermValue
						= 0.5 * (newScene.scene_initial_parameters[indVar].val_num
							+ newScene.scene_final_parameters[indVar].val_num);
				}
				else {
					for (int index = pg_FullScenarioVarIndiceRanges[indVar][0]; index < pg_FullScenarioVarIndiceRanges[indVar][1]; index++) {
						newScene.scene_interpolations[indVar].midTermValueArray[index]
							= 0.5 * (newScene.scene_initial_parameters[indVar].val_array[index]
								+ newScene.scene_final_parameters[indVar].val_array[index]);
					}
				}

				if (sstream.eof()) {
					sprintf(pg_errorStr, "Error: missing interpolation value in scene %d (%s) var %d (%s)\n",
						nbScenesInScenario + 1, newScene.scene_IDs.c_str(), indVar + 1, pg_FullScenarioVarMessages[indVar].c_str()); pg_ReportError(pg_errorStr); throw 50;
				}
				sstream >> std::skipws >> temp;
				valCh = temp.at(0);
				//printf("valch %d %c temp %s\n", (int)valCh, valCh, temp.c_str());
				if (temp.length() > 1) {
					valCh2 = temp.at(1);
					if (valCh2 != 'k') {
						sprintf(pg_errorStr, "Error: only k modifier is allowed on interpolation mode, not %c for %c interpolation in scene %d var %d\n", 
							valCh2, valCh, nbScenesInScenario + 1, indVar + 1); pg_ReportError(pg_errorStr); throw 50;
					}
				}
				else {
					valCh2 = ' ';
				}

				// l: value interpolates linearly between initial and final value from 0.0% to 1.0%
				// L: value is initial from 0.0% until offset, 
				// interpolates linearly between initial and final value from offset to offset + duration
				// is final value between offset + duration and 1.0%
				if (valCh == 'l' || valCh == 'L') {
					newScene.scene_interpolations[indVar].interpolation_mode = pg_enum_linear_interpolation;
					if (valCh2 == ' ') {
						newScene.scene_interpolations[indVar].initialization_mode = pg_enum_scenario_initial;
					}
					else if (valCh2 == 'k') {
						newScene.scene_interpolations[indVar].initialization_mode = pg_current_value;
					}
					if (valCh == 'L') {
						sstream >> vals;
						sstream >> val2s;
						double val = pg_stringToDuration(vals, newScene.scene_duration, nbScenesInScenario + 1, indVar + 1);
						double val2 = pg_stringToDuration(val2s, newScene.scene_duration, nbScenesInScenario + 1, indVar + 1);
						if (val < 0.0 || val2 < 0.0) {
							sprintf(pg_errorStr, "Error: one of values of L(inear) in scene %d var %d lower than 0.0: %.3f %.3f\n", nbScenesInScenario + 1, indVar + 1, val, val2); pg_ReportError(pg_errorStr); throw 50;
						}
						if (val <= 1.0) {
							newScene.scene_interpolations[indVar].offSet = val;
							if (float(val + val2) <= 1.00001f) {
								// deals with approximate values that can summ above 1.0
								if (float(val + val2) > 1.0f) {
									val2 = 1.0f - val;
								}
								newScene.scene_interpolations[indVar].duration = val2;
								if (newScene.scene_interpolations[indVar].duration <= 0.0) {
									sprintf(pg_errorStr, "Error: null L(inear) in scene %d var %d duration [%f]!", nbScenesInScenario + 1, indVar + 1, newScene.scene_interpolations[indVar].duration); pg_ReportError(pg_errorStr); throw 50;
								}
							}
							else {
								sprintf(pg_errorStr, "Error: total duration of L(inear) in scene %d var %d greater than 1.0: %.3f + %.3f\n", nbScenesInScenario + 1, indVar + 1, val, val2); pg_ReportError(pg_errorStr); throw 50;
							}
						}
						else {
							sprintf(pg_errorStr, "Error: offset value L(inear) in scene %d var %d greater than 1.0: %.3f\n", nbScenesInScenario + 1, indVar + 1, val); pg_ReportError(pg_errorStr); throw 50;
						}
						// std::cout << "L " << val << " " << val2 << " ";

					}

				}
				// c: value interpolates cosinely between initial and final value from 0.0% to 1.0%
				// C: value is initial from 0.0% until offset, 
				// interpolates cosinely between initial and final value from offset to offset + duration
				// is final value between offset + duration and 1.0%
				// COSINE INTERPOLATION
				else if (valCh == 'c' || valCh == 'C') {
					newScene.scene_interpolations[indVar].interpolation_mode = pg_enum_cosine_interpolation;
					if (valCh2 == ' ') {
						newScene.scene_interpolations[indVar].initialization_mode = pg_enum_scenario_initial;
					}
					else if (valCh2 == 'k') {
						newScene.scene_interpolations[indVar].initialization_mode = pg_current_value;
					}
					if (valCh == 'C') {
						sstream >> vals;
						sstream >> val2s;
						double val = pg_stringToDuration(vals, newScene.scene_duration, nbScenesInScenario + 1, indVar + 1);
						double val2 = pg_stringToDuration(val2s, newScene.scene_duration, nbScenesInScenario + 1, indVar + 1);
						if (val < 0.0 || val2 < 0.0) {
							sprintf(pg_errorStr, "Error: one of values of C(osine) in scene %d var %d lower than 0.0: %.3f %.3f\n", nbScenesInScenario + 1, indVar + 1, val, val2); pg_ReportError(pg_errorStr); throw 50;
						}
						if (val <= 1.0) {
							newScene.scene_interpolations[indVar].offSet = val;
							// deals with approximate values that can summ above 1.0
							if (float(val + val2) <= 1.00001f) {
								if (float(val + val2) > 1.0f) {
									val2 = 1.0f - val;
								}
								newScene.scene_interpolations[indVar].duration = val2;
								if (newScene.scene_interpolations[indVar].duration <= 0.0) {
									sprintf(pg_errorStr, "Error: null C(osine) in scene %d var %d duration [%f]!", nbScenesInScenario + 1, indVar + 1, newScene.scene_interpolations[indVar].duration); pg_ReportError(pg_errorStr); throw 50;
								}
							}
							else {
								sprintf(pg_errorStr, "Error: total duration of C(osine) in scene %d var %d greater than 1.0: %.3f + %.3f\n", nbScenesInScenario + 1, indVar + 1, val, val2); pg_ReportError(pg_errorStr); throw 50;
							}
						}
						else {
							sprintf(pg_errorStr, "Error: offset value C(osine) in scene %d var %d greater than 1.0: %.3f\n", nbScenesInScenario + 1, indVar + 1, val); pg_ReportError(pg_errorStr); throw 50;
						}
					}
				}
				// z: value interpolates cosinely between initial and final value from 0.0% to 1.0%
				// Z: value is initial from 0.0% until offset, 
				// Beizer approximated with a cosine and a non linear input 3x^2-2x^3
				// BEZIER INTERPOLATION
				else if (valCh == 'z' || valCh == 'Z') {
					newScene.scene_interpolations[indVar].interpolation_mode = pg_enum_bezier_interpolation;
					if (valCh2 == ' ') {
						newScene.scene_interpolations[indVar].initialization_mode = pg_enum_scenario_initial;
					}
					else if (valCh2 == 'k') {
						newScene.scene_interpolations[indVar].initialization_mode = pg_current_value;
					}
					if (valCh == 'Z') {
						sstream >> vals;
						sstream >> val2s;
						double val = pg_stringToDuration(vals, newScene.scene_duration, nbScenesInScenario + 1, indVar + 1);
						double val2 = pg_stringToDuration(val2s, newScene.scene_duration, nbScenesInScenario + 1, indVar + 1);
						if (val < 0.0 || val2 < 0.0) {
							sprintf(pg_errorStr, "Error: one of values of Z(Bezier) in scene %d var %d lower than 0.0: %.3f %.3f\n", nbScenesInScenario + 1, indVar + 1, val, val2); pg_ReportError(pg_errorStr); throw 50;
						}
						if (val <= 1.0) {
							newScene.scene_interpolations[indVar].offSet = double(val);
							// deals with approximate values that can summ above 1.0
							if (float(double(val) + double(val2)) <= 1.00001) {
								if (float(double(val) + double(val2)) > 1.0) {
									val2 = 1.0f - val;
								}
								newScene.scene_interpolations[indVar].duration = val2;
								if (newScene.scene_interpolations[indVar].duration <= 0.0) {
									sprintf(pg_errorStr, "Error: null Z(Bezier) in scene %d var %d duration [%f]!", nbScenesInScenario + 1, indVar + 1, newScene.scene_interpolations[indVar].duration); pg_ReportError(pg_errorStr); throw 50;
								}
							}
							else {
								sprintf(pg_errorStr, "Error: total duration of Z(Bezier) in scene %d var %d greater than 1.0: %.3f + %.3f\n", nbScenesInScenario + 1, indVar + 1, val, val2); pg_ReportError(pg_errorStr); throw 50;
							}
						}
						else {
							sprintf(pg_errorStr, "Error: offset value Z(Bezier) in scene %d var %d greater than 1.0: %.3f\n", nbScenesInScenario + 1, indVar + 1, val); pg_ReportError(pg_errorStr); throw 50;
						}
					}
				}
				// e: value interpolates exponentially between initial and final value from 0.0% to 1.0%
				// E: value is initial from 0.0% until offset, 
				// exponential interpolation: alpha ^ exponent
				// EXPONENTIAL INTERPOLATION
				else if (valCh == 'e' || valCh == 'E') {
					newScene.scene_interpolations[indVar].interpolation_mode = pg_enum_exponential_interpolation;
					if (valCh2 == ' ') {
						newScene.scene_interpolations[indVar].initialization_mode = pg_enum_scenario_initial;
					}
					else if (valCh2 == 'k') {
						newScene.scene_interpolations[indVar].initialization_mode = pg_current_value;
					}
					sstream >> val3;
					newScene.scene_interpolations[indVar].exponent = val3;
					if (valCh == 'E') {
						sstream >> vals;
						sstream >> val2s;
						double val = pg_stringToDuration(vals, newScene.scene_duration, nbScenesInScenario + 1, indVar + 1);
						double val2 = pg_stringToDuration(val2s, newScene.scene_duration, nbScenesInScenario + 1, indVar + 1);
						if (val < 0.0 || val2 < 0.0) {
							sprintf(pg_errorStr, "Error: one of values of E(exponential) in scene %d var %d lower than 0.0: %.3f %.3f\n", nbScenesInScenario + 1, indVar + 1, val, val2); pg_ReportError(pg_errorStr); throw 50;
						}
						if (val <= 1.0) {
							newScene.scene_interpolations[indVar].offSet = val;
							// deals with approximate values that can summ above 1.0
							if (float(double(val) + double(val2)) <= 1.00001) {
								if (float(double(val) + double(val2)) > 1.0) {
									val2 = 1.0f - val;
								}
								newScene.scene_interpolations[indVar].duration = val2;
								if (newScene.scene_interpolations[indVar].duration <= 0.0) {
									sprintf(pg_errorStr, "Error: null Z(Bezier) in scene %d var %d duration [%f]!", nbScenesInScenario + 1, indVar + 1, newScene.scene_interpolations[indVar].duration); pg_ReportError(pg_errorStr); throw 50;
								}
							}
							else {
								sprintf(pg_errorStr, "Error: total duration of Z(Bezier) in scene %d var %d greater than 1.0: %.3f + %.3f\n", nbScenesInScenario + 1, indVar + 1, val, val2); pg_ReportError(pg_errorStr); throw 50;
							}
						}
						else {
							sprintf(pg_errorStr, "Error: offset value Z(Bezier) in scene %d var %d greater than 1.0: %.3f\n", nbScenesInScenario + 1, indVar + 1, val); pg_ReportError(pg_errorStr); throw 50;
						}
					}
				}
				// b: bell curve interpolation between initial, median and final value from (0,0,0)% to (0,1,0)% at mid time to (0,0,1)% at the end
				// BELL INTERPOLATION
				else if (valCh == 'b' || valCh == 'B') {
					newScene.scene_interpolations[indVar].interpolation_mode = pg_enum_bell_interpolation;
					if (valCh2 == ' ') {
						newScene.scene_interpolations[indVar].initialization_mode = pg_enum_scenario_initial;
					}
					else if (valCh2 == 'k') {
						newScene.scene_interpolations[indVar].initialization_mode = pg_current_value;
					}
					sstream >> newScene.scene_interpolations[indVar].midTermValue;
					if (pg_FullScenarioVarIndiceRanges[indVar][0] != -1) {
						if (newScene.scene_interpolations[indVar].midTermValueArray != NULL) {
							for (int index = pg_FullScenarioVarIndiceRanges[indVar][0]; index < pg_FullScenarioVarIndiceRanges[indVar][1]; index++) {
								newScene.scene_interpolations[indVar].midTermValueArray[index] = newScene.scene_interpolations[indVar].midTermValue;
							}
						}
						else {
							sprintf(pg_errorStr, "Unexpected null array for bell interpolation %d (%s)!", indVar, pg_FullScenarioVarMessages[indVar].c_str()); pg_ReportError(pg_errorStr); throw 100;
						}
					}
					//printf("Bell interpolation mode in scene %d (%s) parameter %d [%d] [%c] mid term value %.2f!\n",
					//	nbScenesInScenario + 1, newScene.scene_IDs.c_str(), indVar + 1, int(valCh), valCh, 
					//	newScene.scene_interpolations[indVar].midTermValue);
					if (valCh == 'B') {
						sstream >> vals;
						sstream >> val2s;
						double val = pg_stringToDuration(vals, newScene.scene_duration, nbScenesInScenario + 1, indVar + 1);
						double val2 = pg_stringToDuration(val2s, newScene.scene_duration, nbScenesInScenario + 1, indVar + 1);
						if (val < 0.0 || val2 < 0.0) {
							sprintf(pg_errorStr, "Error: one of values of B(ell) in scene %d var %d lower than 0.0: %.3f %.3f\n", nbScenesInScenario + 1, indVar + 1, val, val2); pg_ReportError(pg_errorStr); throw 50;
						}
						if (val <= 1.0) {
							newScene.scene_interpolations[indVar].offSet = val;
							if (float(val + val2) <= 1.00001f) {
								// deals with approximate values that can summ above 1.0
								if (float(val + val2) > 1.0f) {
									val2 = 1.0f - val;
								}
								newScene.scene_interpolations[indVar].duration = val2;
								if (newScene.scene_interpolations[indVar].duration <= 0.0) {
									sprintf(pg_errorStr, "Error: null B(ell) in scene %d var %d duration [%f]!", nbScenesInScenario + 1, indVar + 1, newScene.scene_interpolations[indVar].duration); pg_ReportError(pg_errorStr); throw 50;
								}
							}
							else {
								sprintf(pg_errorStr, "Error: total duration of B(ell) in scene %d var %d greater than 1.0: %.3f + %.3f\n", nbScenesInScenario + 1, indVar + 1, val, val2); pg_ReportError(pg_errorStr); throw 50;
							}
						}
						else {
							sprintf(pg_errorStr, "Error: offset value L(inear) in scene %d var %d greater than 1.0: %.3f\n", nbScenesInScenario + 1, indVar + 1, val); pg_ReportError(pg_errorStr); throw 50;
						}
						// std::cout << "L " << val << " " << val2 << " ";

					}
				}
				// b: saw tooth linear interpolation between initial, median and final value from (0,0,0)% to (0,1,0)% at mid time to (0,0,1)% at the end
				// SAW TOOTH INTERPOLATION
				else if (valCh == 't') {
					newScene.scene_interpolations[indVar].interpolation_mode = pg_enum_sawtooth_interpolation;
					if (valCh2 == ' ') {
						newScene.scene_interpolations[indVar].initialization_mode = pg_enum_scenario_initial;
					}
					else if (valCh2 == 'k') {
						newScene.scene_interpolations[indVar].initialization_mode = pg_current_value;
					}
					sstream >> newScene.scene_interpolations[indVar].midTermValue;
					if (pg_FullScenarioVarIndiceRanges[indVar][0] != -1) {
						for (int index = pg_FullScenarioVarIndiceRanges[indVar][0]; index < pg_FullScenarioVarIndiceRanges[indVar][1]; index++) {
							newScene.scene_interpolations[indVar].midTermValueArray[index] = newScene.scene_interpolations[indVar].midTermValue;
						}
					}
				}
				// STEPWISE VALUE WITHOUT INTERPOLATION
				else if (valCh == 's' || valCh == 'S') {
					newScene.scene_interpolations[indVar].interpolation_mode = pg_enum_stepwise_interpolation;
					newScene.scene_interpolations[indVar].initialization_mode = pg_enum_scenario_initial;
					newScene.scene_interpolations[indVar].offSet = 0.0;
					newScene.scene_interpolations[indVar].duration = 1.0;
					if (valCh == 'S') {
						sstream >> vals;
						double val = pg_stringToDuration(vals, newScene.scene_duration, nbScenesInScenario + 1, indVar + 1);
						if (val < 0.0) {
							sprintf(pg_errorStr, "Error: offset values of S(tepwise) in scene %d (%s) var %d lower than 0.0: %.3f\n", nbScenesInScenario + 1, newScene.scene_IDs.c_str(), indVar + 1, val); pg_ReportError(pg_errorStr); throw 50;
						}
						if (val <= 1.0) {
							newScene.scene_interpolations[indVar].offSet = val;
							newScene.scene_interpolations[indVar].duration = 1.0 - double(val);
						}
						else {
							sprintf(pg_errorStr, "Error: offset value of S(tepwise) in scene %d (%s) var %d greater than 1.0: %.3f\n", nbScenesInScenario + 1, newScene.scene_IDs.c_str(), indVar + 1, val); pg_ReportError(pg_errorStr); throw 50;
						}
					}
					else {
						if (pg_FullScenarioVarTypes[indVar] == _pg_string
							&& newScene.scene_initial_parameters[indVar].val_string
							!= newScene.scene_final_parameters[indVar].val_string) {
							sprintf(pg_errorStr, "Error: S(tepwise) interpolation should have same initial and final values %s/%s in scene %d (%s) var %d (%s)\n",
								newScene.scene_initial_parameters[indVar].val_string.c_str(), newScene.scene_final_parameters[indVar].val_string.c_str(), 
								nbScenesInScenario + 1, newScene.scene_IDs.c_str(), indVar + 1, pg_FullScenarioVarMessages[indVar].c_str()); pg_ReportError(pg_errorStr); throw 50;
						}
						else if (pg_FullScenarioVarTypes[indVar] != _pg_string) {
							if (pg_FullScenarioVarIndiceRanges[indVar][0] == -1) {
								if (newScene.scene_initial_parameters[indVar].val_num
									!= newScene.scene_final_parameters[indVar].val_num) {
									sprintf(pg_errorStr, "Error: S(tepwise) interpolation should have same initial and final values %.2f/%.2f in scene %d (%s) var %d (%s)\n",
										newScene.scene_initial_parameters[indVar].val_num, newScene.scene_final_parameters[indVar].val_num, nbScenesInScenario + 1,
										newScene.scene_IDs.c_str(), indVar + 1, pg_FullScenarioVarMessages[indVar].c_str()); pg_ReportError(pg_errorStr); throw 50;
								}
							}
							else {
								for (int index = pg_FullScenarioVarIndiceRanges[indVar][0]; index < pg_FullScenarioVarIndiceRanges[indVar][1]; index++) {
									if (newScene.scene_initial_parameters[indVar].val_array[index]
										!= newScene.scene_final_parameters[indVar].val_array[index]) {
										sprintf(pg_errorStr, "Error: S(tepwise) interpolation should have same initial and final values %.2f/%.2f in scene %d (%s) var %d  (%s) index %d\n", 
											newScene.scene_initial_parameters[indVar].val_array[index], newScene.scene_final_parameters[indVar].val_array[index],
											nbScenesInScenario + 1, newScene.scene_IDs.c_str(), indVar + 1, pg_FullScenarioVarMessages[indVar].c_str(), index + 1); pg_ReportError(pg_errorStr); throw 50;
									}
								}
							}
						}
					}
				}
				// KEEP CURRENT VALUE WITHOUT INTERPOLATION
				else if (valCh == 'k' || valCh == 'K') {
					newScene.scene_interpolations[indVar].initialization_mode = pg_current_value;
					newScene.scene_interpolations[indVar].interpolation_mode = pg_enum_keep_value;
				}
				else {					
					printf("indVar %d indP %d\n", indVar, indP);
					sprintf(pg_errorStr, "Error: unknown interpolation mode in scene %d (%s) parameter %d (%d in full) [%d] [%c]!", nbScenesInScenario + 1, newScene.scene_IDs.c_str(), indP + 1, indVar + 1, int(valCh), valCh); pg_ReportError(pg_errorStr); throw 50;
				}

				//if (indVar == _trkDecay && nbScenesInScenario == 12) {
				//	printf("Decay Scene %d Interpolation mode %d offset %.2f dur %.2f init %.2f fin %.2f\n", nbScenesInScenario, newScene.scene_interpolations[indVar].interpolation_mode,
				//		newScene.scene_interpolations[indVar].offSet,
				//		newScene.scene_interpolations[indVar].duration,
				//		newScene.scene_initial_parameters[indVar],
				//		newScene.scene_final_parameters[indVar]);
				//}
			}
		}

		// /scene
		std::getline(scenarioFin, line);
		pg_stringstreamStoreLine(&sstream, &line);
		sstream >> ID; // string /scene
		if (ID.compare("/scene") != 0) {
			sprintf(pg_errorStr, "Error: incorrect configuration file expected string \"/scene\" not found! (instead \"%s\")", ID.c_str()); pg_ReportError(pg_errorStr); throw 100;
		}

		pg_Scenario[indConfiguration].push_back(newScene);
		nbScenesInScenario++;
	}

	pg_parseScenarioRenderingFiles(scenarioFin, indConfiguration);

	pg_parseScenarioUDP(scenarioFin, indConfiguration);

	pg_parseScenarioCameras(scenarioFin, indConfiguration);

	pg_parseScenarioShaders(scenarioFin, indConfiguration);

	pg_parseScenarioDirectories(scenarioFin, indConfiguration);

	pg_parseScenarioVideos(scenarioFin, indConfiguration);

	pg_parseScenarioClipsAndPhotos(scenarioFin, indConfiguration);

	pg_parseScenarioSoundtracks(scenarioFin, indConfiguration);

	pg_parseScenarioSVGPaths(scenarioFin, indConfiguration);

	pg_parseScenarioClipArt(scenarioFin, indConfiguration);

	pg_parseScenarioMeshes(scenarioFin, indConfiguration);

	pg_parseScenarioTextures(scenarioFin, indConfiguration);

	pg_parseScenarioColorPalettes(scenarioFin, indConfiguration);

	pg_parseScenarioColorPresets(scenarioFin, indConfiguration);

	pg_parseScenarioLights(scenarioFin, indConfiguration);

	// saves the original durations
	pg_saveInitialTimesAndDurations(indConfiguration);

	// intialization of texture data for screen messages
	pg_init_texDataScreenFont();

	// log file opening
	pg_snapshots_dir_path_name = pg_snapshots_dir_path_prefix + "/pic_" + project_name + "_" + pg_date_stringStream.str() + "/";
	pg_csv_file_name = pg_snapshots_dir_path_name + "porphyrograph-" + project_name + "-" + pg_date_stringStream.str() + ".csv";

	int nError = 0;
#if defined(_WIN32)
	nError = CreateDirectoryA(pg_snapshots_dir_path_name.c_str(), NULL); // can be used on Windows
#else 
	nError = mkdir(pg_snapshots_dir_path_name.c_str(), S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH); // can be used on non-Windows
#endif
	if (nError != 0) {
		// handle your error here
	}

	// defines glut window
	pg_setWindowDimensions();

	if (indConfiguration == 0) {
		printf("Window %dx%d working window width:%d working window doubling (1/0) %d Margin:%d TopLeft %dx%d\n",
			PG_WINDOW_WIDTH, PG_WINDOW_HEIGHT, pg_workingWindow_width, double_window,
			pg_rightWindowVMargin, window_x, window_y);
	}

}	

void pg_setWindowDimensions(void) {
	if (double_window && (PG_WINDOW_WIDTH > 1920)) {
		if (wide_screen) {
			pg_workingWindow_width = PG_WINDOW_WIDTH * 3 / 7;
		}
		else {
			pg_workingWindow_width = PG_WINDOW_WIDTH / 2;
		}
		pg_rightWindowVMargin = (PG_WINDOW_WIDTH -  2 * pg_workingWindow_width) / 2;
	}
	else {
		pg_workingWindow_width = PG_WINDOW_WIDTH;
		pg_rightWindowVMargin = 0;
	}
	// looks for the smallest powers of 2 for width and height
	pg_workingWindow_width_powerOf2 = 1;
	while (pg_workingWindow_width_powerOf2 < pg_workingWindow_width)
		pg_workingWindow_width_powerOf2 *= 2;
	pg_window_height_powerOf2 = 1;
	while (pg_window_height_powerOf2 < PG_WINDOW_HEIGHT)
		pg_window_height_powerOf2 *= 2;
	pg_window_width_powerOf2 = 1;
	while (pg_window_width_powerOf2 < PG_WINDOW_WIDTH)
		pg_window_width_powerOf2 *= 2;
	pg_workingWindow_width_powerOf2_ratio =
		float(pg_workingWindow_width) / float(pg_workingWindow_width_powerOf2);
	pg_window_height_powerOf2_ratio =
		float(PG_WINDOW_HEIGHT) / float(pg_window_height_powerOf2);
}

// to be called once after parsing
void pg_saveInitialTimesAndDurations(int indConfiguration) {
	for (Scene &scene : pg_Scenario[indConfiguration]) {
		scene.scene_originalDuration = scene.scene_duration;
		scene.scene_originalInitial_time = scene.scene_initial_time;
		scene.scene_originalFinal_time = scene.scene_final_time;
	}
}
void pg_LoadScenarioFile(const char* scenarioFileName, int indConfiguration) {
	//printf("Loading %s\n", scenarioFileName);

	std::ifstream scenarioFin(scenarioFileName);
	if (!scenarioFin) {
		sprintf(pg_errorStr, "Error: file [%s] not found!", scenarioFileName); pg_ReportError(pg_errorStr); throw 11;
	}
	pg_parseScenarioFile(scenarioFin, indConfiguration);
	scenarioFin.close();
}

